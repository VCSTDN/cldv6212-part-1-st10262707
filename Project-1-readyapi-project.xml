<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="a609b257-1ac3-4782-93fd-c8ebc5e279d5" created="3.54.0" activeEnvironment="Default environment" encryptionMode="Not encrypted" name="Project 1" projectVersion="" updated="3.54.0 2024-07-17T11:22:49Z" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:restMockService id="c73d0876-39be-4502-99c5-3c5aadb3ed1e" port="8080" path="/" host="localhost" name="REST Virtual Service 1" routeEndpoint="https://localhost:17150" routeModeEnabled="true">
    <con:settings/>
    <con:properties/>
    <con:constraints>
      <con:congestion>0</con:congestion>
      <con:inputBandwidth>-1</con:inputBandwidth>
      <con:outputBandwidth>-1</con:outputBandwidth>
      <con:maxThreadPoolCapacity>20</con:maxThreadPoolCapacity>
      <con:coreThreadPoolCapacity>5</con:coreThreadPoolCapacity>
      <con:virtError>
        <con:start>0</con:start>
        <con:endless>true</con:endless>
      </con:virtError>
    </con:constraints>
    <con:headerValidator type="NONE"/>
    <con:restMockAction name="/" method="GET" resourcePath="/" id="df05510c-9978-4c70-81ce-4cb4cc787f23">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="Response 1" id="8ff64c0e-5af8-4b1b-970a-d223e6f6bf49" httpResponseStatus="200" mediaType="text/html" encoding="utf-8" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:responseContent><![CDATA[<!DOCTYPE html>
<html lang="en"><head><meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <base href="/">
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <link rel="stylesheet" href="_content/Microsoft.FluentUI.AspNetCore.Components/css/reboot.css">
    <link rel="stylesheet" href="_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.bundle.scp.css">
    <link rel="stylesheet" href="css/app.css">
    <link rel="stylesheet" href="Aspire.Dashboard.styles.css">
    <!--Blazor:{"type":"server","key":{"locationHash":"77D12F14A8105320B1AAED6AE7E689DA0EC4483270A645E84079EAA0FFDF550D:5","formattedComponentKey":""},"sequence":0,"descriptor":"CfDJ8JxuemUtqsRFjZA\u002BriOj1JwfiKChW5s2ylVgI0CNLvX/FWjYnCOSBFYM3Z2zsBP2tM3p0mlZRGvt1/S6p2CnWCr457yw0vlU16T0fABtbWSn/JmMn2UOt0GYUAsDa0yWLE1n89C28bnaboZa9gYySagJZ2HP39CHBAKVWQYG440Ka94v\u002BvLB8PkvXMD4Vr30Q1z4s7K1QfsSBgDPcfy1g69MrjWDCX0rl/6CnTSOrPUBPwdLfEDeFCiVCTyAuSUZLFzFIAx09Vs/S78hD0wPYMo9R\u002ByEDd1w/yjcA8Q3dIvNi1uBTP/zHgE9sNOY9YdQDxKz8K9M0j2bYTKcbBX\u002BIW\u002BDrPHDaJEjZvLiv5BAizY3vW8YBPJx9oSV\u002BP2f3hrxMMKyAmf6JwEDt8i8vVocg0K1snq/cuKmZTzgDPsXUDVAFJ/qNc971QWKgcL1lv9cyefg8Tw7KDW2gIXvBqGdJqkUcmIKxK3RjZahYW/\u002B3j8sIJPIwYCFL2TDOwI5detbzk8lDXvemjlRDwyV12YVFXY35ydPSOE1XGON30CNmZdJa0bsjh65nziDGtbmiVnDUA2ikHGHsVTTbUNnVcEblK4="}-->
    
    <style>@media (prefers-color-scheme: dark) {
            body {
                background-color: #272727;
            }
        }
    </style></head>

<body class="before-upgrade"><!--Blazor:{"type":"server","key":{"locationHash":"A3DBAED230774A6FE95C8476F0F9A18557AFBBA6F1AABF3952C879C56B8878FC:11","formattedComponentKey":""},"sequence":1,"descriptor":"CfDJ8JxuemUtqsRFjZA\u002BriOj1JwJFcTDMkPiClI0FLzE\u002B94LQj3hSW4iZzdQGVWuECLQY5mqcNDmdxQiw4pU9Mk27tmvA\u002Bxnp2n7UpldQY4IKC2uPAkPpguafkBYLFa63uCHDDgpNm9eyMa4roG\u002BWzX5v\u002BerKFqI623ZJh6JoDTTVDlrfUKbjaYiGdbQW0ZQcNP7rV8xYbh13wKIHyuvWdAFv8wHOBkyswpEAt/GXVwtndocNOrTlUf\u002BLd6cx09Vbnce2\u002BoNYGxdbItRxB53mX7vXOC2fdJYy67CRi97JTgvenIS9hm074hOBG41669ZZfyzPLO0aPgWJ0TaUkYcd6RtucVE\u002BPIEwEkTIj8z3tHYIDlitDQ2zD62jIPnqJInXzsZvqrf7d1plQieaaYNBSdxAQ8NHb/l1M0uNGDnL7tb5JQr/RyJVMTcqthjhJg/Vd6bCKfOWEccjqYOYW2Bns/IukgB86FABUq8KQSQF9zuAGrQG9rPI5DxKeObBJ0cn1ef\u002BIFejyg7CsnpoVcScSNudwk\u002Bw4y0mUXqiTcnWZnvGsva"}-->
    <script src="_framework/blazor.web.js"></script>
    <script src="js/app.js"></script>
    <script src="js/theme.js" type="module"></script>
    <script src="js/plotly-2.26.0.min.js"></script></body></html><!--Blazor-Web-Initializers:Ww0KICAiX2NvbnRlbnQvTWljcm9zb2Z0LkZsdWVudFVJLkFzcE5ldENvcmUuQ29tcG9uZW50cy9NaWNyb3NvZnQuRmx1ZW50VUkuQXNwTmV0Q29yZS5Db21wb25lbnRzLmxpYi5tb2R1bGUuanMiDQpd--><!--Blazor-Server-Component-State:CfDJ8JxuemUtqsRFjZA+riOj1JzbS1zQTJvdj3ZY8IEIUyPmrctcnq1rGR4NM4Qtm+gzMhw5SA58yI6F/rq/iBHsF2cbVk1Uwg5IhlNFRbBknuEnSfNqYjug7AXuEZ1HHsxpqCxn3XnCDyMTCxy3V0u48btf9lVrft68bcnPp8gK1DGNGse8XuoUIJmI2DdJ/F02O838KVCnRh5BO0kvScwzghUI58F7K+nXHBn0FpJ6NEALqcWIV3FkQZiMPp3wTvJWTHp7O9Qf2uR3ZBLwc0ofJoeUZEZq6Ru1iBluhbwKQtcTvGOKqev5rUIES6WGDMrpWby+hqX/Rk/RoiE0i29tsz5adNLQCQwOFsVPgMIPXhOOUv6jGfzmSENY8hD/SmVtNHdQ5uYaMkI5AXBiwkbcrbfVXlk0+rW89+wJF3GlAZZUMnvbHLvgmRHW5AEHWxnvzJynLpWLFxrgxmMRz+ZHKjfm2IBGEfeGBc5UHIXppQSky21LoiCV+ORE/fpFNn7y/auBIiEyVS/9WQZFFQ/BmONBpfA5m8tfb+U62iZ6eMzzenNGyQ9eYSYImPnc6BCHyjKpw8iRrVMEaQ702Mn5b80lQ7nqzFQjdopENxSEPamR-->]]></con:responseContent>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache, no-store, max-age=0</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Pragma</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>blazor-enhanced-nav</con:name>
          <con:value>allow</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:32 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="Response 2" id="afa78d0e-2f46-4f5c-9a80-052ca69af090" httpResponseStatus="200" mediaType="text/html" encoding="utf-8" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:responseContent><![CDATA[<!DOCTYPE html>
<html lang="en"><head><meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <base href="/">
    <link rel="icon" type="image/x-icon" href="favicon.ico">
    <link rel="stylesheet" href="_content/Microsoft.FluentUI.AspNetCore.Components/css/reboot.css">
    <link rel="stylesheet" href="_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.bundle.scp.css">
    <link rel="stylesheet" href="css/app.css">
    <link rel="stylesheet" href="Aspire.Dashboard.styles.css">
    <!--Blazor:{"type":"server","key":{"locationHash":"77D12F14A8105320B1AAED6AE7E689DA0EC4483270A645E84079EAA0FFDF550D:5","formattedComponentKey":""},"sequence":0,"descriptor":"CfDJ8JxuemUtqsRFjZA\u002BriOj1JycEaiTQjhWin10Z9CI/fLp1zsneSoz7mxm3F6E0tv9VewsiaIX2S7AcXbprtgK\u002BCdb0qbM9PYhLZSngC6LbE9PbRcV49KrJGXXqxQOa64O30oXsB7A4J/zHnneGq9FCHdiewhMT5MSYVKpyEp24gl26ljCh7krO/pdHIURbFDn8v0g0wId7S1UKJ15da54V2ZpsayfTsaSXfYxTqTfQoMzykGp/58Z5JuFXFV98OEK1N8koPu1mVLxHmalkvzqPtsCXIN4P3aASjB1r0lK7bSz1yP3\u002BnQXmXpXyyUftaVIqMuCsoZ4fdiWQdFxo3hAqZQXh5VOSQmVZERYrmxuTS/56da/w4s\u002Bp3lMTSf6aQlFmamQN\u002BzP4kUqmvsXxIj1ZwFslprlS/fnkAr8gnX0f4MRcwXS7uSl7JxEtSk//WfbpaAmS\u002BEpqeqwDMIgp3qN21o5ZSGbcgC13U5ZHzmn8CBZTj42lf/f8l77BaPp5nlDWQjDOaBzOi5STG//sMFmZsgULlRtuwh1gC4IV7B\u002BHvpb4xbwp3rk\u002BAxXkX5e8oAQG4CIv2x9vdhnhZHp4\u002BqSh\u002BM="}-->
    
    <style>@media (prefers-color-scheme: dark) {
            body {
                background-color: #272727;
            }
        }
    </style></head>

<body class="before-upgrade"><!--Blazor:{"type":"server","key":{"locationHash":"A3DBAED230774A6FE95C8476F0F9A18557AFBBA6F1AABF3952C879C56B8878FC:11","formattedComponentKey":""},"sequence":1,"descriptor":"CfDJ8JxuemUtqsRFjZA\u002BriOj1JwORuQJNDTYW9k5bTx4pTmV6TfuRjn2pd2fWQV92\u002BvRg5v8g5p1JdLqJP0YgRurlZtv5DXDRgtQzHvNb6V6xGUbkv3pBxwQthHrabdnyTtVfqlzwlWWBNgGwu/VZjSHnFRzMuizmTr7pA/Xc4WHQkmMU0ZrbD8umaDpoEGXE3RHJHbuVmoLo35ajO0wO63svDlkxLFSDuZsuM6NqnibwbofHf4zhP773SlD/Cr/DwJi0y2oBOBKhB3s/I\u002BNXi3R9cvmdVa2i8/TTEcKLzil1F0tm/Q24DLgMNHyp2Db3b0uVsSPSUAHVmNZZwFQZ8HbXBUzC6rX3/os2UDUXmZW34VUNtnQbw1wg0e1e7G1r8porr6uizpgKmu4i/kH\u002B2/lmqiIf93UnPv16Rn/LwvXYdxNEtml7\u002B9U/Rcw9iR2A9uGJSJsL9ZaTjKXTcaRk8E2gAhJA3uf5Kcr5ddICl0T0NJayacMiNc9QYUZyFoRkmKLMN9Mhg0wIzZ543dnXmfEHEcd4WXZZ8JpMCe262lnrp8L"}-->
    <script src="_framework/blazor.web.js"></script>
    <script src="js/app.js"></script>
    <script src="js/theme.js" type="module"></script>
    <script src="js/plotly-2.26.0.min.js"></script></body></html><!--Blazor-Web-Initializers:Ww0KICAiX2NvbnRlbnQvTWljcm9zb2Z0LkZsdWVudFVJLkFzcE5ldENvcmUuQ29tcG9uZW50cy9NaWNyb3NvZnQuRmx1ZW50VUkuQXNwTmV0Q29yZS5Db21wb25lbnRzLmxpYi5tb2R1bGUuanMiDQpd--><!--Blazor-Server-Component-State:CfDJ8JxuemUtqsRFjZA+riOj1JyYe2pzzKjGKlYiK2tRuNb6lPp8UHq/bdfDq4Wq7qZ3AcHnnM5guN9XUtnlsuKuqieND6RV2SzlVJ8U6dQDDyIIjrI1CFMRQAzSbpWK87KYGwY1AGsTFo6zi9mvf2xrSqN1GzkiplFvpWgMs4o+9Z8FyADpSCJ5YN4OGRLUDlU/cstRSyIDb0b0UllVCMeTqWrJmGQxxYpcOMTgSBe1c98B8bmucsTCEvAYmFl/c4uhTlXz/6i5rHGH+1ilWYN7SkuI1TQ2HeKuuM0Gpw+7ii0NG5hLSRmejhRTzfwd7s091FvhiylyQTRwABhcwrwOWarPQJT052sOrQ3PF4UCu0AqJP2K5G8cuzeciaxYUkNVdI7r78KYEt8wlu8naC41ByH482DbBnuW1UE97XJ+jA8MztGFTi4uHJMqb9spDBez+DrcLY1sVQR/IP1Asf69zycelhRdts3/kbtXtSFeIT9BWbZCeAfADR5vW5PmOC82c5PyQLT+NSAYBQGrYN9zJjCbthgpgOkgeGDig6Pj8yzZDcO64vn5gEBTisLyHZGqCT4ig/QG3XCAud3LnKqMvX8Kksv2PqdWPcoIiEBqCKAy-->]]></con:responseContent>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache, no-store, max-age=0</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Pragma</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>blazor-enhanced-nav</con:name>
          <con:value>allow</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:28 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/_framework/blazor.web.js" method="GET" resourcePath="/_framework/blazor.web.js" id="f2b765aa-9a56-4bfa-ba7a-55c4797332bd">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="Response 1" id="7c93acaf-8057-4b12-9ca6-e9ce3f16a948" httpResponseStatus="200" mediaType="text/javascript" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:responseContent><![CDATA[(()=>{var e={778:()=>{},77:()=>{},203:()=>{},200:()=>{},628:()=>{},321:()=>{}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,n),i.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{"use strict";var e,t,o;!function(e){const t=[],n="__jsObjectId",o="__dotNetObject",r="__byte[]",i="__dotNetStream",s="__jsStreamReferenceLength";let a,c;class l{constructor(e){this._jsObject=e,this._cachedFunctions=new Map}findFunction(e){const t=this._cachedFunctions.get(e);if(t)return t;let n,o=this._jsObject;if(e.split(".").forEach((t=>{if(!(t in o))throw new Error(`Could not find '${e}' ('${t}' was undefined).`);n=o,o=o[t]})),o instanceof Function)return o=o.bind(n),this._cachedFunctions.set(e,o),o;throw new Error(`The value '${e}' is not a function.`)}getWrappedObject(){return this._jsObject}}const h={0:new l(window)};h[0]._cachedFunctions.set("import",(e=>("string"==typeof e&&e.startsWith("./")&&(e=new URL(e.substr(2),document.baseURI).toString()),import(e))));let d,u=1;function p(e){t.push(e)}function f(e){if(e&&"object"==typeof e){h[u]=new l(e);const t={[n]:u};return u++,t}throw new Error(`Cannot create a JSObjectReference from the value '${e}'.`)}function g(e){let t=-1;if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),e instanceof Blob)t=e.size;else{if(!(e.buffer instanceof ArrayBuffer))throw new Error("Supplied value is not a typed array or blob.");if(void 0===e.byteLength)throw new Error(`Cannot create a JSStreamReference from the value '${e}' as it doesn't have a byteLength.`);t=e.byteLength}const o={[s]:t};try{const t=f(e);o[n]=t[n]}catch(t){throw new Error(`Cannot create a JSStreamReference from the value '${e}'.`)}return o}function m(e,n){c=e;const o=n?JSON.parse(n,((e,n)=>t.reduce(((t,n)=>n(e,t)),n))):null;return c=void 0,o}function v(){if(void 0===a)throw new Error("No call dispatcher has been set.");if(null===a)throw new Error("There are multiple .NET runtimes present, so a default dispatcher could not be resolved. Use DotNetObject to invoke .NET instance methods.");return a}e.attachDispatcher=function(e){const t=new y(e);return void 0===a?a=t:a&&(a=null),t},e.attachReviver=p,e.invokeMethod=function(e,t,...n){return v().invokeDotNetStaticMethod(e,t,...n)},e.invokeMethodAsync=function(e,t,...n){return v().invokeDotNetStaticMethodAsync(e,t,...n)},e.createJSObjectReference=f,e.createJSStreamReference=g,e.disposeJSObjectReference=function(e){const t=e&&e[n];"number"==typeof t&&_(t)},function(e){e[e.Default=0]="Default",e[e.JSObjectReference=1]="JSObjectReference",e[e.JSStreamReference=2]="JSStreamReference",e[e.JSVoidResult=3]="JSVoidResult"}(d=e.JSCallResultType||(e.JSCallResultType={}));class y{constructor(e){this._dotNetCallDispatcher=e,this._byteArraysToBeRevived=new Map,this._pendingDotNetToJSStreams=new Map,this._pendingAsyncCalls={},this._nextAsyncCallId=1}getDotNetCallDispatcher(){return this._dotNetCallDispatcher}invokeJSFromDotNet(e,t,n,o){const r=m(this,t),i=I(b(e,o)(...r||[]),n);return null==i?null:T(this,i)}beginInvokeJSFromDotNet(e,t,n,o,r){const i=new Promise((e=>{const o=m(this,n);e(b(t,r)(...o||[]))}));e&&i.then((t=>T(this,[e,!0,I(t,o)]))).then((t=>this._dotNetCallDispatcher.endInvokeJSFromDotNet(e,!0,t)),(t=>this._dotNetCallDispatcher.endInvokeJSFromDotNet(e,!1,JSON.stringify([e,!1,w(t)]))))}endInvokeDotNetFromJS(e,t,n){const o=t?m(this,n):new Error(n);this.completePendingCall(parseInt(e,10),t,o)}invokeDotNetStaticMethod(e,t,...n){return this.invokeDotNetMethod(e,t,null,n)}invokeDotNetStaticMethodAsync(e,t,...n){return this.invokeDotNetMethodAsync(e,t,null,n)}invokeDotNetMethod(e,t,n,o){if(this._dotNetCallDispatcher.invokeDotNetFromJS){const r=T(this,o),i=this._dotNetCallDispatcher.invokeDotNetFromJS(e,t,n,r);return i?m(this,i):null}throw new Error("The current dispatcher does not support synchronous calls from JS to .NET. Use invokeDotNetMethodAsync instead.")}invokeDotNetMethodAsync(e,t,n,o){if(e&&n)throw new Error(`For instance method calls, assemblyName should be null. Received '${e}'.`);const r=this._nextAsyncCallId++,i=new Promise(((e,t)=>{this._pendingAsyncCalls[r]={resolve:e,reject:t}}));try{const i=T(this,o);this._dotNetCallDispatcher.beginInvokeDotNetFromJS(r,e,t,n,i)}catch(e){this.completePendingCall(r,!1,e)}return i}receiveByteArray(e,t){this._byteArraysToBeRevived.set(e,t)}processByteArray(e){const t=this._byteArraysToBeRevived.get(e);return t?(this._byteArraysToBeRevived.delete(e),t):null}supplyDotNetStream(e,t){if(this._pendingDotNetToJSStreams.has(e)){const n=this._pendingDotNetToJSStreams.get(e);this._pendingDotNetToJSStreams.delete(e),n.resolve(t)}else{const n=new E;n.resolve(t),this._pendingDotNetToJSStreams.set(e,n)}}getDotNetStreamPromise(e){let t;if(this._pendingDotNetToJSStreams.has(e))t=this._pendingDotNetToJSStreams.get(e).streamPromise,this._pendingDotNetToJSStreams.delete(e);else{const n=new E;this._pendingDotNetToJSStreams.set(e,n),t=n.streamPromise}return t}completePendingCall(e,t,n){if(!this._pendingAsyncCalls.hasOwnProperty(e))throw new Error(`There is no pending async call with ID ${e}.`);const o=this._pendingAsyncCalls[e];delete this._pendingAsyncCalls[e],t?o.resolve(n):o.reject(n)}}function w(e){return e instanceof Error?`${e.message}\n${e.stack}`:e?e.toString():"null"}function b(e,t){const n=h[t];if(n)return n.findFunction(e);throw new Error(`JS object instance with ID ${t} does not exist (has it been disposed?).`)}function _(e){delete h[e]}e.findJSFunction=b,e.disposeJSObjectReferenceById=_;class S{constructor(e,t){this._id=e,this._callDispatcher=t}invokeMethod(e,...t){return this._callDispatcher.invokeDotNetMethod(null,e,this._id,t)}invokeMethodAsync(e,...t){return this._callDispatcher.invokeDotNetMethodAsync(null,e,this._id,t)}dispose(){this._callDispatcher.invokeDotNetMethodAsync(null,"__Dispose",this._id,null).catch((e=>console.error(e)))}serializeAsArg(){return{[o]:this._id}}}e.DotNetObject=S,p((function(e,t){if(t&&"object"==typeof t){if(t.hasOwnProperty(o))return new S(t[o],c);if(t.hasOwnProperty(n)){const e=t[n],o=h[e];if(o)return o.getWrappedObject();throw new Error(`JS object instance with Id '${e}' does not exist. It may have been disposed.`)}if(t.hasOwnProperty(r)){const e=t[r],n=c.processByteArray(e);if(void 0===n)throw new Error(`Byte array index '${e}' does not exist.`);return n}if(t.hasOwnProperty(i)){const e=t[i],n=c.getDotNetStreamPromise(e);return new C(n)}}return t}));class C{constructor(e){this._streamPromise=e}stream(){return this._streamPromise}async arrayBuffer(){return new Response(await this.stream()).arrayBuffer()}}class E{constructor(){this.streamPromise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}function I(e,t){switch(t){case d.Default:return e;case d.JSObjectReference:return f(e);case d.JSStreamReference:return g(e);case d.JSVoidResult:return null;default:throw new Error(`Invalid JS call result type '${t}'.`)}}let k=0;function T(e,t){k=0,c=e;const n=JSON.stringify(t,R);return c=void 0,n}function R(e,t){if(t instanceof S)return t.serializeAsArg();if(t instanceof Uint8Array){c.getDotNetCallDispatcher().sendByteArray(k,t);const e={[r]:k};return k++,e}return t}}(e||(e={})),function(e){e[e.prependFrame=1]="prependFrame",e[e.removeFrame=2]="removeFrame",e[e.setAttribute=3]="setAttribute",e[e.removeAttribute=4]="removeAttribute",e[e.updateText=5]="updateText",e[e.stepIn=6]="stepIn",e[e.stepOut=7]="stepOut",e[e.updateMarkup=8]="updateMarkup",e[e.permutationListEntry=9]="permutationListEntry",e[e.permutationListEnd=10]="permutationListEnd"}(t||(t={})),function(e){e[e.element=1]="element",e[e.text=2]="text",e[e.attribute=3]="attribute",e[e.component=4]="component",e[e.region=5]="region",e[e.elementReferenceCapture=6]="elementReferenceCapture",e[e.markup=8]="markup",e[e.namedEvent=10]="namedEvent"}(o||(o={}));class r{constructor(e,t){this.componentId=e,this.fieldValue=t}static fromEvent(e,t){const n=t.target;if(n instanceof Element){const t=function(e){return e instanceof HTMLInputElement?e.type&&"checkbox"===e.type.toLowerCase()?{value:e.checked}:{value:e.value}:e instanceof HTMLSelectElement||e instanceof HTMLTextAreaElement?{value:e.value}:null}(n);if(t)return new r(e,t.value)}return null}}const i=new Map,s=new Map,a=[];function c(e){return i.get(e)}function l(e){const t=i.get(e);return(null==t?void 0:t.browserEventName)||e}function h(e,t){e.forEach((e=>i.set(e,t)))}function d(e){const t=[];for(let n=0;n<e.length;n++){const o=e[n];t.push({identifier:o.identifier,clientX:o.clientX,clientY:o.clientY,screenX:o.screenX,screenY:o.screenY,pageX:o.pageX,pageY:o.pageY})}return t}function u(e){return{detail:e.detail,screenX:e.screenX,screenY:e.screenY,clientX:e.clientX,clientY:e.clientY,offsetX:e.offsetX,offsetY:e.offsetY,pageX:e.pageX,pageY:e.pageY,movementX:e.movementX,movementY:e.movementY,button:e.button,buttons:e.buttons,ctrlKey:e.ctrlKey,shiftKey:e.shiftKey,altKey:e.altKey,metaKey:e.metaKey,type:e.type}}h(["input","change"],{createEventArgs:function(e){const t=e.target;if(function(e){return-1!==p.indexOf(e.getAttribute("type"))}(t)){const e=function(e){const t=e.value,n=e.type;switch(n){case"date":case"month":case"week":return t;case"datetime-local":return 16===t.length?t+":00":t;case"time":return 5===t.length?t+":00":t}throw new Error(`Invalid element type '${n}'.`)}(t);return{value:e}}if(function(e){return e instanceof HTMLSelectElement&&"select-multiple"===e.type}(t)){const e=t;return{value:Array.from(e.options).filter((e=>e.selected)).map((e=>e.value))}}{const e=function(e){return!!e&&"INPUT"===e.tagName&&"checkbox"===e.getAttribute("type")}(t);return{value:e?!!t.checked:t.value}}}}),h(["copy","cut","paste"],{createEventArgs:e=>({type:e.type})}),h(["drag","dragend","dragenter","dragleave","dragover","dragstart","drop"],{createEventArgs:e=>{return{...u(t=e),dataTransfer:t.dataTransfer?{dropEffect:t.dataTransfer.dropEffect,effectAllowed:t.dataTransfer.effectAllowed,files:Array.from(t.dataTransfer.files).map((e=>e.name)),items:Array.from(t.dataTransfer.items).map((e=>({kind:e.kind,type:e.type}))),types:t.dataTransfer.types}:null};var t}}),h(["focus","blur","focusin","focusout"],{createEventArgs:e=>({type:e.type})}),h(["keydown","keyup","keypress"],{createEventArgs:e=>{return{key:(t=e).key,code:t.code,location:t.location,repeat:t.repeat,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey,altKey:t.altKey,metaKey:t.metaKey,type:t.type};var t}}),h(["contextmenu","click","mouseover","mouseout","mousemove","mousedown","mouseup","mouseleave","mouseenter","dblclick"],{createEventArgs:e=>u(e)}),h(["error"],{createEventArgs:e=>{return{message:(t=e).message,filename:t.filename,lineno:t.lineno,colno:t.colno,type:t.type};var t}}),h(["loadstart","timeout","abort","load","loadend","progress"],{createEventArgs:e=>{return{lengthComputable:(t=e).lengthComputable,loaded:t.loaded,total:t.total,type:t.type};var t}}),h(["touchcancel","touchend","touchmove","touchenter","touchleave","touchstart"],{createEventArgs:e=>{return{detail:(t=e).detail,touches:d(t.touches),targetTouches:d(t.targetTouches),changedTouches:d(t.changedTouches),ctrlKey:t.ctrlKey,shiftKey:t.shiftKey,altKey:t.altKey,metaKey:t.metaKey,type:t.type};var t}}),h(["gotpointercapture","lostpointercapture","pointercancel","pointerdown","pointerenter","pointerleave","pointermove","pointerout","pointerover","pointerup"],{createEventArgs:e=>{return{...u(t=e),pointerId:t.pointerId,width:t.width,height:t.height,pressure:t.pressure,tiltX:t.tiltX,tiltY:t.tiltY,pointerType:t.pointerType,isPrimary:t.isPrimary};var t}}),h(["wheel","mousewheel"],{createEventArgs:e=>{return{...u(t=e),deltaX:t.deltaX,deltaY:t.deltaY,deltaZ:t.deltaZ,deltaMode:t.deltaMode};var t}}),h(["cancel","close","toggle"],{createEventArgs:()=>({})});const p=["date","datetime-local","month","time","week"],f=new Map;let g,m,v=0;const y={async add(e,t,n){if(!n)throw new Error("initialParameters must be an object, even if empty.");const o="__bl-dynamic-root:"+(++v).toString();f.set(o,e);const r=await S().invokeMethodAsync("AddRootComponent",t,o),i=new _(r,m[t]);return await i.setParameters(n),i}};function w(e){const t=f.get(e);if(t)return f.delete(e),t}class b{invoke(e){return this._callback(e)}setCallback(t){this._selfJSObjectReference||(this._selfJSObjectReference=e.createJSObjectReference(this)),this._callback=t}getJSObjectReference(){return this._selfJSObjectReference}dispose(){this._selfJSObjectReference&&e.disposeJSObjectReference(this._selfJSObjectReference)}}class _{constructor(e,t){this._jsEventCallbackWrappers=new Map,this._componentId=e;for(const e of t)"eventcallback"===e.type&&this._jsEventCallbackWrappers.set(e.name.toLowerCase(),new b)}setParameters(e){const t={},n=Object.entries(e||{}),o=n.length;for(const[e,o]of n){const n=this._jsEventCallbackWrappers.get(e.toLowerCase());n&&o?(n.setCallback(o),t[e]=n.getJSObjectReference()):t[e]=o}return S().invokeMethodAsync("SetRootComponentParameters",this._componentId,o,t)}async dispose(){if(null!==this._componentId){await S().invokeMethodAsync("RemoveRootComponent",this._componentId),this._componentId=null;for(const e of this._jsEventCallbackWrappers.values())e.dispose()}}}function S(){if(!g)throw new Error("Dynamic root components have not been enabled in this application.");return g}const C=new Map,E=[],I=new Map;function k(t,n,o,r){var i,s;if(C.has(t))throw new Error(`Interop methods are already registered for renderer ${t}`);C.set(t,n),o&&r&&Object.keys(o).length>0&&function(t,n,o){if(g)throw new Error("Dynamic root components have already been enabled.");g=t,m=n;for(const[t,r]of Object.entries(o)){const o=e.findJSFunction(t,0);for(const e of r)o(e,n[e])}}(A(t),o,r),null===(s=null===(i=I.get(t))||void 0===i?void 0:i[0])||void 0===s||s.call(i),function(e){for(const t of E)t(e)}(t)}function T(e){return C.has(e)}function R(e,t,n){return D(e,t.eventHandlerId,(()=>A(e).invokeMethodAsync("DispatchEventAsync",t,n)))}function A(e){const t=C.get(e);if(!t)throw new Error(`No interop methods are registered for renderer ${e}`);return t}let D=(e,t,n)=>n();const x=B(["abort","blur","cancel","canplay","canplaythrough","change","close","cuechange","durationchange","emptied","ended","error","focus","load","loadeddata","loadedmetadata","loadend","loadstart","mouseenter","mouseleave","pointerenter","pointerleave","pause","play","playing","progress","ratechange","reset","scroll","seeked","seeking","stalled","submit","suspend","timeupdate","toggle","unload","volumechange","waiting","DOMNodeInsertedIntoDocument","DOMNodeRemovedFromDocument"]),N={submit:!0},M=B(["click","dblclick","mousedown","mousemove","mouseup"]);class P{constructor(e){this.browserRendererId=e,this.afterClickCallbacks=[];const t=++P.nextEventDelegatorId;this.eventsCollectionKey=`_blazorEvents_${t}`,this.eventInfoStore=new U(this.onGlobalEvent.bind(this))}setListener(e,t,n,o){const r=this.getEventHandlerInfosForElement(e,!0),i=r.getHandler(t);if(i)this.eventInfoStore.update(i.eventHandlerId,n);else{const i={element:e,eventName:t,eventHandlerId:n,renderingComponentId:o};this.eventInfoStore.add(i),r.setHandler(t,i)}}getHandler(e){return this.eventInfoStore.get(e)}removeListener(e){const t=this.eventInfoStore.remove(e);if(t){const e=t.element,n=this.getEventHandlerInfosForElement(e,!1);n&&n.removeHandler(t.eventName)}}notifyAfterClick(e){this.afterClickCallbacks.push(e),this.eventInfoStore.addGlobalListener("click")}setStopPropagation(e,t,n){this.getEventHandlerInfosForElement(e,!0).stopPropagation(t,n)}setPreventDefault(e,t,n){this.getEventHandlerInfosForElement(e,!0).preventDefault(t,n)}onGlobalEvent(e){if(!(e.target instanceof Element))return;this.dispatchGlobalEventToAllElements(e.type,e);const t=(n=e.type,s.get(n));var n;t&&t.forEach((t=>this.dispatchGlobalEventToAllElements(t,e))),"click"===e.type&&this.afterClickCallbacks.forEach((t=>t(e)))}dispatchGlobalEventToAllElements(e,t){const n=t.composedPath();let o=n.shift(),i=null,s=!1;const a=Object.prototype.hasOwnProperty.call(x,e);let l=!1;for(;o;){const u=o,p=this.getEventHandlerInfosForElement(u,!1);if(p){const n=p.getHandler(e);if(n&&(h=u,d=t.type,!((h instanceof HTMLButtonElement||h instanceof HTMLInputElement||h instanceof HTMLTextAreaElement||h instanceof HTMLSelectElement)&&Object.prototype.hasOwnProperty.call(M,d)&&h.disabled))){if(!s){const n=c(e);i=(null==n?void 0:n.createEventArgs)?n.createEventArgs(t):{},s=!0}Object.prototype.hasOwnProperty.call(N,t.type)&&t.preventDefault(),R(this.browserRendererId,{eventHandlerId:n.eventHandlerId,eventName:e,eventFieldInfo:r.fromEvent(n.renderingComponentId,t)},i)}p.stopPropagation(e)&&(l=!0),p.preventDefault(e)&&t.preventDefault()}o=a||l?void 0:n.shift()}var h,d}getEventHandlerInfosForElement(e,t){return Object.prototype.hasOwnProperty.call(e,this.eventsCollectionKey)?e[this.eventsCollectionKey]:t?e[this.eventsCollectionKey]=new L:null}}P.nextEventDelegatorId=0;class U{constructor(e){this.globalListener=e,this.infosByEventHandlerId={},this.countByEventName={},a.push(this.handleEventNameAliasAdded.bind(this))}add(e){if(this.infosByEventHandlerId[e.eventHandlerId])throw new Error(`Event ${e.eventHandlerId} is already tracked`);this.infosByEventHandlerId[e.eventHandlerId]=e,this.addGlobalListener(e.eventName)}get(e){return this.infosByEventHandlerId[e]}addGlobalListener(e){if(e=l(e),Object.prototype.hasOwnProperty.call(this.countByEventName,e))this.countByEventName[e]++;else{this.countByEventName[e]=1;const t=Object.prototype.hasOwnProperty.call(x,e);document.addEventListener(e,this.globalListener,t)}}update(e,t){if(Object.prototype.hasOwnProperty.call(this.infosByEventHandlerId,t))throw new Error(`Event ${t} is already tracked`);const n=this.infosByEventHandlerId[e];delete this.infosByEventHandlerId[e],n.eventHandlerId=t,this.infosByEventHandlerId[t]=n}remove(e){const t=this.infosByEventHandlerId[e];if(t){delete this.infosByEventHandlerId[e];const n=l(t.eventName);0==--this.countByEventName[n]&&(delete this.countByEventName[n],document.removeEventListener(n,this.globalListener))}return t}handleEventNameAliasAdded(e,t){if(Object.prototype.hasOwnProperty.call(this.countByEventName,e)){const n=this.countByEventName[e];delete this.countByEventName[e],document.removeEventListener(e,this.globalListener),this.addGlobalListener(t),this.countByEventName[t]+=n-1}}}class L{constructor(){this.handlers={},this.preventDefaultFlags=null,this.stopPropagationFlags=null}getHandler(e){return Object.prototype.hasOwnProperty.call(this.handlers,e)?this.handlers[e]:null}setHandler(e,t){this.handlers[e]=t}removeHandler(e){delete this.handlers[e]}preventDefault(e,t){return void 0!==t&&(this.preventDefaultFlags=this.preventDefaultFlags||{},this.preventDefaultFlags[e]=t),!!this.preventDefaultFlags&&this.preventDefaultFlags[e]}stopPropagation(e,t){return void 0!==t&&(this.stopPropagationFlags=this.stopPropagationFlags||{},this.stopPropagationFlags[e]=t),!!this.stopPropagationFlags&&this.stopPropagationFlags[e]}}function B(e){const t={};return e.forEach((e=>{t[e]=!0})),t}const O=Symbol(),F=Symbol(),$=Symbol();function H(e){const{start:t,end:n}=e,o=t[$];if(o){if(o!==e)throw new Error("The start component comment was already associated with another component descriptor.");return t}const r=t.parentNode;if(!r)throw new Error(`Comment not connected to the DOM ${t.textContent}`);const i=W(r,!0),s=Y(i);t[F]=i,t[$]=e;const a=W(t);if(n){const e=Y(a),o=Array.prototype.indexOf.call(s,a)+1;let r=null;for(;r!==n;){const n=s.splice(o,1)[0];if(!n)throw new Error("Could not find the end component comment in the parent logical node list");n[F]=t,e.push(n),r=n}}return a}function W(e,t){if(O in e)return e;const n=[];if(e.childNodes.length>0){if(!t)throw new Error("New logical elements must start empty, or allowExistingContents must be true");e.childNodes.forEach((t=>{const o=W(t,!0);o[F]=e,n.push(o)}))}return e[O]=n,e}function j(e){const t=Y(e);for(;t.length;)J(e,0)}function z(e,t){const n=document.createComment("!");return q(n,e,t),n}function q(e,t,n){const o=e;let r=e;if(e instanceof Comment){const t=Y(o);if((null==t?void 0:t.length)>0){const t=oe(o),n=new Range;n.setStartBefore(e),n.setEndAfter(t),r=n.extractContents()}}const i=K(o);if(i){const e=Y(i),t=Array.prototype.indexOf.call(e,o);e.splice(t,1),delete o[F]}const s=Y(t);if(n<s.length){const e=s[n];e.parentNode.insertBefore(r,e),s.splice(n,0,o)}else ne(r,t),s.push(o);o[F]=t,O in o||(o[O]=[])}function J(e,t){const n=Y(e).splice(t,1)[0];if(n instanceof Comment){const e=Y(n);if(e)for(;e.length>0;)J(n,0)}const o=n;o.parentNode.removeChild(o)}function K(e){return e[F]||null}function V(e,t){return Y(e)[t]}function X(e){return e[$]||null}function G(e){const t=te(e);return"http://www.w3.org/2000/svg"===t.namespaceURI&&"foreignObject"!==t.tagName}function Y(e){return e[O]}function Q(e){const t=Y(K(e));return t[Array.prototype.indexOf.call(t,e)+1]||null}function Z(e){return O in e}function ee(e,t){const n=Y(e);t.forEach((e=>{e.moveRangeStart=n[e.fromSiblingIndex],e.moveRangeEnd=oe(e.moveRangeStart)})),t.forEach((t=>{const o=document.createComment("marker");t.moveToBeforeMarker=o;const r=n[t.toSiblingIndex+1];r?r.parentNode.insertBefore(o,r):ne(o,e)})),t.forEach((e=>{const t=e.moveToBeforeMarker,n=t.parentNode,o=e.moveRangeStart,r=e.moveRangeEnd;let i=o;for(;i;){const e=i.nextSibling;if(n.insertBefore(i,t),i===r)break;i=e}n.removeChild(t)})),t.forEach((e=>{n[e.toSiblingIndex]=e.moveRangeStart}))}function te(e){if(e instanceof Element||e instanceof DocumentFragment)return e;if(e instanceof Comment)return e.parentNode;throw new Error("Not a valid logical element")}function ne(e,t){if(t instanceof Element||t instanceof DocumentFragment)t.appendChild(e);else{if(!(t instanceof Comment))throw new Error(`Cannot append node because the parent is not a valid logical element. Parent: ${t}`);{const n=Q(t);n?n.parentNode.insertBefore(e,n):ne(e,K(t))}}}function oe(e){if(e instanceof Element||e instanceof DocumentFragment)return e;const t=Q(e);if(t)return t.previousSibling;{const t=K(e);return t instanceof Element||t instanceof DocumentFragment?t.lastChild:oe(t)}}function re(e){return`_bl_${e}`}const ie="__internalId";e.attachReviver(((e,t)=>t&&"object"==typeof t&&Object.prototype.hasOwnProperty.call(t,ie)&&"string"==typeof t[ie]?function(e){const t=`[${re(e)}]`;return document.querySelector(t)}(t[ie]):t));const se="_blazorDeferredValue";function ae(e){e instanceof HTMLOptionElement?de(e):se in e&&he(e,e[se])}function ce(e){return"select-multiple"===e.type}function le(e,t){e.value=t||""}function he(e,t){e instanceof HTMLSelectElement?ce(e)?function(e,t){t||(t=[]);for(let n=0;n<e.options.length;n++)e.options[n].selected=-1!==t.indexOf(e.options[n].value)}(e,t):le(e,t):e.value=t}function de(e){const t=function(e){for(;e;){if(e instanceof HTMLSelectElement)return e;e=e.parentElement}return null}(e);if(!function(e){return!!e&&se in e}(t))return!1;if(ce(t))e.selected=-1!==t._blazorDeferredValue.indexOf(e.value);else{if(t._blazorDeferredValue!==e.value)return!1;le(t,e.value),delete t._blazorDeferredValue}return!0}const ue=document.createElement("template"),pe=document.createElementNS("http://www.w3.org/2000/svg","g"),fe=new Set,ge=Symbol(),me=Symbol();class ve{constructor(e){this.rootComponentIds=new Set,this.childComponentLocations={},this.eventDelegator=new P(e),this.eventDelegator.notifyAfterClick((e=>{$e()&&Ne(e,(e=>{Ge(e,!0,!1)}))}))}getRootComponentCount(){return this.rootComponentIds.size}attachRootComponentToLogicalElement(e,t,n){if(we(t))throw new Error(`Root component '${e}' could not be attached because its target element is already associated with a root component`);n&&(t=z(t,Y(t).length)),ye(t,!0),this.attachComponentToElement(e,t),this.rootComponentIds.add(e),fe.add(t)}updateComponent(e,t,n,o){var r;const i=this.childComponentLocations[t];if(!i)throw new Error(`No element is currently associated with component ${t}`);fe.delete(i)&&(j(i),i instanceof Comment&&(i.textContent="!"));const s=null===(r=te(i))||void 0===r?void 0:r.getRootNode(),a=s&&s.activeElement;this.applyEdits(e,t,i,0,n,o),a instanceof HTMLElement&&s&&s.activeElement!==a&&a.focus()}disposeComponent(e){if(this.rootComponentIds.delete(e)){const t=this.childComponentLocations[e];ye(t,!1),!0===t[me]?fe.add(t):j(t)}delete this.childComponentLocations[e]}disposeEventHandler(e){this.eventDelegator.removeListener(e)}attachComponentToElement(e,t){this.childComponentLocations[e]=t}applyEdits(e,n,o,r,i,s){let a,c=0,l=r;const h=e.arrayBuilderSegmentReader,d=e.editReader,u=e.frameReader,p=h.values(i),f=h.offset(i),g=f+h.count(i);for(let i=f;i<g;i++){const h=e.diffReader.editsEntry(p,i),f=d.editType(h);switch(f){case t.prependFrame:{const t=d.newTreeIndex(h),r=e.referenceFramesEntry(s,t),i=d.siblingIndex(h);this.insertFrame(e,n,o,l+i,s,r,t);break}case t.removeFrame:J(o,l+d.siblingIndex(h));break;case t.setAttribute:{const t=d.newTreeIndex(h),r=e.referenceFramesEntry(s,t),i=V(o,l+d.siblingIndex(h));if(!(i instanceof Element))throw new Error("Cannot set attribute on non-element child");this.applyAttribute(e,n,i,r);break}case t.removeAttribute:{const e=V(o,l+d.siblingIndex(h));if(!(e instanceof Element))throw new Error("Cannot remove attribute from non-element child");{const t=d.removedAttributeName(h);this.setOrRemoveAttributeOrProperty(e,t,null)}break}case t.updateText:{const t=d.newTreeIndex(h),n=e.referenceFramesEntry(s,t),r=V(o,l+d.siblingIndex(h));if(!(r instanceof Text))throw new Error("Cannot set text content on non-text child");r.textContent=u.textContent(n);break}case t.updateMarkup:{const t=d.newTreeIndex(h),n=e.referenceFramesEntry(s,t),r=d.siblingIndex(h);J(o,l+r),this.insertMarkup(e,o,l+r,n);break}case t.stepIn:o=V(o,l+d.siblingIndex(h)),c++,l=0;break;case t.stepOut:o=K(o),c--,l=0===c?r:0;break;case t.permutationListEntry:a=a||[],a.push({fromSiblingIndex:l+d.siblingIndex(h),toSiblingIndex:l+d.moveToSiblingIndex(h)});break;case t.permutationListEnd:ee(o,a),a=void 0;break;default:throw new Error(`Unknown edit type: ${f}`)}}}insertFrame(e,t,n,r,i,s,a){const c=e.frameReader,l=c.frameType(s);switch(l){case o.element:return this.insertElement(e,t,n,r,i,s,a),1;case o.text:return this.insertText(e,n,r,s),1;case o.attribute:throw new Error("Attribute frames should only be present as leading children of element frames.");case o.component:return this.insertComponent(e,n,r,s),1;case o.region:return this.insertFrameRange(e,t,n,r,i,a+1,a+c.subtreeLength(s));case o.elementReferenceCapture:if(n instanceof Element)return h=n,d=c.elementReferenceCaptureId(s),h.setAttribute(re(d),""),0;throw new Error("Reference capture frames can only be children of element frames.");case o.markup:return this.insertMarkup(e,n,r,s),1;case o.namedEvent:return 0;default:throw new Error(`Unknown frame type: ${l}`)}var h,d}insertElement(e,t,n,r,i,s,a){const c=e.frameReader,l=c.elementName(s),h="svg"===l||G(n)?document.createElementNS("http://www.w3.org/2000/svg",l):document.createElement(l),d=W(h);let u=!1;const p=a+c.subtreeLength(s);for(let s=a+1;s<p;s++){const a=e.referenceFramesEntry(i,s);if(c.frameType(a)!==o.attribute){q(h,n,r),u=!0,this.insertFrameRange(e,t,d,0,i,s,p);break}this.applyAttribute(e,t,h,a)}u||q(h,n,r),ae(h)}insertComponent(e,t,n,o){const r=z(t,n),i=e.frameReader.componentId(o);this.attachComponentToElement(i,r)}insertText(e,t,n,o){const r=e.frameReader.textContent(o);q(document.createTextNode(r),t,n)}insertMarkup(e,t,n,o){const r=z(t,n),i=(s=e.frameReader.markupContent(o),G(t)?(pe.innerHTML=s||" ",pe):(ue.innerHTML=s||" ",ue.content.querySelectorAll("script").forEach((e=>{const t=document.createElement("script");t.textContent=e.textContent,e.getAttributeNames().forEach((n=>{t.setAttribute(n,e.getAttribute(n))})),e.parentNode.replaceChild(t,e)})),ue.content));var s;let a=0;for(;i.firstChild;)q(i.firstChild,r,a++)}applyAttribute(e,t,n,o){const r=e.frameReader,i=r.attributeName(o),s=r.attributeEventHandlerId(o);if(s){const e=Se(i);return void this.eventDelegator.setListener(n,e,s,t)}const a=r.attributeValue(o);this.setOrRemoveAttributeOrProperty(n,i,a)}insertFrameRange(e,t,n,o,r,i,s){const a=o;for(let a=i;a<s;a++){const i=e.referenceFramesEntry(r,a);o+=this.insertFrame(e,t,n,o,r,i,a),a+=_e(e,i)}return o-a}setOrRemoveAttributeOrProperty(e,t,n){(function(e,t,n){switch(t){case"value":return function(e,t){switch(t&&"INPUT"===e.tagName&&(t=function(e,t){switch(t.getAttribute("type")){case"time":return 8!==e.length||!e.endsWith("00")&&t.hasAttribute("step")?e:e.substring(0,5);case"datetime-local":return 19!==e.length||!e.endsWith("00")&&t.hasAttribute("step")?e:e.substring(0,16);default:return e}}(t,e)),e.tagName){case"INPUT":case"SELECT":case"TEXTAREA":return t&&e instanceof HTMLSelectElement&&ce(e)&&(t=JSON.parse(t)),he(e,t),e[se]=t,!0;case"OPTION":return t||""===t?e.setAttribute("value",t):e.removeAttribute("value"),de(e),!0;default:return!1}}(e,n);case"checked":return function(e,t){return"INPUT"===e.tagName&&(e.checked=null!==t,!0)}(e,n);default:return!1}})(e,t,n)||(t.startsWith("__internal_")?this.applyInternalAttribute(e,t.substring(11),n):null!==n?e.setAttribute(t,n):e.removeAttribute(t))}applyInternalAttribute(e,t,n){if(t.startsWith("stopPropagation_")){const o=Se(t.substring(16));this.eventDelegator.setStopPropagation(e,o,null!==n)}else{if(!t.startsWith("preventDefault_"))throw new Error(`Unsupported internal attribute '${t}'`);{const o=Se(t.substring(15));this.eventDelegator.setPreventDefault(e,o,null!==n)}}}}function ye(e,t){e[ge]=t}function we(e){return e[ge]}function be(e,t){e[me]=t}function _e(e,t){const n=e.frameReader;switch(n.frameType(t)){case o.component:case o.element:case o.region:return n.subtreeLength(t)-1;default:return 0}}function Se(e){if(e.startsWith("on"))return e.substring(2);throw new Error(`Attribute should be an event name, but doesn't start with 'on'. Value: '${e}'`)}const Ce={};let Ee,Ie,ke,Te,Re=!1;function Ae(e,t,n,o){let r=Ce[e];r||(r=new ve(e),Ce[e]=r),r.attachRootComponentToLogicalElement(n,t,o)}function De(e){return Ce[e]}function xe(e,t){const n=Ce[e];if(!n)throw new Error(`There is no browser renderer with ID ${e}.`);const o=t.arrayRangeReader,r=t.updatedComponents(),i=o.values(r),s=o.count(r),a=t.referenceFrames(),c=o.values(a),l=t.diffReader;for(let e=0;e<s;e++){const o=t.updatedComponentsEntry(i,e),r=l.componentId(o),s=l.edits(o);n.updateComponent(t,r,s,c)}const h=t.disposedComponentIds(),d=o.values(h),u=o.count(h);for(let e=0;e<u;e++){const o=t.disposedComponentIdsEntry(d,e);n.disposeComponent(o)}const p=t.disposedEventHandlerIds(),f=o.values(p),g=o.count(p);for(let e=0;e<g;e++){const o=t.disposedEventHandlerIdsEntry(f,e);n.disposeEventHandler(o)}Re&&(Re=!1,window.scrollTo&&window.scrollTo(0,0))}function Ne(e,t){if(0!==e.button||function(e){return e.ctrlKey||e.shiftKey||e.altKey||e.metaKey}(e))return;if(e.defaultPrevented)return;const n=function(e){const t=e.composedPath&&e.composedPath();if(t)for(let e=0;e<t.length;e++){const n=t[e];if(n instanceof HTMLAnchorElement||n instanceof SVGAElement)return n}return null}(e);if(n&&function(e){const t=e.getAttribute("target");return(!t||"_self"===t)&&e.hasAttribute("href")&&!e.hasAttribute("download")}(n)){const o=Fe(n.getAttribute("href"));Me(o)&&(e.preventDefault(),t(o))}}function Me(e){const t=(n=document.baseURI).substring(0,n.lastIndexOf("/"));var n;const o=e.charAt(t.length);return e.startsWith(t)&&(""===o||"/"===o||"?"===o||"#"===o)}function Pe(e){const t=new URL(e);return""!==t.hash&&location.origin===t.origin&&location.pathname===t.pathname&&location.search===t.search}function Ue(e){const t=e.indexOf("#");t!==e.length-1&&Le(e.substring(t+1))}function Le(e){var t;null===(t=document.getElementById(e))||void 0===t||t.scrollIntoView()}function Be(){return void 0!==Ie}function Oe(e,t){if(!Ie)throw new Error("No enhanced programmatic navigation handler has been attached");Ie(e,t)}function Fe(e){return Te=Te||document.createElement("a"),Te.href=e,Te.href}function $e(){return void 0!==Ee}function He(){return Ee}let We=!1,je=0,ze=0;const qe=new Map;let Je=async function(e){var t,n,o;Ze();const r=ot();if(null==r?void 0:r.hasLocationChangingEventListeners){const i=null!==(n=null===(t=e.state)||void 0===t?void 0:t._index)&&void 0!==n?n:0,s=null===(o=e.state)||void 0===o?void 0:o.userState,a=i-je,c=location.href;if(await Qe(-a),!await et(c,s,!1,r))return;await Qe(a)}await tt(!1)},Ke=null;const Ve={listenForNavigationEvents:function(e,t,n){var o,r;qe.set(e,{rendererId:e,hasLocationChangingEventListeners:!1,locationChanged:t,locationChanging:n}),We||(We=!0,window.addEventListener("popstate",nt),je=null!==(r=null===(o=history.state)||void 0===o?void 0:o._index)&&void 0!==r?r:0,ke=(e,t)=>{tt(t,e)})},enableNavigationInterception:function(e){if(void 0!==Ee&&Ee!==e)throw new Error("Only one interactive runtime may enable navigation interception at a time.");Ee=e},setHasLocationChangingListeners:function(e,t){const n=qe.get(e);if(!n)throw new Error(`Renderer with ID '${e}' is not listening for navigation events`);n.hasLocationChangingEventListeners=t},endLocationChanging:function(e,t){Ke&&e===ze&&(Ke(t),Ke=null)},navigateTo:function(e,t){Xe(e,t,!0)},refresh:function(e){!e&&Be()?Oe(location.href,!0):location.reload()},getBaseURI:()=>document.baseURI,getLocationHref:()=>location.href,scrollToElement:Le};function Xe(e,t,n=!1){const o=Fe(e),r=rt();if(t.forceLoad||!Me(o)||"serverside-fullpageload"===r)!function(e,t){if(location.href===e){const t=e+"?";history.replaceState(null,"",t),location.replace(e)}else t?location.replace(e):location.href=e}(e,t.replaceHistoryEntry);else if("clientside-router"===r)Ge(o,!1,t.replaceHistoryEntry,t.historyEntryState,n);else{if("serverside-enhanced"!==r)throw new Error(`Unsupported page load mechanism: ${r}`);Oe(o,t.replaceHistoryEntry)}}async function Ge(e,t,n,o=void 0,r=!1){if(Ze(),Pe(e))return Ye(e,n,o),void Ue(e);const i=ot();(r||!(null==i?void 0:i.hasLocationChangingEventListeners)||await et(e,o,t,i))&&(Re=!0,Ye(e,n,o),await tt(t))}function Ye(e,t,n=void 0){t?history.replaceState({userState:n,_index:je},"",e):(je++,history.pushState({userState:n,_index:je},"",e))}function Qe(e){return new Promise((t=>{const n=Je;Je=()=>{Je=n,t()},history.go(e)}))}function Ze(){Ke&&(Ke(!1),Ke=null)}function et(e,t,n,o){return new Promise((r=>{Ze(),ze++,Ke=r,o.locationChanging(ze,e,t,n)}))}async function tt(e,t){const n=null!=t?t:location.href;await Promise.all(Array.from(qe,(async([t,o])=>{var r;T(t)&&await o.locationChanged(n,null===(r=history.state)||void 0===r?void 0:r.userState,e)})))}async function nt(e){var t,n;Je&&"serverside-enhanced"!==rt()&&await Je(e),je=null!==(n=null===(t=history.state)||void 0===t?void 0:t._index)&&void 0!==n?n:0}function ot(){const e=He();if(void 0!==e)return qe.get(e)}function rt(){return $e()?"clientside-router":Be()?"serverside-enhanced":window.Blazor._internal.isBlazorWeb?"serverside-fullpageload":"clientside-router"}const it={focus:function(e,t){if(e instanceof HTMLElement)e.focus({preventScroll:t});else{if(!(e instanceof SVGElement))throw new Error("Unable to focus an invalid element.");if(!e.hasAttribute("tabindex"))throw new Error("Unable to focus an SVG element that does not have a tabindex.");e.focus({preventScroll:t})}},focusBySelector:function(e,t){const n=document.querySelector(e);n&&(n.hasAttribute("tabindex")||(n.tabIndex=-1),n.focus({preventScroll:!0}))}},st={init:function(e,t,n,o=50){const r=ct(t);(r||document.documentElement).style.overflowAnchor="none";const i=document.createRange();u(n.parentElement)&&(t.style.display="table-row",n.style.display="table-row");const s=new IntersectionObserver((function(o){o.forEach((o=>{var r;if(!o.isIntersecting)return;i.setStartAfter(t),i.setEndBefore(n);const s=i.getBoundingClientRect().height,a=null===(r=o.rootBounds)||void 0===r?void 0:r.height;o.target===t?e.invokeMethodAsync("OnSpacerBeforeVisible",o.intersectionRect.top-o.boundingClientRect.top,s,a):o.target===n&&n.offsetHeight>0&&e.invokeMethodAsync("OnSpacerAfterVisible",o.boundingClientRect.bottom-o.intersectionRect.bottom,s,a)}))}),{root:r,rootMargin:`${o}px`});s.observe(t),s.observe(n);const a=d(t),c=d(n),{observersByDotNetObjectId:l,id:h}=lt(e);function d(e){const t={attributes:!0},n=new MutationObserver(((n,o)=>{u(e.parentElement)&&(o.disconnect(),e.style.display="table-row",o.observe(e,t)),s.unobserve(e),s.observe(e)}));return n.observe(e,t),n}function u(e){return null!==e&&(e instanceof HTMLTableElement&&""===e.style.display||"table"===e.style.display||e instanceof HTMLTableSectionElement&&""===e.style.display||"table-row-group"===e.style.display)}l[h]={intersectionObserver:s,mutationObserverBefore:a,mutationObserverAfter:c}},dispose:function(e){const{observersByDotNetObjectId:t,id:n}=lt(e),o=t[n];o&&(o.intersectionObserver.disconnect(),o.mutationObserverBefore.disconnect(),o.mutationObserverAfter.disconnect(),e.dispose(),delete t[n])}},at=Symbol();function ct(e){return e&&e!==document.body&&e!==document.documentElement?"visible"!==getComputedStyle(e).overflowY?e:ct(e.parentElement):null}function lt(e){var t;const n=e._callDispatcher,o=e._id;return null!==(t=n[at])&&void 0!==t||(n[at]={}),{observersByDotNetObjectId:n[at],id:o}}const ht={getAndRemoveExistingTitle:function(){var e;const t=document.head?document.head.getElementsByTagName("title"):[];if(0===t.length)return null;let n=null;for(let o=t.length-1;o>=0;o--){const r=t[o],i=r.previousSibling;i instanceof Comment&&null!==K(i)||(null===n&&(n=r.textContent),null===(e=r.parentNode)||void 0===e||e.removeChild(r))}return n}},dt={init:function(e,t){t._blazorInputFileNextFileId=0,t.addEventListener("click",(function(){t.value=""})),t.addEventListener("change",(function(){t._blazorFilesById={};const n=Array.prototype.map.call(t.files,(function(e){const n={id:++t._blazorInputFileNextFileId,lastModified:new Date(e.lastModified).toISOString(),name:e.name,size:e.size,contentType:e.type,readPromise:void 0,arrayBuffer:void 0,blob:e};return t._blazorFilesById[n.id]=n,n}));e.invokeMethodAsync("NotifyChange",n)}))},toImageFile:async function(e,t,n,o,r){const i=ut(e,t),s=await new Promise((function(e){const t=new Image;t.onload=function(){URL.revokeObjectURL(t.src),e(t)},t.onerror=function(){t.onerror=null,URL.revokeObjectURL(t.src)},t.src=URL.createObjectURL(i.blob)})),a=await new Promise((function(e){var t;const i=Math.min(1,o/s.width),a=Math.min(1,r/s.height),c=Math.min(i,a),l=document.createElement("canvas");l.width=Math.round(s.width*c),l.height=Math.round(s.height*c),null===(t=l.getContext("2d"))||void 0===t||t.drawImage(s,0,0,l.width,l.height),l.toBlob(e,n)})),c={id:++e._blazorInputFileNextFileId,lastModified:i.lastModified,name:i.name,size:(null==a?void 0:a.size)||0,contentType:n,blob:a||i.blob};return e._blazorFilesById[c.id]=c,c},readFileData:async function(e,t){return ut(e,t).blob}};function ut(e,t){const n=e._blazorFilesById[t];if(!n)throw new Error(`There is no file with ID ${t}. The file list may have changed. See https://aka.ms/aspnet/blazor-input-file-multiple-selections.`);return n}const pt=new Set,ft={enableNavigationPrompt:function(e){0===pt.size&&window.addEventListener("beforeunload",gt),pt.add(e)},disableNavigationPrompt:function(e){pt.delete(e),0===pt.size&&window.removeEventListener("beforeunload",gt)}};function gt(e){e.preventDefault(),e.returnValue=!0}async function mt(e,t,n){return e instanceof Blob?await async function(e,t,n){const o=e.slice(t,t+n),r=await o.arrayBuffer();return new Uint8Array(r)}(e,t,n):function(e,t,n){return new Uint8Array(e.buffer,e.byteOffset+t,n)}(e,t,n)}const vt=new Map,yt={navigateTo:function(e,t,n=!1){Xe(e,t instanceof Object?t:{forceLoad:t,replaceHistoryEntry:n})},registerCustomEventType:function(e,t){if(!t)throw new Error("The options parameter is required.");if(i.has(e))throw new Error(`The event '${e}' is already registered.`);if(t.browserEventName){const n=s.get(t.browserEventName);n?n.push(e):s.set(t.browserEventName,[e]),a.forEach((n=>n(e,t.browserEventName)))}i.set(e,t)},rootComponents:y,runtime:{},_internal:{navigationManager:Ve,domWrapper:it,Virtualize:st,PageTitle:ht,InputFile:dt,NavigationLock:ft,getJSDataStreamChunk:mt,attachWebRendererInterop:k}};var wt;window.Blazor=yt,function(e){e[e.Trace=0]="Trace",e[e.Debug=1]="Debug",e[e.Information=2]="Information",e[e.Warning=3]="Warning",e[e.Error=4]="Error",e[e.Critical=5]="Critical",e[e.None=6]="None"}(wt||(wt={}));class bt{log(e,t){}}bt.instance=new bt;class _t{constructor(e){this.minLevel=e}log(e,t){if(e>=this.minLevel){const n=`[${(new Date).toISOString()}] ${wt[e]}: ${t}`;switch(e){case wt.Critical:case wt.Error:console.error(n);break;case wt.Warning:console.warn(n);break;case wt.Information:console.info(n);break;default:console.log(n)}}}}function St(e,t){switch(t){case"webassembly":return Rt(e,"webassembly");case"server":return function(e){return Rt(e,"server").sort(((e,t)=>e.sequence-t.sequence))}(e);case"auto":return Rt(e,"auto")}}const Ct=/^\s*Blazor-Server-Component-State:(?<state>[a-zA-Z0-9+/=]+)$/,Et=/^\s*Blazor-WebAssembly-Component-State:(?<state>[a-zA-Z0-9+/=]+)$/,It=/^\s*Blazor-Web-Initializers:(?<initializers>[a-zA-Z0-9+/=]+)$/;function kt(e){return Tt(e,Ct)}function Tt(e,t,n="state"){var o;if(e.nodeType===Node.COMMENT_NODE){const r=e.textContent||"",i=t.exec(r),s=i&&i.groups&&i.groups[n];return s&&(null===(o=e.parentNode)||void 0===o||o.removeChild(e)),s}if(!e.hasChildNodes())return;const r=e.childNodes;for(let e=0;e<r.length;e++){const o=Tt(r[e],t,n);if(o)return o}}function Rt(e,t){const n=[],o=new Ut(e.childNodes);for(;o.next()&&o.currentElement;){const e=Dt(o,t);if(e)n.push(e);else if(o.currentElement.hasChildNodes()){const e=Rt(o.currentElement,t);for(let t=0;t<e.length;t++){const o=e[t];n.push(o)}}}return n}const At=new RegExp(/^\s*Blazor:[^{]*(?<descriptor>.*)$/);function Dt(e,t){const n=e.currentElement;var o,r,i;if(n&&n.nodeType===Node.COMMENT_NODE&&n.textContent){const s=At.exec(n.textContent),a=s&&s.groups&&s.groups.descriptor;if(!a)return;!function(e){if(e.parentNode instanceof Document)throw new Error("Root components cannot be marked as interactive. The <html> element must be rendered statically so that scripts are not evaluated multiple times.")}(n);try{const s=function(e){const t=JSON.parse(e),{type:n}=t;if("server"!==n&&"webassembly"!==n&&"auto"!==n)throw new Error(`Invalid component type '${n}'.`);return t}(a),c=function(e,t,n){const{prerenderId:o}=e;if(o){for(;n.next()&&n.currentElement;){const e=n.currentElement;if(e.nodeType!==Node.COMMENT_NODE)continue;if(!e.textContent)continue;const t=At.exec(e.textContent),r=t&&t[1];if(r)return Pt(r,o),e}throw new Error(`Could not find an end component comment for '${t}'.`)}}(s,n,e);if(t!==s.type)return;switch(s.type){case"webassembly":return r=n,i=c,Mt(o=s),{...o,uniqueId:xt++,start:r,end:i};case"server":return function(e,t,n){return Nt(e),{...e,uniqueId:xt++,start:t,end:n}}(s,n,c);case"auto":return function(e,t,n){return Nt(e),Mt(e),{...e,uniqueId:xt++,start:t,end:n}}(s,n,c)}}catch(e){throw new Error(`Found malformed component comment at ${n.textContent}`)}}}let xt=0;function Nt(e){const{descriptor:t,sequence:n}=e;if(!t)throw new Error("descriptor must be defined when using a descriptor.");if(void 0===n)throw new Error("sequence must be defined when using a descriptor.");if(!Number.isInteger(n))throw new Error(`Error parsing the sequence '${n}' for component '${JSON.stringify(e)}'`)}function Mt(e){const{assembly:t,typeName:n}=e;if(!t)throw new Error("assembly must be defined when using a descriptor.");if(!n)throw new Error("typeName must be defined when using a descriptor.");e.parameterDefinitions=e.parameterDefinitions&&atob(e.parameterDefinitions),e.parameterValues=e.parameterValues&&atob(e.parameterValues)}function Pt(e,t){const n=JSON.parse(e);if(1!==Object.keys(n).length)throw new Error(`Invalid end of component comment: '${e}'`);const o=n.prerenderId;if(!o)throw new Error(`End of component comment must have a value for the prerendered property: '${e}'`);if(o!==t)throw new Error(`End of component comment prerendered property must match the start comment prerender id: '${t}', '${o}'`)}class Ut{constructor(e){this.childNodes=e,this.currentIndex=-1,this.length=e.length}next(){return this.currentIndex++,this.currentIndex<this.length?(this.currentElement=this.childNodes[this.currentIndex],!0):(this.currentElement=void 0,!1)}}function Lt(e){return{...e,start:void 0,end:void 0}}function Bt(e,t){return e.type===t.type&&(n=e.key,o=t.key,!(!n||!o)&&n.locationHash===o.locationHash&&n.formattedComponentKey===o.formattedComponentKey);var n,o}class Ot{static write(e){return`${e}${Ot.RecordSeparator}`}static parse(e){if(e[e.length-1]!==Ot.RecordSeparator)throw new Error("Message is incomplete.");const t=e.split(Ot.RecordSeparator);return t.pop(),t}}var Ft;Ot.RecordSeparatorCode=30,Ot.RecordSeparator=String.fromCharCode(Ot.RecordSeparatorCode),function(e){e[e.Trace=0]="Trace",e[e.Debug=1]="Debug",e[e.Information=2]="Information",e[e.Warning=3]="Warning",e[e.Error=4]="Error",e[e.Critical=5]="Critical",e[e.None=6]="None"}(Ft||(Ft={}));class $t{constructor(){}log(e,t){}}$t.instance=new $t;const Ht="0.0.0-DEV_BUILD";class Wt{static isRequired(e,t){if(null==e)throw new Error(`The '${t}' argument is required.`)}static isNotEmpty(e,t){if(!e||e.match(/^\s*$/))throw new Error(`The '${t}' argument should not be empty.`)}static isIn(e,t,n){if(!(e in t))throw new Error(`Unknown ${n} value: ${e}.`)}}class jt{static get isBrowser(){return!jt.isNode&&"object"==typeof window&&"object"==typeof window.document}static get isWebWorker(){return!jt.isNode&&"object"==typeof self&&"importScripts"in self}static get isReactNative(){return!jt.isNode&&"object"==typeof window&&void 0===window.document}static get isNode(){return"undefined"!=typeof process&&process.release&&"node"===process.release.name}}function zt(e,t){let n="";return qt(e)?(n=`Binary data of length ${e.byteLength}`,t&&(n+=`. Content: '${function(e){const t=new Uint8Array(e);let n="";return t.forEach((e=>{n+=`0x${e<16?"0":""}${e.toString(16)} `})),n.substr(0,n.length-1)}(e)}'`)):"string"==typeof e&&(n=`String data of length ${e.length}`,t&&(n+=`. Content: '${e}'`)),n}function qt(e){return e&&"undefined"!=typeof ArrayBuffer&&(e instanceof ArrayBuffer||e.constructor&&"ArrayBuffer"===e.constructor.name)}async function Jt(e,t,n,o,r,i){const s={},[a,c]=Xt();s[a]=c,e.log(Ft.Trace,`(${t} transport) sending data. ${zt(r,i.logMessageContent)}.`);const l=qt(r)?"arraybuffer":"text",h=await n.post(o,{content:r,headers:{...s,...i.headers},responseType:l,timeout:i.timeout,withCredentials:i.withCredentials});e.log(Ft.Trace,`(${t} transport) request complete. Response status: ${h.statusCode}.`)}class Kt{constructor(e,t){this._subject=e,this._observer=t}dispose(){const e=this._subject.observers.indexOf(this._observer);e>-1&&this._subject.observers.splice(e,1),0===this._subject.observers.length&&this._subject.cancelCallback&&this._subject.cancelCallback().catch((e=>{}))}}class Vt{constructor(e){this._minLevel=e,this.out=console}log(e,t){if(e>=this._minLevel){const n=`[${(new Date).toISOString()}] ${Ft[e]}: ${t}`;switch(e){case Ft.Critical:case Ft.Error:this.out.error(n);break;case Ft.Warning:this.out.warn(n);break;case Ft.Information:this.out.info(n);break;default:this.out.log(n)}}}}function Xt(){let e="X-SignalR-User-Agent";return jt.isNode&&(e="User-Agent"),[e,Gt(Ht,Yt(),jt.isNode?"NodeJS":"Browser",Qt())]}function Gt(e,t,n,o){let r="Microsoft SignalR/";const i=e.split(".");return r+=`${i[0]}.${i[1]}`,r+=` (${e}; `,r+=t&&""!==t?`${t}; `:"Unknown OS; ",r+=`${n}`,r+=o?`; ${o}`:"; Unknown Runtime Version",r+=")",r}function Yt(){if(!jt.isNode)return"";switch(process.platform){case"win32":return"Windows NT";case"darwin":return"macOS";case"linux":return"Linux";default:return process.platform}}function Qt(){if(jt.isNode)return process.versions.node}function Zt(e){return e.stack?e.stack:e.message?e.message:`${e}`}class en{writeHandshakeRequest(e){return Ot.write(JSON.stringify(e))}parseHandshakeResponse(e){let t,n;if(qt(e)){const o=new Uint8Array(e),r=o.indexOf(Ot.RecordSeparatorCode);if(-1===r)throw new Error("Message is incomplete.");const i=r+1;t=String.fromCharCode.apply(null,Array.prototype.slice.call(o.slice(0,i))),n=o.byteLength>i?o.slice(i).buffer:null}else{const o=e,r=o.indexOf(Ot.RecordSeparator);if(-1===r)throw new Error("Message is incomplete.");const i=r+1;t=o.substring(0,i),n=o.length>i?o.substring(i):null}const o=Ot.parse(t),r=JSON.parse(o[0]);if(r.type)throw new Error("Expected a handshake response from the server.");return[n,r]}}class tn extends Error{constructor(e,t){const n=new.target.prototype;super(`${e}: Status code '${t}'`),this.statusCode=t,this.__proto__=n}}class nn extends Error{constructor(e="A timeout occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class on extends Error{constructor(e="An abort occurred."){const t=new.target.prototype;super(e),this.__proto__=t}}class rn extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="UnsupportedTransportError",this.__proto__=n}}class sn extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="DisabledTransportError",this.__proto__=n}}class an extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.transport=t,this.errorType="FailedToStartTransportError",this.__proto__=n}}class cn extends Error{constructor(e){const t=new.target.prototype;super(e),this.errorType="FailedToNegotiateWithServerError",this.__proto__=t}}class ln extends Error{constructor(e,t){const n=new.target.prototype;super(e),this.innerErrors=t,this.__proto__=n}}var hn,dn;!function(e){e[e.Invocation=1]="Invocation",e[e.StreamItem=2]="StreamItem",e[e.Completion=3]="Completion",e[e.StreamInvocation=4]="StreamInvocation",e[e.CancelInvocation=5]="CancelInvocation",e[e.Ping=6]="Ping",e[e.Close=7]="Close",e[e.Ack=8]="Ack",e[e.Sequence=9]="Sequence"}(hn||(hn={}));class un{constructor(){this.observers=[]}next(e){for(const t of this.observers)t.next(e)}error(e){for(const t of this.observers)t.error&&t.error(e)}complete(){for(const e of this.observers)e.complete&&e.complete()}subscribe(e){return this.observers.push(e),new Kt(this,e)}}class pn{constructor(e,t,n){this._bufferSize=1e5,this._messages=[],this._totalMessageCount=0,this._waitForSequenceMessage=!1,this._nextReceivingSequenceId=1,this._latestReceivedSequenceId=0,this._bufferedByteCount=0,this._reconnectInProgress=!1,this._protocol=e,this._connection=t,this._bufferSize=n}async _send(e){const t=this._protocol.writeMessage(e);let n=Promise.resolve();if(this._isInvocationMessage(e)){this._totalMessageCount++;let e=()=>{},o=()=>{};qt(t)?this._bufferedByteCount+=t.byteLength:this._bufferedByteCount+=t.length,this._bufferedByteCount>=this._bufferSize&&(n=new Promise(((t,n)=>{e=t,o=n}))),this._messages.push(new fn(t,this._totalMessageCount,e,o))}try{this._reconnectInProgress||await this._connection.send(t)}catch{this._disconnected()}await n}_ack(e){let t=-1;for(let n=0;n<this._messages.length;n++){const o=this._messages[n];if(o._id<=e.sequenceId)t=n,qt(o._message)?this._bufferedByteCount-=o._message.byteLength:this._bufferedByteCount-=o._message.length,o._resolver();else{if(!(this._bufferedByteCount<this._bufferSize))break;o._resolver()}}-1!==t&&(this._messages=this._messages.slice(t+1))}_shouldProcessMessage(e){if(this._waitForSequenceMessage)return e.type===hn.Sequence&&(this._waitForSequenceMessage=!1,!0);if(!this._isInvocationMessage(e))return!0;const t=this._nextReceivingSequenceId;return this._nextReceivingSequenceId++,t<=this._latestReceivedSequenceId?(t===this._latestReceivedSequenceId&&this._ackTimer(),!1):(this._latestReceivedSequenceId=t,this._ackTimer(),!0)}_resetSequence(e){e.sequenceId>this._nextReceivingSequenceId?this._connection.stop(new Error("Sequence ID greater than amount of messages we've received.")):this._nextReceivingSequenceId=e.sequenceId}_disconnected(){this._reconnectInProgress=!0,this._waitForSequenceMessage=!0}async _resend(){const e=0!==this._messages.length?this._messages[0]._id:this._totalMessageCount+1;await this._connection.send(this._protocol.writeMessage({type:hn.Sequence,sequenceId:e}));const t=this._messages;for(const e of t)await this._connection.send(e._message);this._reconnectInProgress=!1}_dispose(e){null!=e||(e=new Error("Unable to reconnect to server."));for(const t of this._messages)t._rejector(e)}_isInvocationMessage(e){switch(e.type){case hn.Invocation:case hn.StreamItem:case hn.Completion:case hn.StreamInvocation:case hn.CancelInvocation:return!0;case hn.Close:case hn.Sequence:case hn.Ping:case hn.Ack:return!1}}_ackTimer(){void 0===this._ackTimerHandle&&(this._ackTimerHandle=setTimeout((async()=>{try{this._reconnectInProgress||await this._connection.send(this._protocol.writeMessage({type:hn.Ack,sequenceId:this._latestReceivedSequenceId}))}catch{}clearTimeout(this._ackTimerHandle),this._ackTimerHandle=void 0}),1e3))}}class fn{constructor(e,t,n,o){this._message=e,this._id=t,this._resolver=n,this._rejector=o}}!function(e){e.Disconnected="Disconnected",e.Connecting="Connecting",e.Connected="Connected",e.Disconnecting="Disconnecting",e.Reconnecting="Reconnecting"}(dn||(dn={}));class gn{static create(e,t,n,o,r,i,s){return new gn(e,t,n,o,r,i,s)}constructor(e,t,n,o,r,i,s){this._nextKeepAlive=0,this._freezeEventListener=()=>{this._logger.log(Ft.Warning,"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep")},Wt.isRequired(e,"connection"),Wt.isRequired(t,"logger"),Wt.isRequired(n,"protocol"),this.serverTimeoutInMilliseconds=null!=r?r:3e4,this.keepAliveIntervalInMilliseconds=null!=i?i:15e3,this._statefulReconnectBufferSize=null!=s?s:1e5,this._logger=t,this._protocol=n,this.connection=e,this._reconnectPolicy=o,this._handshakeProtocol=new en,this.connection.onreceive=e=>this._processIncomingData(e),this.connection.onclose=e=>this._connectionClosed(e),this._callbacks={},this._methods={},this._closedCallbacks=[],this._reconnectingCallbacks=[],this._reconnectedCallbacks=[],this._invocationId=0,this._receivedHandshakeResponse=!1,this._connectionState=dn.Disconnected,this._connectionStarted=!1,this._cachedPingMessage=this._protocol.writeMessage({type:hn.Ping})}get state(){return this._connectionState}get connectionId(){return this.connection&&this.connection.connectionId||null}get baseUrl(){return this.connection.baseUrl||""}set baseUrl(e){if(this._connectionState!==dn.Disconnected&&this._connectionState!==dn.Reconnecting)throw new Error("The HubConnection must be in the Disconnected or Reconnecting state to change the url.");if(!e)throw new Error("The HubConnection url must be a valid url.");this.connection.baseUrl=e}start(){return this._startPromise=this._startWithStateTransitions(),this._startPromise}async _startWithStateTransitions(){if(this._connectionState!==dn.Disconnected)return Promise.reject(new Error("Cannot start a HubConnection that is not in the 'Disconnected' state."));this._connectionState=dn.Connecting,this._logger.log(Ft.Debug,"Starting HubConnection.");try{await this._startInternal(),jt.isBrowser&&window.document.addEventListener("freeze",this._freezeEventListener),this._connectionState=dn.Connected,this._connectionStarted=!0,this._logger.log(Ft.Debug,"HubConnection connected successfully.")}catch(e){return this._connectionState=dn.Disconnected,this._logger.log(Ft.Debug,`HubConnection failed to start successfully because of error '${e}'.`),Promise.reject(e)}}async _startInternal(){this._stopDuringStartError=void 0,this._receivedHandshakeResponse=!1;const e=new Promise(((e,t)=>{this._handshakeResolver=e,this._handshakeRejecter=t}));await this.connection.start(this._protocol.transferFormat);try{let t=this._protocol.version;this.connection.features.reconnect||(t=1);const n={protocol:this._protocol.name,version:t};if(this._logger.log(Ft.Debug,"Sending handshake request."),await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(n)),this._logger.log(Ft.Information,`Using HubProtocol '${this._protocol.name}'.`),this._cleanupTimeout(),this._resetTimeoutPeriod(),this._resetKeepAliveInterval(),await e,this._stopDuringStartError)throw this._stopDuringStartError;!!this.connection.features.reconnect&&(this._messageBuffer=new pn(this._protocol,this.connection,this._statefulReconnectBufferSize),this.connection.features.disconnected=this._messageBuffer._disconnected.bind(this._messageBuffer),this.connection.features.resend=()=>{if(this._messageBuffer)return this._messageBuffer._resend()}),this.connection.features.inherentKeepAlive||await this._sendMessage(this._cachedPingMessage)}catch(e){throw this._logger.log(Ft.Debug,`Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`),this._cleanupTimeout(),this._cleanupPingTimer(),await this.connection.stop(e),e}}async stop(){const e=this._startPromise;this.connection.features.reconnect=!1,this._stopPromise=this._stopInternal(),await this._stopPromise;try{await e}catch(e){}}_stopInternal(e){if(this._connectionState===dn.Disconnected)return this._logger.log(Ft.Debug,`Call to HubConnection.stop(${e}) ignored because it is already in the disconnected state.`),Promise.resolve();if(this._connectionState===dn.Disconnecting)return this._logger.log(Ft.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise;const t=this._connectionState;return this._connectionState=dn.Disconnecting,this._logger.log(Ft.Debug,"Stopping HubConnection."),this._reconnectDelayHandle?(this._logger.log(Ft.Debug,"Connection stopped during reconnect delay. Done reconnecting."),clearTimeout(this._reconnectDelayHandle),this._reconnectDelayHandle=void 0,this._completeClose(),Promise.resolve()):(t===dn.Connected&&this._sendCloseMessage(),this._cleanupTimeout(),this._cleanupPingTimer(),this._stopDuringStartError=e||new on("The connection was stopped before the hub handshake could complete."),this.connection.stop(e))}async _sendCloseMessage(){try{await this._sendWithProtocol(this._createCloseMessage())}catch{}}stream(e,...t){const[n,o]=this._replaceStreamingParams(t),r=this._createStreamInvocation(e,t,o);let i;const s=new un;return s.cancelCallback=()=>{const e=this._createCancelInvocation(r.invocationId);return delete this._callbacks[r.invocationId],i.then((()=>this._sendWithProtocol(e)))},this._callbacks[r.invocationId]=(e,t)=>{t?s.error(t):e&&(e.type===hn.Completion?e.error?s.error(new Error(e.error)):s.complete():s.next(e.item))},i=this._sendWithProtocol(r).catch((e=>{s.error(e),delete this._callbacks[r.invocationId]})),this._launchStreams(n,i),s}_sendMessage(e){return this._resetKeepAliveInterval(),this.connection.send(e)}_sendWithProtocol(e){return this._messageBuffer?this._messageBuffer._send(e):this._sendMessage(this._protocol.writeMessage(e))}send(e,...t){const[n,o]=this._replaceStreamingParams(t),r=this._sendWithProtocol(this._createInvocation(e,t,!0,o));return this._launchStreams(n,r),r}invoke(e,...t){const[n,o]=this._replaceStreamingParams(t),r=this._createInvocation(e,t,!1,o);return new Promise(((e,t)=>{this._callbacks[r.invocationId]=(n,o)=>{o?t(o):n&&(n.type===hn.Completion?n.error?t(new Error(n.error)):e(n.result):t(new Error(`Unexpected message type: ${n.type}`)))};const o=this._sendWithProtocol(r).catch((e=>{t(e),delete this._callbacks[r.invocationId]}));this._launchStreams(n,o)}))}on(e,t){e&&t&&(e=e.toLowerCase(),this._methods[e]||(this._methods[e]=[]),-1===this._methods[e].indexOf(t)&&this._methods[e].push(t))}off(e,t){if(!e)return;e=e.toLowerCase();const n=this._methods[e];if(n)if(t){const o=n.indexOf(t);-1!==o&&(n.splice(o,1),0===n.length&&delete this._methods[e])}else delete this._methods[e]}onclose(e){e&&this._closedCallbacks.push(e)}onreconnecting(e){e&&this._reconnectingCallbacks.push(e)}onreconnected(e){e&&this._reconnectedCallbacks.push(e)}_processIncomingData(e){if(this._cleanupTimeout(),this._receivedHandshakeResponse||(e=this._processHandshakeResponse(e),this._receivedHandshakeResponse=!0),e){const t=this._protocol.parseMessages(e,this._logger);for(const e of t)if(!this._messageBuffer||this._messageBuffer._shouldProcessMessage(e))switch(e.type){case hn.Invocation:this._invokeClientMethod(e);break;case hn.StreamItem:case hn.Completion:{const t=this._callbacks[e.invocationId];if(t){e.type===hn.Completion&&delete this._callbacks[e.invocationId];try{t(e)}catch(e){this._logger.log(Ft.Error,`Stream callback threw error: ${Zt(e)}`)}}break}case hn.Ping:break;case hn.Close:{this._logger.log(Ft.Information,"Close message received from server.");const t=e.error?new Error("Server returned an error on close: "+e.error):void 0;!0===e.allowReconnect?this.connection.stop(t):this._stopPromise=this._stopInternal(t);break}case hn.Ack:this._messageBuffer&&this._messageBuffer._ack(e);break;case hn.Sequence:this._messageBuffer&&this._messageBuffer._resetSequence(e);break;default:this._logger.log(Ft.Warning,`Invalid message type: ${e.type}.`)}}this._resetTimeoutPeriod()}_processHandshakeResponse(e){let t,n;try{[n,t]=this._handshakeProtocol.parseHandshakeResponse(e)}catch(e){const t="Error parsing handshake response: "+e;this._logger.log(Ft.Error,t);const n=new Error(t);throw this._handshakeRejecter(n),n}if(t.error){const e="Server returned handshake error: "+t.error;this._logger.log(Ft.Error,e);const n=new Error(e);throw this._handshakeRejecter(n),n}return this._logger.log(Ft.Debug,"Server handshake complete."),this._handshakeResolver(),n}_resetKeepAliveInterval(){this.connection.features.inherentKeepAlive||(this._nextKeepAlive=(new Date).getTime()+this.keepAliveIntervalInMilliseconds,this._cleanupPingTimer())}_resetTimeoutPeriod(){if(!(this.connection.features&&this.connection.features.inherentKeepAlive||(this._timeoutHandle=setTimeout((()=>this.serverTimeout()),this.serverTimeoutInMilliseconds),void 0!==this._pingServerHandle))){let e=this._nextKeepAlive-(new Date).getTime();e<0&&(e=0),this._pingServerHandle=setTimeout((async()=>{if(this._connectionState===dn.Connected)try{await this._sendMessage(this._cachedPingMessage)}catch{this._cleanupPingTimer()}}),e)}}serverTimeout(){this.connection.stop(new Error("Server timeout elapsed without receiving a message from the server."))}async _invokeClientMethod(e){const t=e.target.toLowerCase(),n=this._methods[t];if(!n)return this._logger.log(Ft.Warning,`No client method with the name '${t}' found.`),void(e.invocationId&&(this._logger.log(Ft.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),await this._sendWithProtocol(this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null))));const o=n.slice(),r=!!e.invocationId;let i,s,a;for(const n of o)try{const o=i;i=await n.apply(this,e.arguments),r&&i&&o&&(this._logger.log(Ft.Error,`Multiple results provided for '${t}'. Sending error to server.`),a=this._createCompletionMessage(e.invocationId,"Client provided multiple results.",null)),s=void 0}catch(e){s=e,this._logger.log(Ft.Error,`A callback for the method '${t}' threw error '${e}'.`)}a?await this._sendWithProtocol(a):r?(s?a=this._createCompletionMessage(e.invocationId,`${s}`,null):void 0!==i?a=this._createCompletionMessage(e.invocationId,null,i):(this._logger.log(Ft.Warning,`No result given for '${t}' method and invocation ID '${e.invocationId}'.`),a=this._createCompletionMessage(e.invocationId,"Client didn't provide a result.",null)),await this._sendWithProtocol(a)):i&&this._logger.log(Ft.Error,`Result given for '${t}' method but server is not expecting a result.`)}_connectionClosed(e){this._logger.log(Ft.Debug,`HubConnection.connectionClosed(${e}) called while in state ${this._connectionState}.`),this._stopDuringStartError=this._stopDuringStartError||e||new on("The underlying connection was closed before the hub handshake could complete."),this._handshakeResolver&&this._handshakeResolver(),this._cancelCallbacksWithError(e||new Error("Invocation canceled due to the underlying connection being closed.")),this._cleanupTimeout(),this._cleanupPingTimer(),this._connectionState===dn.Disconnecting?this._completeClose(e):this._connectionState===dn.Connected&&this._reconnectPolicy?this._reconnect(e):this._connectionState===dn.Connected&&this._completeClose(e)}_completeClose(e){if(this._connectionStarted){this._connectionState=dn.Disconnected,this._connectionStarted=!1,this._messageBuffer&&(this._messageBuffer._dispose(null!=e?e:new Error("Connection closed.")),this._messageBuffer=void 0),jt.isBrowser&&window.document.removeEventListener("freeze",this._freezeEventListener);try{this._closedCallbacks.forEach((t=>t.apply(this,[e])))}catch(t){this._logger.log(Ft.Error,`An onclose callback called with error '${e}' threw error '${t}'.`)}}}async _reconnect(e){const t=Date.now();let n=0,o=void 0!==e?e:new Error("Attempting to reconnect due to a unknown error."),r=this._getNextRetryDelay(n++,0,o);if(null===r)return this._logger.log(Ft.Debug,"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt."),void this._completeClose(e);if(this._connectionState=dn.Reconnecting,e?this._logger.log(Ft.Information,`Connection reconnecting because of error '${e}'.`):this._logger.log(Ft.Information,"Connection reconnecting."),0!==this._reconnectingCallbacks.length){try{this._reconnectingCallbacks.forEach((t=>t.apply(this,[e])))}catch(t){this._logger.log(Ft.Error,`An onreconnecting callback called with error '${e}' threw error '${t}'.`)}if(this._connectionState!==dn.Reconnecting)return void this._logger.log(Ft.Debug,"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.")}for(;null!==r;){if(this._logger.log(Ft.Information,`Reconnect attempt number ${n} will start in ${r} ms.`),await new Promise((e=>{this._reconnectDelayHandle=setTimeout(e,r)})),this._reconnectDelayHandle=void 0,this._connectionState!==dn.Reconnecting)return void this._logger.log(Ft.Debug,"Connection left the reconnecting state during reconnect delay. Done reconnecting.");try{if(await this._startInternal(),this._connectionState=dn.Connected,this._logger.log(Ft.Information,"HubConnection reconnected successfully."),0!==this._reconnectedCallbacks.length)try{this._reconnectedCallbacks.forEach((e=>e.apply(this,[this.connection.connectionId])))}catch(e){this._logger.log(Ft.Error,`An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`)}return}catch(e){if(this._logger.log(Ft.Information,`Reconnect attempt failed because of error '${e}'.`),this._connectionState!==dn.Reconnecting)return this._logger.log(Ft.Debug,`Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`),void(this._connectionState===dn.Disconnecting&&this._completeClose());o=e instanceof Error?e:new Error(e.toString()),r=this._getNextRetryDelay(n++,Date.now()-t,o)}}this._logger.log(Ft.Information,`Reconnect retries have been exhausted after ${Date.now()-t} ms and ${n} failed attempts. Connection disconnecting.`),this._completeClose()}_getNextRetryDelay(e,t,n){try{return this._reconnectPolicy.nextRetryDelayInMilliseconds({elapsedMilliseconds:t,previousRetryCount:e,retryReason:n})}catch(n){return this._logger.log(Ft.Error,`IRetryPolicy.nextRetryDelayInMilliseconds(${e}, ${t}) threw error '${n}'.`),null}}_cancelCallbacksWithError(e){const t=this._callbacks;this._callbacks={},Object.keys(t).forEach((n=>{const o=t[n];try{o(null,e)}catch(t){this._logger.log(Ft.Error,`Stream 'error' callback called with '${e}' threw error: ${Zt(t)}`)}}))}_cleanupPingTimer(){this._pingServerHandle&&(clearTimeout(this._pingServerHandle),this._pingServerHandle=void 0)}_cleanupTimeout(){this._timeoutHandle&&clearTimeout(this._timeoutHandle)}_createInvocation(e,t,n,o){if(n)return 0!==o.length?{arguments:t,streamIds:o,target:e,type:hn.Invocation}:{arguments:t,target:e,type:hn.Invocation};{const n=this._invocationId;return this._invocationId++,0!==o.length?{arguments:t,invocationId:n.toString(),streamIds:o,target:e,type:hn.Invocation}:{arguments:t,invocationId:n.toString(),target:e,type:hn.Invocation}}}_launchStreams(e,t){if(0!==e.length){t||(t=Promise.resolve());for(const n in e)e[n].subscribe({complete:()=>{t=t.then((()=>this._sendWithProtocol(this._createCompletionMessage(n))))},error:e=>{let o;o=e instanceof Error?e.message:e&&e.toString?e.toString():"Unknown error",t=t.then((()=>this._sendWithProtocol(this._createCompletionMessage(n,o))))},next:e=>{t=t.then((()=>this._sendWithProtocol(this._createStreamItemMessage(n,e))))}})}}_replaceStreamingParams(e){const t=[],n=[];for(let o=0;o<e.length;o++){const r=e[o];if(this._isObservable(r)){const i=this._invocationId;this._invocationId++,t[i]=r,n.push(i.toString()),e.splice(o,1)}}return[t,n]}_isObservable(e){return e&&e.subscribe&&"function"==typeof e.subscribe}_createStreamInvocation(e,t,n){const o=this._invocationId;return this._invocationId++,0!==n.length?{arguments:t,invocationId:o.toString(),streamIds:n,target:e,type:hn.StreamInvocation}:{arguments:t,invocationId:o.toString(),target:e,type:hn.StreamInvocation}}_createCancelInvocation(e){return{invocationId:e,type:hn.CancelInvocation}}_createStreamItemMessage(e,t){return{invocationId:e,item:t,type:hn.StreamItem}}_createCompletionMessage(e,t,n){return t?{error:t,invocationId:e,type:hn.Completion}:{invocationId:e,result:n,type:hn.Completion}}_createCloseMessage(){return{type:hn.Close}}}const mn=[0,2e3,1e4,3e4,null];class vn{constructor(e){this._retryDelays=void 0!==e?[...e,null]:mn}nextRetryDelayInMilliseconds(e){return this._retryDelays[e.previousRetryCount]}}class yn{}yn.Authorization="Authorization",yn.Cookie="Cookie";class wn{constructor(e,t,n){this.statusCode=e,this.statusText=t,this.content=n}}class bn{get(e,t){return this.send({...t,method:"GET",url:e})}post(e,t){return this.send({...t,method:"POST",url:e})}delete(e,t){return this.send({...t,method:"DELETE",url:e})}getCookieString(e){return""}}class _n extends bn{constructor(e,t){super(),this._innerClient=e,this._accessTokenFactory=t}async send(e){let t=!0;this._accessTokenFactory&&(!this._accessToken||e.url&&e.url.indexOf("/negotiate?")>0)&&(t=!1,this._accessToken=await this._accessTokenFactory()),this._setAuthorizationHeader(e);const n=await this._innerClient.send(e);return t&&401===n.statusCode&&this._accessTokenFactory?(this._accessToken=await this._accessTokenFactory(),this._setAuthorizationHeader(e),await this._innerClient.send(e)):n}_setAuthorizationHeader(e){e.headers||(e.headers={}),this._accessToken?e.headers[yn.Authorization]=`Bearer ${this._accessToken}`:this._accessTokenFactory&&e.headers[yn.Authorization]&&delete e.headers[yn.Authorization]}getCookieString(e){return this._innerClient.getCookieString(e)}}class Sn extends bn{constructor(e){super(),this._logger=e;const t={_fetchType:void 0,_jar:void 0};var o;o=t,"undefined"==typeof fetch&&(o._jar=new(n(628).CookieJar),"undefined"==typeof fetch?o._fetchType=n(200):o._fetchType=fetch,o._fetchType=n(203)(o._fetchType,o._jar),1)?(this._fetchType=t._fetchType,this._jar=t._jar):this._fetchType=fetch.bind(function(){if("undefined"!=typeof globalThis)return globalThis;if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("could not find global")}()),this._abortControllerType=AbortController;const r={_abortControllerType:this._abortControllerType};(function(e){return"undefined"==typeof AbortController&&(e._abortControllerType=n(778),!0)})(r)&&(this._abortControllerType=r._abortControllerType)}async send(e){if(e.abortSignal&&e.abortSignal.aborted)throw new on;if(!e.method)throw new Error("No method defined.");if(!e.url)throw new Error("No url defined.");const t=new this._abortControllerType;let n;e.abortSignal&&(e.abortSignal.onabort=()=>{t.abort(),n=new on});let o,r=null;if(e.timeout){const o=e.timeout;r=setTimeout((()=>{t.abort(),this._logger.log(Ft.Warning,"Timeout from HTTP request."),n=new nn}),o)}""===e.content&&(e.content=void 0),e.content&&(e.headers=e.headers||{},qt(e.content)?e.headers["Content-Type"]="application/octet-stream":e.headers["Content-Type"]="text/plain;charset=UTF-8");try{o=await this._fetchType(e.url,{body:e.content,cache:"no-cache",credentials:!0===e.withCredentials?"include":"same-origin",headers:{"X-Requested-With":"XMLHttpRequest",...e.headers},method:e.method,mode:"cors",redirect:"follow",signal:t.signal})}catch(e){if(n)throw n;throw this._logger.log(Ft.Warning,`Error from HTTP request. ${e}.`),e}finally{r&&clearTimeout(r),e.abortSignal&&(e.abortSignal.onabort=null)}if(!o.ok){const e=await Cn(o,"text");throw new tn(e||o.statusText,o.status)}const i=Cn(o,e.responseType),s=await i;return new wn(o.status,o.statusText,s)}getCookieString(e){return""}}function Cn(e,t){let n;switch(t){case"arraybuffer":n=e.arrayBuffer();break;case"text":default:n=e.text();break;case"blob":case"document":case"json":throw new Error(`${t} is not supported.`)}return n}class En extends bn{constructor(e){super(),this._logger=e}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new on):e.method?e.url?new Promise(((t,n)=>{const o=new XMLHttpRequest;o.open(e.method,e.url,!0),o.withCredentials=void 0===e.withCredentials||e.withCredentials,o.setRequestHeader("X-Requested-With","XMLHttpRequest"),""===e.content&&(e.content=void 0),e.content&&(qt(e.content)?o.setRequestHeader("Content-Type","application/octet-stream"):o.setRequestHeader("Content-Type","text/plain;charset=UTF-8"));const r=e.headers;r&&Object.keys(r).forEach((e=>{o.setRequestHeader(e,r[e])})),e.responseType&&(o.responseType=e.responseType),e.abortSignal&&(e.abortSignal.onabort=()=>{o.abort(),n(new on)}),e.timeout&&(o.timeout=e.timeout),o.onload=()=>{e.abortSignal&&(e.abortSignal.onabort=null),o.status>=200&&o.status<300?t(new wn(o.status,o.statusText,o.response||o.responseText)):n(new tn(o.response||o.responseText||o.statusText,o.status))},o.onerror=()=>{this._logger.log(Ft.Warning,`Error from HTTP request. ${o.status}: ${o.statusText}.`),n(new tn(o.statusText,o.status))},o.ontimeout=()=>{this._logger.log(Ft.Warning,"Timeout from HTTP request."),n(new nn)},o.send(e.content)})):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}}class In extends bn{constructor(e){if(super(),"undefined"!=typeof fetch)this._httpClient=new Sn(e);else{if("undefined"==typeof XMLHttpRequest)throw new Error("No usable HttpClient found.");this._httpClient=new En(e)}}send(e){return e.abortSignal&&e.abortSignal.aborted?Promise.reject(new on):e.method?e.url?this._httpClient.send(e):Promise.reject(new Error("No url defined.")):Promise.reject(new Error("No method defined."))}getCookieString(e){return this._httpClient.getCookieString(e)}}var kn,Tn;!function(e){e[e.None=0]="None",e[e.WebSockets=1]="WebSockets",e[e.ServerSentEvents=2]="ServerSentEvents",e[e.LongPolling=4]="LongPolling"}(kn||(kn={})),function(e){e[e.Text=1]="Text",e[e.Binary=2]="Binary"}(Tn||(Tn={}));class Rn{constructor(){this._isAborted=!1,this.onabort=null}abort(){this._isAborted||(this._isAborted=!0,this.onabort&&this.onabort())}get signal(){return this}get aborted(){return this._isAborted}}class An{get pollAborted(){return this._pollAbort.aborted}constructor(e,t,n){this._httpClient=e,this._logger=t,this._pollAbort=new Rn,this._options=n,this._running=!1,this.onreceive=null,this.onclose=null}async connect(e,t){if(Wt.isRequired(e,"url"),Wt.isRequired(t,"transferFormat"),Wt.isIn(t,Tn,"transferFormat"),this._url=e,this._logger.log(Ft.Trace,"(LongPolling transport) Connecting."),t===Tn.Binary&&"undefined"!=typeof XMLHttpRequest&&"string"!=typeof(new XMLHttpRequest).responseType)throw new Error("Binary protocols over XmlHttpRequest not implementing advanced features are not supported.");const[n,o]=Xt(),r={[n]:o,...this._options.headers},i={abortSignal:this._pollAbort.signal,headers:r,timeout:1e5,withCredentials:this._options.withCredentials};t===Tn.Binary&&(i.responseType="arraybuffer");const s=`${e}&_=${Date.now()}`;this._logger.log(Ft.Trace,`(LongPolling transport) polling: ${s}.`);const a=await this._httpClient.get(s,i);200!==a.statusCode?(this._logger.log(Ft.Error,`(LongPolling transport) Unexpected response code: ${a.statusCode}.`),this._closeError=new tn(a.statusText||"",a.statusCode),this._running=!1):this._running=!0,this._receiving=this._poll(this._url,i)}async _poll(e,t){try{for(;this._running;)try{const n=`${e}&_=${Date.now()}`;this._logger.log(Ft.Trace,`(LongPolling transport) polling: ${n}.`);const o=await this._httpClient.get(n,t);204===o.statusCode?(this._logger.log(Ft.Information,"(LongPolling transport) Poll terminated by server."),this._running=!1):200!==o.statusCode?(this._logger.log(Ft.Error,`(LongPolling transport) Unexpected response code: ${o.statusCode}.`),this._closeError=new tn(o.statusText||"",o.statusCode),this._running=!1):o.content?(this._logger.log(Ft.Trace,`(LongPolling transport) data received. ${zt(o.content,this._options.logMessageContent)}.`),this.onreceive&&this.onreceive(o.content)):this._logger.log(Ft.Trace,"(LongPolling transport) Poll timed out, reissuing.")}catch(e){this._running?e instanceof nn?this._logger.log(Ft.Trace,"(LongPolling transport) Poll timed out, reissuing."):(this._closeError=e,this._running=!1):this._logger.log(Ft.Trace,`(LongPolling transport) Poll errored after shutdown: ${e.message}`)}}finally{this._logger.log(Ft.Trace,"(LongPolling transport) Polling complete."),this.pollAborted||this._raiseOnClose()}}async send(e){return this._running?Jt(this._logger,"LongPolling",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}async stop(){this._logger.log(Ft.Trace,"(LongPolling transport) Stopping polling."),this._running=!1,this._pollAbort.abort();try{await this._receiving,this._logger.log(Ft.Trace,`(LongPolling transport) sending DELETE request to ${this._url}.`);const e={},[t,n]=Xt();e[t]=n;const o={headers:{...e,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials};let r;try{await this._httpClient.delete(this._url,o)}catch(e){r=e}r?r instanceof tn&&(404===r.statusCode?this._logger.log(Ft.Trace,"(LongPolling transport) A 404 response was returned from sending a DELETE request."):this._logger.log(Ft.Trace,`(LongPolling transport) Error sending a DELETE request: ${r}`)):this._logger.log(Ft.Trace,"(LongPolling transport) DELETE request accepted.")}finally{this._logger.log(Ft.Trace,"(LongPolling transport) Stop finished."),this._raiseOnClose()}}_raiseOnClose(){if(this.onclose){let e="(LongPolling transport) Firing onclose event.";this._closeError&&(e+=" Error: "+this._closeError),this._logger.log(Ft.Trace,e),this.onclose(this._closeError)}}}class Dn{constructor(e,t,n,o){this._httpClient=e,this._accessToken=t,this._logger=n,this._options=o,this.onreceive=null,this.onclose=null}async connect(e,t){return Wt.isRequired(e,"url"),Wt.isRequired(t,"transferFormat"),Wt.isIn(t,Tn,"transferFormat"),this._logger.log(Ft.Trace,"(SSE transport) Connecting."),this._url=e,this._accessToken&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(this._accessToken)}`),new Promise(((n,o)=>{let r,i=!1;if(t===Tn.Text){if(jt.isBrowser||jt.isWebWorker)r=new this._options.EventSource(e,{withCredentials:this._options.withCredentials});else{const t=this._httpClient.getCookieString(e),n={};n.Cookie=t;const[o,i]=Xt();n[o]=i,r=new this._options.EventSource(e,{withCredentials:this._options.withCredentials,headers:{...n,...this._options.headers}})}try{r.onmessage=e=>{if(this.onreceive)try{this._logger.log(Ft.Trace,`(SSE transport) data received. ${zt(e.data,this._options.logMessageContent)}.`),this.onreceive(e.data)}catch(e){return void this._close(e)}},r.onerror=e=>{i?this._close():o(new Error("EventSource failed to connect. The connection could not be found on the server, either the connection ID is not present on the server, or a proxy is refusing/buffering the connection. If you have multiple servers check that sticky sessions are enabled."))},r.onopen=()=>{this._logger.log(Ft.Information,`SSE connected to ${this._url}`),this._eventSource=r,i=!0,n()}}catch(e){return void o(e)}}else o(new Error("The Server-Sent Events transport only supports the 'Text' transfer format"))}))}async send(e){return this._eventSource?Jt(this._logger,"SSE",this._httpClient,this._url,e,this._options):Promise.reject(new Error("Cannot send until the transport is connected"))}stop(){return this._close(),Promise.resolve()}_close(e){this._eventSource&&(this._eventSource.close(),this._eventSource=void 0,this.onclose&&this.onclose(e))}}class xn{constructor(e,t,n,o,r,i){this._logger=n,this._accessTokenFactory=t,this._logMessageContent=o,this._webSocketConstructor=r,this._httpClient=e,this.onreceive=null,this.onclose=null,this._headers=i}async connect(e,t){let n;return Wt.isRequired(e,"url"),Wt.isRequired(t,"transferFormat"),Wt.isIn(t,Tn,"transferFormat"),this._logger.log(Ft.Trace,"(WebSockets transport) Connecting."),this._accessTokenFactory&&(n=await this._accessTokenFactory()),new Promise(((o,r)=>{let i;e=e.replace(/^http/,"ws");const s=this._httpClient.getCookieString(e);let a=!1;if(jt.isReactNative){const t={},[o,r]=Xt();t[o]=r,n&&(t[yn.Authorization]=`Bearer ${n}`),s&&(t[yn.Cookie]=s),i=new this._webSocketConstructor(e,void 0,{headers:{...t,...this._headers}})}else n&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(n)}`);i||(i=new this._webSocketConstructor(e)),t===Tn.Binary&&(i.binaryType="arraybuffer"),i.onopen=t=>{this._logger.log(Ft.Information,`WebSocket connected to ${e}.`),this._webSocket=i,a=!0,o()},i.onerror=e=>{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:"There was an error with the transport",this._logger.log(Ft.Information,`(WebSockets transport) ${t}.`)},i.onmessage=e=>{if(this._logger.log(Ft.Trace,`(WebSockets transport) data received. ${zt(e.data,this._logMessageContent)}.`),this.onreceive)try{this.onreceive(e.data)}catch(e){return void this._close(e)}},i.onclose=e=>{if(a)this._close(e);else{let t=null;t="undefined"!=typeof ErrorEvent&&e instanceof ErrorEvent?e.error:"WebSocket failed to connect. The connection could not be found on the server, either the endpoint may not be a SignalR endpoint, the connection ID is not present on the server, or there is a proxy blocking WebSockets. If you have multiple servers check that sticky sessions are enabled.",r(new Error(t))}}}))}send(e){return this._webSocket&&this._webSocket.readyState===this._webSocketConstructor.OPEN?(this._logger.log(Ft.Trace,`(WebSockets transport) sending data. ${zt(e,this._logMessageContent)}.`),this._webSocket.send(e),Promise.resolve()):Promise.reject("WebSocket is not in the OPEN state")}stop(){return this._webSocket&&this._close(void 0),Promise.resolve()}_close(e){this._webSocket&&(this._webSocket.onclose=()=>{},this._webSocket.onmessage=()=>{},this._webSocket.onerror=()=>{},this._webSocket.close(),this._webSocket=void 0),this._logger.log(Ft.Trace,"(WebSockets transport) socket closed."),this.onclose&&(!this._isCloseEvent(e)||!1!==e.wasClean&&1e3===e.code?e instanceof Error?this.onclose(e):this.onclose():this.onclose(new Error(`WebSocket closed with status code: ${e.code} (${e.reason||"no reason given"}).`)))}_isCloseEvent(e){return e&&"boolean"==typeof e.wasClean&&"number"==typeof e.code}}class Nn{constructor(e,t={}){if(this._stopPromiseResolver=()=>{},this.features={},this._negotiateVersion=1,Wt.isRequired(e,"url"),this._logger=function(e){return void 0===e?new Vt(Ft.Information):null===e?$t.instance:void 0!==e.log?e:new Vt(e)}(t.logger),this.baseUrl=this._resolveUrl(e),(t=t||{}).logMessageContent=void 0!==t.logMessageContent&&t.logMessageContent,"boolean"!=typeof t.withCredentials&&void 0!==t.withCredentials)throw new Error("withCredentials option was not a 'boolean' or 'undefined' value");t.withCredentials=void 0===t.withCredentials||t.withCredentials,t.timeout=void 0===t.timeout?1e5:t.timeout,"undefined"==typeof WebSocket||t.WebSocket||(t.WebSocket=WebSocket),"undefined"==typeof EventSource||t.EventSource||(t.EventSource=EventSource),this._httpClient=new _n(t.httpClient||new In(this._logger),t.accessTokenFactory),this._connectionState="Disconnected",this._connectionStarted=!1,this._options=t,this.onreceive=null,this.onclose=null}async start(e){if(e=e||Tn.Binary,Wt.isIn(e,Tn,"transferFormat"),this._logger.log(Ft.Debug,`Starting connection with transfer format '${Tn[e]}'.`),"Disconnected"!==this._connectionState)return Promise.reject(new Error("Cannot start an HttpConnection that is not in the 'Disconnected' state."));if(this._connectionState="Connecting",this._startInternalPromise=this._startInternal(e),await this._startInternalPromise,"Disconnecting"===this._connectionState){const e="Failed to start the HttpConnection before stop() was called.";return this._logger.log(Ft.Error,e),await this._stopPromise,Promise.reject(new on(e))}if("Connected"!==this._connectionState){const e="HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!";return this._logger.log(Ft.Error,e),Promise.reject(new on(e))}this._connectionStarted=!0}send(e){return"Connected"!==this._connectionState?Promise.reject(new Error("Cannot send data if the connection is not in the 'Connected' State.")):(this._sendQueue||(this._sendQueue=new Mn(this.transport)),this._sendQueue.send(e))}async stop(e){return"Disconnected"===this._connectionState?(this._logger.log(Ft.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnected state.`),Promise.resolve()):"Disconnecting"===this._connectionState?(this._logger.log(Ft.Debug,`Call to HttpConnection.stop(${e}) ignored because the connection is already in the disconnecting state.`),this._stopPromise):(this._connectionState="Disconnecting",this._stopPromise=new Promise((e=>{this._stopPromiseResolver=e})),await this._stopInternal(e),void await this._stopPromise)}async _stopInternal(e){this._stopError=e;try{await this._startInternalPromise}catch(e){}if(this.transport){try{await this.transport.stop()}catch(e){this._logger.log(Ft.Error,`HttpConnection.transport.stop() threw error '${e}'.`),this._stopConnection()}this.transport=void 0}else this._logger.log(Ft.Debug,"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.")}async _startInternal(e){let t=this.baseUrl;this._accessTokenFactory=this._options.accessTokenFactory,this._httpClient._accessTokenFactory=this._accessTokenFactory;try{if(this._options.skipNegotiation){if(this._options.transport!==kn.WebSockets)throw new Error("Negotiation can only be skipped when using the WebSocket transport directly.");this.transport=this._constructTransport(kn.WebSockets),await this._startTransport(t,e)}else{let n=null,o=0;do{if(n=await this._getNegotiationResponse(t),"Disconnecting"===this._connectionState||"Disconnected"===this._connectionState)throw new on("The connection was stopped during negotiation.");if(n.error)throw new Error(n.error);if(n.ProtocolVersion)throw new Error("Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.");if(n.url&&(t=n.url),n.accessToken){const e=n.accessToken;this._accessTokenFactory=()=>e,this._httpClient._accessToken=e,this._httpClient._accessTokenFactory=void 0}o++}while(n.url&&o<100);if(100===o&&n.url)throw new Error("Negotiate redirection limit exceeded.");await this._createTransport(t,this._options.transport,n,e)}this.transport instanceof An&&(this.features.inherentKeepAlive=!0),"Connecting"===this._connectionState&&(this._logger.log(Ft.Debug,"The HttpConnection connected successfully."),this._connectionState="Connected")}catch(e){return this._logger.log(Ft.Error,"Failed to start the connection: "+e),this._connectionState="Disconnected",this.transport=void 0,this._stopPromiseResolver(),Promise.reject(e)}}async _getNegotiationResponse(e){const t={},[n,o]=Xt();t[n]=o;const r=this._resolveNegotiateUrl(e);this._logger.log(Ft.Debug,`Sending negotiation request: ${r}.`);try{const e=await this._httpClient.post(r,{content:"",headers:{...t,...this._options.headers},timeout:this._options.timeout,withCredentials:this._options.withCredentials});if(200!==e.statusCode)return Promise.reject(new Error(`Unexpected status code returned from negotiate '${e.statusCode}'`));const n=JSON.parse(e.content);return(!n.negotiateVersion||n.negotiateVersion<1)&&(n.connectionToken=n.connectionId),n.useStatefulReconnect&&!0!==this._options._useStatefulReconnect?Promise.reject(new cn("Client didn't negotiate Stateful Reconnect but the server did.")):n}catch(e){let t="Failed to complete negotiation with the server: "+e;return e instanceof tn&&404===e.statusCode&&(t+=" Either this is not a SignalR endpoint or there is a proxy blocking the connection."),this._logger.log(Ft.Error,t),Promise.reject(new cn(t))}}_createConnectUrl(e,t){return t?e+(-1===e.indexOf("?")?"?":"&")+`id=${t}`:e}async _createTransport(e,t,n,o){let r=this._createConnectUrl(e,n.connectionToken);if(this._isITransport(t))return this._logger.log(Ft.Debug,"Connection was provided an instance of ITransport, using that directly."),this.transport=t,await this._startTransport(r,o),void(this.connectionId=n.connectionId);const i=[],s=n.availableTransports||[];let a=n;for(const n of s){const s=this._resolveTransportOrError(n,t,o,!0===(null==a?void 0:a.useStatefulReconnect));if(s instanceof Error)i.push(`${n.transport} failed:`),i.push(s);else if(this._isITransport(s)){if(this.transport=s,!a){try{a=await this._getNegotiationResponse(e)}catch(e){return Promise.reject(e)}r=this._createConnectUrl(e,a.connectionToken)}try{return await this._startTransport(r,o),void(this.connectionId=a.connectionId)}catch(e){if(this._logger.log(Ft.Error,`Failed to start the transport '${n.transport}': ${e}`),a=void 0,i.push(new an(`${n.transport} failed: ${e}`,kn[n.transport])),"Connecting"!==this._connectionState){const e="Failed to select transport before stop() was called.";return this._logger.log(Ft.Debug,e),Promise.reject(new on(e))}}}}return i.length>0?Promise.reject(new ln(`Unable to connect to the server with any of the available transports. ${i.join(" ")}`,i)):Promise.reject(new Error("None of the transports supported by the client are supported by the server."))}_constructTransport(e){switch(e){case kn.WebSockets:if(!this._options.WebSocket)throw new Error("'WebSocket' is not supported in your environment.");return new xn(this._httpClient,this._accessTokenFactory,this._logger,this._options.logMessageContent,this._options.WebSocket,this._options.headers||{});case kn.ServerSentEvents:if(!this._options.EventSource)throw new Error("'EventSource' is not supported in your environment.");return new Dn(this._httpClient,this._httpClient._accessToken,this._logger,this._options);case kn.LongPolling:return new An(this._httpClient,this._logger,this._options);default:throw new Error(`Unknown transport: ${e}.`)}}_startTransport(e,t){return this.transport.onreceive=this.onreceive,this.features.reconnect?this.transport.onclose=async n=>{let o=!1;if(this.features.reconnect){try{this.features.disconnected(),await this.transport.connect(e,t),await this.features.resend()}catch{o=!0}o&&this._stopConnection(n)}else this._stopConnection(n)}:this.transport.onclose=e=>this._stopConnection(e),this.transport.connect(e,t)}_resolveTransportOrError(e,t,n,o){const r=kn[e.transport];if(null==r)return this._logger.log(Ft.Debug,`Skipping transport '${e.transport}' because it is not supported by this client.`),new Error(`Skipping transport '${e.transport}' because it is not supported by this client.`);if(!function(e,t){return!e||0!=(t&e)}(t,r))return this._logger.log(Ft.Debug,`Skipping transport '${kn[r]}' because it was disabled by the client.`),new sn(`'${kn[r]}' is disabled by the client.`,r);if(!(e.transferFormats.map((e=>Tn[e])).indexOf(n)>=0))return this._logger.log(Ft.Debug,`Skipping transport '${kn[r]}' because it does not support the requested transfer format '${Tn[n]}'.`),new Error(`'${kn[r]}' does not support ${Tn[n]}.`);if(r===kn.WebSockets&&!this._options.WebSocket||r===kn.ServerSentEvents&&!this._options.EventSource)return this._logger.log(Ft.Debug,`Skipping transport '${kn[r]}' because it is not supported in your environment.'`),new rn(`'${kn[r]}' is not supported in your environment.`,r);this._logger.log(Ft.Debug,`Selecting transport '${kn[r]}'.`);try{return this.features.reconnect=r===kn.WebSockets?o:void 0,this._constructTransport(r)}catch(e){return e}}_isITransport(e){return e&&"object"==typeof e&&"connect"in e}_stopConnection(e){if(this._logger.log(Ft.Debug,`HttpConnection.stopConnection(${e}) called while in state ${this._connectionState}.`),this.transport=void 0,e=this._stopError||e,this._stopError=void 0,"Disconnected"!==this._connectionState){if("Connecting"===this._connectionState)throw this._logger.log(Ft.Warning,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is still in the connecting state.`),new Error(`HttpConnection.stopConnection(${e}) was called while the connection is still in the connecting state.`);if("Disconnecting"===this._connectionState&&this._stopPromiseResolver(),e?this._logger.log(Ft.Error,`Connection disconnected with error '${e}'.`):this._logger.log(Ft.Information,"Connection disconnected."),this._sendQueue&&(this._sendQueue.stop().catch((e=>{this._logger.log(Ft.Error,`TransportSendQueue.stop() threw error '${e}'.`)})),this._sendQueue=void 0),this.connectionId=void 0,this._connectionState="Disconnected",this._connectionStarted){this._connectionStarted=!1;try{this.onclose&&this.onclose(e)}catch(t){this._logger.log(Ft.Error,`HttpConnection.onclose(${e}) threw error '${t}'.`)}}}else this._logger.log(Ft.Debug,`Call to HttpConnection.stopConnection(${e}) was ignored because the connection is already in the disconnected state.`)}_resolveUrl(e){if(0===e.lastIndexOf("https://",0)||0===e.lastIndexOf("http://",0))return e;if(!jt.isBrowser)throw new Error(`Cannot resolve '${e}'.`);const t=window.document.createElement("a");return t.href=e,this._logger.log(Ft.Information,`Normalizing '${e}' to '${t.href}'.`),t.href}_resolveNegotiateUrl(e){const t=new URL(e);t.pathname.endsWith("/")?t.pathname+="negotiate":t.pathname+="/negotiate";const n=new URLSearchParams(t.searchParams);return n.has("negotiateVersion")||n.append("negotiateVersion",this._negotiateVersion.toString()),n.has("useStatefulReconnect")?"true"===n.get("useStatefulReconnect")&&(this._options._useStatefulReconnect=!0):!0===this._options._useStatefulReconnect&&n.append("useStatefulReconnect","true"),t.search=n.toString(),t.toString()}}class Mn{constructor(e){this._transport=e,this._buffer=[],this._executing=!0,this._sendBufferedData=new Pn,this._transportResult=new Pn,this._sendLoopPromise=this._sendLoop()}send(e){return this._bufferData(e),this._transportResult||(this._transportResult=new Pn),this._transportResult.promise}stop(){return this._executing=!1,this._sendBufferedData.resolve(),this._sendLoopPromise}_bufferData(e){if(this._buffer.length&&typeof this._buffer[0]!=typeof e)throw new Error(`Expected data to be of type ${typeof this._buffer} but was of type ${typeof e}`);this._buffer.push(e),this._sendBufferedData.resolve()}async _sendLoop(){for(;;){if(await this._sendBufferedData.promise,!this._executing){this._transportResult&&this._transportResult.reject("Connection stopped.");break}this._sendBufferedData=new Pn;const e=this._transportResult;this._transportResult=void 0;const t="string"==typeof this._buffer[0]?this._buffer.join(""):Mn._concatBuffers(this._buffer);this._buffer.length=0;try{await this._transport.send(t),e.resolve()}catch(t){e.reject(t)}}}static _concatBuffers(e){const t=e.map((e=>e.byteLength)).reduce(((e,t)=>e+t)),n=new Uint8Array(t);let o=0;for(const t of e)n.set(new Uint8Array(t),o),o+=t.byteLength;return n.buffer}}class Pn{constructor(){this.promise=new Promise(((e,t)=>[this._resolver,this._rejecter]=[e,t]))}resolve(){this._resolver()}reject(e){this._rejecter(e)}}class Un{constructor(){this.name="json",this.version=2,this.transferFormat=Tn.Text}parseMessages(e,t){if("string"!=typeof e)throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!e)return[];null===t&&(t=$t.instance);const n=Ot.parse(e),o=[];for(const e of n){const n=JSON.parse(e);if("number"!=typeof n.type)throw new Error("Invalid payload.");switch(n.type){case hn.Invocation:this._isInvocationMessage(n);break;case hn.StreamItem:this._isStreamItemMessage(n);break;case hn.Completion:this._isCompletionMessage(n);break;case hn.Ping:case hn.Close:break;case hn.Ack:this._isAckMessage(n);break;case hn.Sequence:this._isSequenceMessage(n);break;default:t.log(Ft.Information,"Unknown message type '"+n.type+"' ignored.");continue}o.push(n)}return o}writeMessage(e){return Ot.write(JSON.stringify(e))}_isInvocationMessage(e){this._assertNotEmptyString(e.target,"Invalid payload for Invocation message."),void 0!==e.invocationId&&this._assertNotEmptyString(e.invocationId,"Invalid payload for Invocation message.")}_isStreamItemMessage(e){if(this._assertNotEmptyString(e.invocationId,"Invalid payload for StreamItem message."),void 0===e.item)throw new Error("Invalid payload for StreamItem message.")}_isCompletionMessage(e){if(e.result&&e.error)throw new Error("Invalid payload for Completion message.");!e.result&&e.error&&this._assertNotEmptyString(e.error,"Invalid payload for Completion message."),this._assertNotEmptyString(e.invocationId,"Invalid payload for Completion message.")}_isAckMessage(e){if("number"!=typeof e.sequenceId)throw new Error("Invalid SequenceId for Ack message.")}_isSequenceMessage(e){if("number"!=typeof e.sequenceId)throw new Error("Invalid SequenceId for Sequence message.")}_assertNotEmptyString(e,t){if("string"!=typeof e||""===e)throw new Error(t)}}const Ln={trace:Ft.Trace,debug:Ft.Debug,info:Ft.Information,information:Ft.Information,warn:Ft.Warning,warning:Ft.Warning,error:Ft.Error,critical:Ft.Critical,none:Ft.None};class Bn{configureLogging(e){if(Wt.isRequired(e,"logging"),function(e){return void 0!==e.log}(e))this.logger=e;else if("string"==typeof e){const t=function(e){const t=Ln[e.toLowerCase()];if(void 0!==t)return t;throw new Error(`Unknown log level: ${e}`)}(e);this.logger=new Vt(t)}else this.logger=new Vt(e);return this}withUrl(e,t){return Wt.isRequired(e,"url"),Wt.isNotEmpty(e,"url"),this.url=e,this.httpConnectionOptions="object"==typeof t?{...this.httpConnectionOptions,...t}:{...this.httpConnectionOptions,transport:t},this}withHubProtocol(e){return Wt.isRequired(e,"protocol"),this.protocol=e,this}withAutomaticReconnect(e){if(this.reconnectPolicy)throw new Error("A reconnectPolicy has already been set.");return e?Array.isArray(e)?this.reconnectPolicy=new vn(e):this.reconnectPolicy=e:this.reconnectPolicy=new vn,this}withServerTimeout(e){return Wt.isRequired(e,"milliseconds"),this._serverTimeoutInMilliseconds=e,this}withKeepAliveInterval(e){return Wt.isRequired(e,"milliseconds"),this._keepAliveIntervalInMilliseconds=e,this}withStatefulReconnect(e){return void 0===this.httpConnectionOptions&&(this.httpConnectionOptions={}),this.httpConnectionOptions._useStatefulReconnect=!0,this._statefulReconnectBufferSize=null==e?void 0:e.bufferSize,this}build(){const e=this.httpConnectionOptions||{};if(void 0===e.logger&&(e.logger=this.logger),!this.url)throw new Error("The 'HubConnectionBuilder.withUrl' method must be called before building the connection.");const t=new Nn(this.url,e);return gn.create(t,this.logger||$t.instance,this.protocol||new Un,this.reconnectPolicy,this._serverTimeoutInMilliseconds,this._keepAliveIntervalInMilliseconds,this._statefulReconnectBufferSize)}}var On;!function(e){e[e.Default=0]="Default",e[e.Server=1]="Server",e[e.WebAssembly=2]="WebAssembly",e[e.WebView=3]="WebView"}(On||(On={}));var Fn,$n,Hn,Wn=4294967295;function jn(e,t,n){var o=Math.floor(n/4294967296),r=n;e.setUint32(t,o),e.setUint32(t+4,r)}function zn(e,t){return 4294967296*e.getInt32(t)+e.getUint32(t+4)}var qn=("undefined"==typeof process||"never"!==(null===(Fn=null===process||void 0===process?void 0:process.env)||void 0===Fn?void 0:Fn.TEXT_ENCODING))&&"undefined"!=typeof TextEncoder&&"undefined"!=typeof TextDecoder;function Jn(e){for(var t=e.length,n=0,o=0;o<t;){var r=e.charCodeAt(o++);if(0!=(4294967168&r))if(0==(4294965248&r))n+=2;else{if(r>=55296&&r<=56319&&o<t){var i=e.charCodeAt(o);56320==(64512&i)&&(++o,r=((1023&r)<<10)+(1023&i)+65536)}n+=0==(4294901760&r)?3:4}else n++}return n}var Kn=qn?new TextEncoder:void 0,Vn=qn?"undefined"!=typeof process&&"force"!==(null===($n=null===process||void 0===process?void 0:process.env)||void 0===$n?void 0:$n.TEXT_ENCODING)?200:0:Wn,Xn=(null==Kn?void 0:Kn.encodeInto)?function(e,t,n){Kn.encodeInto(e,t.subarray(n))}:function(e,t,n){t.set(Kn.encode(e),n)};function Gn(e,t,n){for(var o=t,r=o+n,i=[],s="";o<r;){var a=e[o++];if(0==(128&a))i.push(a);else if(192==(224&a)){var c=63&e[o++];i.push((31&a)<<6|c)}else if(224==(240&a)){c=63&e[o++];var l=63&e[o++];i.push((31&a)<<12|c<<6|l)}else if(240==(248&a)){var h=(7&a)<<18|(c=63&e[o++])<<12|(l=63&e[o++])<<6|63&e[o++];h>65535&&(h-=65536,i.push(h>>>10&1023|55296),h=56320|1023&h),i.push(h)}else i.push(a);i.length>=4096&&(s+=String.fromCharCode.apply(String,i),i.length=0)}return i.length>0&&(s+=String.fromCharCode.apply(String,i)),s}var Yn,Qn=qn?new TextDecoder:null,Zn=qn?"undefined"!=typeof process&&"force"!==(null===(Hn=null===process||void 0===process?void 0:process.env)||void 0===Hn?void 0:Hn.TEXT_DECODER)?200:0:Wn,eo=function(e,t){this.type=e,this.data=t},to=(Yn=function(e,t){return Yn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},Yn(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}Yn(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),no=function(e){function t(n){var o=e.call(this,n)||this,r=Object.create(t.prototype);return Object.setPrototypeOf(o,r),Object.defineProperty(o,"name",{configurable:!0,enumerable:!1,value:t.name}),o}return to(t,e),t}(Error),oo={type:-1,encode:function(e){var t,n,o,r;return e instanceof Date?function(e){var t,n=e.sec,o=e.nsec;if(n>=0&&o>=0&&n<=17179869183){if(0===o&&n<=4294967295){var r=new Uint8Array(4);return(t=new DataView(r.buffer)).setUint32(0,n),r}var i=n/4294967296,s=4294967295&n;return r=new Uint8Array(8),(t=new DataView(r.buffer)).setUint32(0,o<<2|3&i),t.setUint32(4,s),r}return r=new Uint8Array(12),(t=new DataView(r.buffer)).setUint32(0,o),jn(t,4,n),r}((o=1e6*((t=e.getTime())-1e3*(n=Math.floor(t/1e3))),{sec:n+(r=Math.floor(o/1e9)),nsec:o-1e9*r})):null},decode:function(e){var t=function(e){var t=new DataView(e.buffer,e.byteOffset,e.byteLength);switch(e.byteLength){case 4:return{sec:t.getUint32(0),nsec:0};case 8:var n=t.getUint32(0);return{sec:4294967296*(3&n)+t.getUint32(4),nsec:n>>>2};case 12:return{sec:zn(t,4),nsec:t.getUint32(0)};default:throw new no("Unrecognized data size for timestamp (expected 4, 8, or 12): ".concat(e.length))}}(e);return new Date(1e3*t.sec+t.nsec/1e6)}},ro=function(){function e(){this.builtInEncoders=[],this.builtInDecoders=[],this.encoders=[],this.decoders=[],this.register(oo)}return e.prototype.register=function(e){var t=e.type,n=e.encode,o=e.decode;if(t>=0)this.encoders[t]=n,this.decoders[t]=o;else{var r=1+t;this.builtInEncoders[r]=n,this.builtInDecoders[r]=o}},e.prototype.tryToEncode=function(e,t){for(var n=0;n<this.builtInEncoders.length;n++)if(null!=(o=this.builtInEncoders[n])&&null!=(r=o(e,t)))return new eo(-1-n,r);for(n=0;n<this.encoders.length;n++){var o,r;if(null!=(o=this.encoders[n])&&null!=(r=o(e,t)))return new eo(n,r)}return e instanceof eo?e:null},e.prototype.decode=function(e,t,n){var o=t<0?this.builtInDecoders[-1-t]:this.decoders[t];return o?o(e,t,n):new eo(t,e)},e.defaultCodec=new e,e}();function io(e){return e instanceof Uint8Array?e:ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):e instanceof ArrayBuffer?new Uint8Array(e):Uint8Array.from(e)}var so=function(){function e(e,t,n,o,r,i,s,a){void 0===e&&(e=ro.defaultCodec),void 0===t&&(t=void 0),void 0===n&&(n=100),void 0===o&&(o=2048),void 0===r&&(r=!1),void 0===i&&(i=!1),void 0===s&&(s=!1),void 0===a&&(a=!1),this.extensionCodec=e,this.context=t,this.maxDepth=n,this.initialBufferSize=o,this.sortKeys=r,this.forceFloat32=i,this.ignoreUndefined=s,this.forceIntegerToFloat=a,this.pos=0,this.view=new DataView(new ArrayBuffer(this.initialBufferSize)),this.bytes=new Uint8Array(this.view.buffer)}return e.prototype.reinitializeState=function(){this.pos=0},e.prototype.encodeSharedRef=function(e){return this.reinitializeState(),this.doEncode(e,1),this.bytes.subarray(0,this.pos)},e.prototype.encode=function(e){return this.reinitializeState(),this.doEncode(e,1),this.bytes.slice(0,this.pos)},e.prototype.doEncode=function(e,t){if(t>this.maxDepth)throw new Error("Too deep objects in depth ".concat(t));null==e?this.encodeNil():"boolean"==typeof e?this.encodeBoolean(e):"number"==typeof e?this.encodeNumber(e):"string"==typeof e?this.encodeString(e):this.encodeObject(e,t)},e.prototype.ensureBufferSizeToWrite=function(e){var t=this.pos+e;this.view.byteLength<t&&this.resizeBuffer(2*t)},e.prototype.resizeBuffer=function(e){var t=new ArrayBuffer(e),n=new Uint8Array(t),o=new DataView(t);n.set(this.bytes),this.view=o,this.bytes=n},e.prototype.encodeNil=function(){this.writeU8(192)},e.prototype.encodeBoolean=function(e){!1===e?this.writeU8(194):this.writeU8(195)},e.prototype.encodeNumber=function(e){Number.isSafeInteger(e)&&!this.forceIntegerToFloat?e>=0?e<128?this.writeU8(e):e<256?(this.writeU8(204),this.writeU8(e)):e<65536?(this.writeU8(205),this.writeU16(e)):e<4294967296?(this.writeU8(206),this.writeU32(e)):(this.writeU8(207),this.writeU64(e)):e>=-32?this.writeU8(224|e+32):e>=-128?(this.writeU8(208),this.writeI8(e)):e>=-32768?(this.writeU8(209),this.writeI16(e)):e>=-2147483648?(this.writeU8(210),this.writeI32(e)):(this.writeU8(211),this.writeI64(e)):this.forceFloat32?(this.writeU8(202),this.writeF32(e)):(this.writeU8(203),this.writeF64(e))},e.prototype.writeStringHeader=function(e){if(e<32)this.writeU8(160+e);else if(e<256)this.writeU8(217),this.writeU8(e);else if(e<65536)this.writeU8(218),this.writeU16(e);else{if(!(e<4294967296))throw new Error("Too long string: ".concat(e," bytes in UTF-8"));this.writeU8(219),this.writeU32(e)}},e.prototype.encodeString=function(e){if(e.length>Vn){var t=Jn(e);this.ensureBufferSizeToWrite(5+t),this.writeStringHeader(t),Xn(e,this.bytes,this.pos),this.pos+=t}else t=Jn(e),this.ensureBufferSizeToWrite(5+t),this.writeStringHeader(t),function(e,t,n){for(var o=e.length,r=n,i=0;i<o;){var s=e.charCodeAt(i++);if(0!=(4294967168&s)){if(0==(4294965248&s))t[r++]=s>>6&31|192;else{if(s>=55296&&s<=56319&&i<o){var a=e.charCodeAt(i);56320==(64512&a)&&(++i,s=((1023&s)<<10)+(1023&a)+65536)}0==(4294901760&s)?(t[r++]=s>>12&15|224,t[r++]=s>>6&63|128):(t[r++]=s>>18&7|240,t[r++]=s>>12&63|128,t[r++]=s>>6&63|128)}t[r++]=63&s|128}else t[r++]=s}}(e,this.bytes,this.pos),this.pos+=t},e.prototype.encodeObject=function(e,t){var n=this.extensionCodec.tryToEncode(e,this.context);if(null!=n)this.encodeExtension(n);else if(Array.isArray(e))this.encodeArray(e,t);else if(ArrayBuffer.isView(e))this.encodeBinary(e);else{if("object"!=typeof e)throw new Error("Unrecognized object: ".concat(Object.prototype.toString.apply(e)));this.encodeMap(e,t)}},e.prototype.encodeBinary=function(e){var t=e.byteLength;if(t<256)this.writeU8(196),this.writeU8(t);else if(t<65536)this.writeU8(197),this.writeU16(t);else{if(!(t<4294967296))throw new Error("Too large binary: ".concat(t));this.writeU8(198),this.writeU32(t)}var n=io(e);this.writeU8a(n)},e.prototype.encodeArray=function(e,t){var n=e.length;if(n<16)this.writeU8(144+n);else if(n<65536)this.writeU8(220),this.writeU16(n);else{if(!(n<4294967296))throw new Error("Too large array: ".concat(n));this.writeU8(221),this.writeU32(n)}for(var o=0,r=e;o<r.length;o++){var i=r[o];this.doEncode(i,t+1)}},e.prototype.countWithoutUndefined=function(e,t){for(var n=0,o=0,r=t;o<r.length;o++)void 0!==e[r[o]]&&n++;return n},e.prototype.encodeMap=function(e,t){var n=Object.keys(e);this.sortKeys&&n.sort();var o=this.ignoreUndefined?this.countWithoutUndefined(e,n):n.length;if(o<16)this.writeU8(128+o);else if(o<65536)this.writeU8(222),this.writeU16(o);else{if(!(o<4294967296))throw new Error("Too large map object: ".concat(o));this.writeU8(223),this.writeU32(o)}for(var r=0,i=n;r<i.length;r++){var s=i[r],a=e[s];this.ignoreUndefined&&void 0===a||(this.encodeString(s),this.doEncode(a,t+1))}},e.prototype.encodeExtension=function(e){var t=e.data.length;if(1===t)this.writeU8(212);else if(2===t)this.writeU8(213);else if(4===t)this.writeU8(214);else if(8===t)this.writeU8(215);else if(16===t)this.writeU8(216);else if(t<256)this.writeU8(199),this.writeU8(t);else if(t<65536)this.writeU8(200),this.writeU16(t);else{if(!(t<4294967296))throw new Error("Too large extension object: ".concat(t));this.writeU8(201),this.writeU32(t)}this.writeI8(e.type),this.writeU8a(e.data)},e.prototype.writeU8=function(e){this.ensureBufferSizeToWrite(1),this.view.setUint8(this.pos,e),this.pos++},e.prototype.writeU8a=function(e){var t=e.length;this.ensureBufferSizeToWrite(t),this.bytes.set(e,this.pos),this.pos+=t},e.prototype.writeI8=function(e){this.ensureBufferSizeToWrite(1),this.view.setInt8(this.pos,e),this.pos++},e.prototype.writeU16=function(e){this.ensureBufferSizeToWrite(2),this.view.setUint16(this.pos,e),this.pos+=2},e.prototype.writeI16=function(e){this.ensureBufferSizeToWrite(2),this.view.setInt16(this.pos,e),this.pos+=2},e.prototype.writeU32=function(e){this.ensureBufferSizeToWrite(4),this.view.setUint32(this.pos,e),this.pos+=4},e.prototype.writeI32=function(e){this.ensureBufferSizeToWrite(4),this.view.setInt32(this.pos,e),this.pos+=4},e.prototype.writeF32=function(e){this.ensureBufferSizeToWrite(4),this.view.setFloat32(this.pos,e),this.pos+=4},e.prototype.writeF64=function(e){this.ensureBufferSizeToWrite(8),this.view.setFloat64(this.pos,e),this.pos+=8},e.prototype.writeU64=function(e){this.ensureBufferSizeToWrite(8),function(e,t,n){var o=n/4294967296,r=n;e.setUint32(t,o),e.setUint32(t+4,r)}(this.view,this.pos,e),this.pos+=8},e.prototype.writeI64=function(e){this.ensureBufferSizeToWrite(8),jn(this.view,this.pos,e),this.pos+=8},e}();function ao(e){return"".concat(e<0?"-":"","0x").concat(Math.abs(e).toString(16).padStart(2,"0"))}var co=function(){function e(e,t){void 0===e&&(e=16),void 0===t&&(t=16),this.maxKeyLength=e,this.maxLengthPerKey=t,this.hit=0,this.miss=0,this.caches=[];for(var n=0;n<this.maxKeyLength;n++)this.caches.push([])}return e.prototype.canBeCached=function(e){return e>0&&e<=this.maxKeyLength},e.prototype.find=function(e,t,n){e:for(var o=0,r=this.caches[n-1];o<r.length;o++){for(var i=r[o],s=i.bytes,a=0;a<n;a++)if(s[a]!==e[t+a])continue e;return i.str}return null},e.prototype.store=function(e,t){var n=this.caches[e.length-1],o={bytes:e,str:t};n.length>=this.maxLengthPerKey?n[Math.random()*n.length|0]=o:n.push(o)},e.prototype.decode=function(e,t,n){var o=this.find(e,t,n);if(null!=o)return this.hit++,o;this.miss++;var r=Gn(e,t,n),i=Uint8Array.prototype.slice.call(e,t,t+n);return this.store(i,r),r},e}(),lo=function(e,t){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},ho=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(n){t[n]=e[n]&&function(t){return new Promise((function(o,r){!function(e,t,n,o){Promise.resolve(o).then((function(t){e({value:t,done:n})}),t)}(o,r,(t=e[n](t)).done,t.value)}))}}},uo=function(e){return this instanceof uo?(this.v=e,this):new uo(e)},po=new DataView(new ArrayBuffer(0)),fo=new Uint8Array(po.buffer),go=function(){try{po.getInt8(0)}catch(e){return e.constructor}throw new Error("never reached")}(),mo=new go("Insufficient data"),vo=new co,yo=function(){function e(e,t,n,o,r,i,s,a){void 0===e&&(e=ro.defaultCodec),void 0===t&&(t=void 0),void 0===n&&(n=Wn),void 0===o&&(o=Wn),void 0===r&&(r=Wn),void 0===i&&(i=Wn),void 0===s&&(s=Wn),void 0===a&&(a=vo),this.extensionCodec=e,this.context=t,this.maxStrLength=n,this.maxBinLength=o,this.maxArrayLength=r,this.maxMapLength=i,this.maxExtLength=s,this.keyDecoder=a,this.totalPos=0,this.pos=0,this.view=po,this.bytes=fo,this.headByte=-1,this.stack=[]}return e.prototype.reinitializeState=function(){this.totalPos=0,this.headByte=-1,this.stack.length=0},e.prototype.setBuffer=function(e){this.bytes=io(e),this.view=function(e){if(e instanceof ArrayBuffer)return new DataView(e);var t=io(e);return new DataView(t.buffer,t.byteOffset,t.byteLength)}(this.bytes),this.pos=0},e.prototype.appendBuffer=function(e){if(-1!==this.headByte||this.hasRemaining(1)){var t=this.bytes.subarray(this.pos),n=io(e),o=new Uint8Array(t.length+n.length);o.set(t),o.set(n,t.length),this.setBuffer(o)}else this.setBuffer(e)},e.prototype.hasRemaining=function(e){return this.view.byteLength-this.pos>=e},e.prototype.createExtraByteError=function(e){var t=this.view,n=this.pos;return new RangeError("Extra ".concat(t.byteLength-n," of ").concat(t.byteLength," byte(s) found at buffer[").concat(e,"]"))},e.prototype.decode=function(e){this.reinitializeState(),this.setBuffer(e);var t=this.doDecodeSync();if(this.hasRemaining(1))throw this.createExtraByteError(this.pos);return t},e.prototype.decodeMulti=function(e){return lo(this,(function(t){switch(t.label){case 0:this.reinitializeState(),this.setBuffer(e),t.label=1;case 1:return this.hasRemaining(1)?[4,this.doDecodeSync()]:[3,3];case 2:return t.sent(),[3,1];case 3:return[2]}}))},e.prototype.decodeAsync=function(e){var t,n,o,r,i,s,a;return i=this,void 0,a=function(){var i,s,a,c,l,h,d,u;return lo(this,(function(p){switch(p.label){case 0:i=!1,p.label=1;case 1:p.trys.push([1,6,7,12]),t=ho(e),p.label=2;case 2:return[4,t.next()];case 3:if((n=p.sent()).done)return[3,5];if(a=n.value,i)throw this.createExtraByteError(this.totalPos);this.appendBuffer(a);try{s=this.doDecodeSync(),i=!0}catch(e){if(!(e instanceof go))throw e}this.totalPos+=this.pos,p.label=4;case 4:return[3,2];case 5:return[3,12];case 6:return c=p.sent(),o={error:c},[3,12];case 7:return p.trys.push([7,,10,11]),n&&!n.done&&(r=t.return)?[4,r.call(t)]:[3,9];case 8:p.sent(),p.label=9;case 9:return[3,11];case 10:if(o)throw o.error;return[7];case 11:return[7];case 12:if(i){if(this.hasRemaining(1))throw this.createExtraByteError(this.totalPos);return[2,s]}throw h=(l=this).headByte,d=l.pos,u=l.totalPos,new RangeError("Insufficient data in parsing ".concat(ao(h)," at ").concat(u," (").concat(d," in the current buffer)"))}}))},new((s=void 0)||(s=Promise))((function(e,t){function n(e){try{r(a.next(e))}catch(e){t(e)}}function o(e){try{r(a.throw(e))}catch(e){t(e)}}function r(t){var r;t.done?e(t.value):(r=t.value,r instanceof s?r:new s((function(e){e(r)}))).then(n,o)}r((a=a.apply(i,[])).next())}))},e.prototype.decodeArrayStream=function(e){return this.decodeMultiAsync(e,!0)},e.prototype.decodeStream=function(e){return this.decodeMultiAsync(e,!1)},e.prototype.decodeMultiAsync=function(e,t){return function(n,o,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,s=function(){var n,o,r,i,s,a,c,l,h;return lo(this,(function(d){switch(d.label){case 0:n=t,o=-1,d.label=1;case 1:d.trys.push([1,13,14,19]),r=ho(e),d.label=2;case 2:return[4,uo(r.next())];case 3:if((i=d.sent()).done)return[3,12];if(s=i.value,t&&0===o)throw this.createExtraByteError(this.totalPos);this.appendBuffer(s),n&&(o=this.readArraySize(),n=!1,this.complete()),d.label=4;case 4:d.trys.push([4,9,,10]),d.label=5;case 5:return[4,uo(this.doDecodeSync())];case 6:return[4,d.sent()];case 7:return d.sent(),0==--o?[3,8]:[3,5];case 8:return[3,10];case 9:if(!((a=d.sent())instanceof go))throw a;return[3,10];case 10:this.totalPos+=this.pos,d.label=11;case 11:return[3,2];case 12:return[3,19];case 13:return c=d.sent(),l={error:c},[3,19];case 14:return d.trys.push([14,,17,18]),i&&!i.done&&(h=r.return)?[4,uo(h.call(r))]:[3,16];case 15:d.sent(),d.label=16;case 16:return[3,18];case 17:if(l)throw l.error;return[7];case 18:return[7];case 19:return[2]}}))}.apply(n,o||[]),a=[];return i={},c("next"),c("throw"),c("return"),i[Symbol.asyncIterator]=function(){return this},i;function c(e){s[e]&&(i[e]=function(t){return new Promise((function(n,o){a.push([e,t,n,o])>1||l(e,t)}))})}function l(e,t){try{(n=s[e](t)).value instanceof uo?Promise.resolve(n.value.v).then(h,d):u(a[0][2],n)}catch(e){u(a[0][3],e)}var n}function h(e){l("next",e)}function d(e){l("throw",e)}function u(e,t){e(t),a.shift(),a.length&&l(a[0][0],a[0][1])}}(this,arguments)},e.prototype.doDecodeSync=function(){e:for(;;){var e=this.readHeadByte(),t=void 0;if(e>=224)t=e-256;else if(e<192)if(e<128)t=e;else if(e<144){if(0!=(o=e-128)){this.pushMapState(o),this.complete();continue e}t={}}else if(e<160){if(0!=(o=e-144)){this.pushArrayState(o),this.complete();continue e}t=[]}else{var n=e-160;t=this.decodeUtf8String(n,0)}else if(192===e)t=null;else if(194===e)t=!1;else if(195===e)t=!0;else if(202===e)t=this.readF32();else if(203===e)t=this.readF64();else if(204===e)t=this.readU8();else if(205===e)t=this.readU16();else if(206===e)t=this.readU32();else if(207===e)t=this.readU64();else if(208===e)t=this.readI8();else if(209===e)t=this.readI16();else if(210===e)t=this.readI32();else if(211===e)t=this.readI64();else if(217===e)n=this.lookU8(),t=this.decodeUtf8String(n,1);else if(218===e)n=this.lookU16(),t=this.decodeUtf8String(n,2);else if(219===e)n=this.lookU32(),t=this.decodeUtf8String(n,4);else if(220===e){if(0!==(o=this.readU16())){this.pushArrayState(o),this.complete();continue e}t=[]}else if(221===e){if(0!==(o=this.readU32())){this.pushArrayState(o),this.complete();continue e}t=[]}else if(222===e){if(0!==(o=this.readU16())){this.pushMapState(o),this.complete();continue e}t={}}else if(223===e){if(0!==(o=this.readU32())){this.pushMapState(o),this.complete();continue e}t={}}else if(196===e){var o=this.lookU8();t=this.decodeBinary(o,1)}else if(197===e)o=this.lookU16(),t=this.decodeBinary(o,2);else if(198===e)o=this.lookU32(),t=this.decodeBinary(o,4);else if(212===e)t=this.decodeExtension(1,0);else if(213===e)t=this.decodeExtension(2,0);else if(214===e)t=this.decodeExtension(4,0);else if(215===e)t=this.decodeExtension(8,0);else if(216===e)t=this.decodeExtension(16,0);else if(199===e)o=this.lookU8(),t=this.decodeExtension(o,1);else if(200===e)o=this.lookU16(),t=this.decodeExtension(o,2);else{if(201!==e)throw new no("Unrecognized type byte: ".concat(ao(e)));o=this.lookU32(),t=this.decodeExtension(o,4)}this.complete();for(var r=this.stack;r.length>0;){var i=r[r.length-1];if(0===i.type){if(i.array[i.position]=t,i.position++,i.position!==i.size)continue e;r.pop(),t=i.array}else{if(1===i.type){if("string"!=(s=typeof t)&&"number"!==s)throw new no("The type of key must be string or number but "+typeof t);if("__proto__"===t)throw new no("The key __proto__ is not allowed");i.key=t,i.type=2;continue e}if(i.map[i.key]=t,i.readCount++,i.readCount!==i.size){i.key=null,i.type=1;continue e}r.pop(),t=i.map}}return t}var s},e.prototype.readHeadByte=function(){return-1===this.headByte&&(this.headByte=this.readU8()),this.headByte},e.prototype.complete=function(){this.headByte=-1},e.prototype.readArraySize=function(){var e=this.readHeadByte();switch(e){case 220:return this.readU16();case 221:return this.readU32();default:if(e<160)return e-144;throw new no("Unrecognized array type byte: ".concat(ao(e)))}},e.prototype.pushMapState=function(e){if(e>this.maxMapLength)throw new no("Max length exceeded: map length (".concat(e,") > maxMapLengthLength (").concat(this.maxMapLength,")"));this.stack.push({type:1,size:e,key:null,readCount:0,map:{}})},e.prototype.pushArrayState=function(e){if(e>this.maxArrayLength)throw new no("Max length exceeded: array length (".concat(e,") > maxArrayLength (").concat(this.maxArrayLength,")"));this.stack.push({type:0,size:e,array:new Array(e),position:0})},e.prototype.decodeUtf8String=function(e,t){var n;if(e>this.maxStrLength)throw new no("Max length exceeded: UTF-8 byte length (".concat(e,") > maxStrLength (").concat(this.maxStrLength,")"));if(this.bytes.byteLength<this.pos+t+e)throw mo;var o,r=this.pos+t;return o=this.stateIsMapKey()&&(null===(n=this.keyDecoder)||void 0===n?void 0:n.canBeCached(e))?this.keyDecoder.decode(this.bytes,r,e):e>Zn?function(e,t,n){var o=e.subarray(t,t+n);return Qn.decode(o)}(this.bytes,r,e):Gn(this.bytes,r,e),this.pos+=t+e,o},e.prototype.stateIsMapKey=function(){return this.stack.length>0&&1===this.stack[this.stack.length-1].type},e.prototype.decodeBinary=function(e,t){if(e>this.maxBinLength)throw new no("Max length exceeded: bin length (".concat(e,") > maxBinLength (").concat(this.maxBinLength,")"));if(!this.hasRemaining(e+t))throw mo;var n=this.pos+t,o=this.bytes.subarray(n,n+e);return this.pos+=t+e,o},e.prototype.decodeExtension=function(e,t){if(e>this.maxExtLength)throw new no("Max length exceeded: ext length (".concat(e,") > maxExtLength (").concat(this.maxExtLength,")"));var n=this.view.getInt8(this.pos+t),o=this.decodeBinary(e,t+1);return this.extensionCodec.decode(o,n,this.context)},e.prototype.lookU8=function(){return this.view.getUint8(this.pos)},e.prototype.lookU16=function(){return this.view.getUint16(this.pos)},e.prototype.lookU32=function(){return this.view.getUint32(this.pos)},e.prototype.readU8=function(){var e=this.view.getUint8(this.pos);return this.pos++,e},e.prototype.readI8=function(){var e=this.view.getInt8(this.pos);return this.pos++,e},e.prototype.readU16=function(){var e=this.view.getUint16(this.pos);return this.pos+=2,e},e.prototype.readI16=function(){var e=this.view.getInt16(this.pos);return this.pos+=2,e},e.prototype.readU32=function(){var e=this.view.getUint32(this.pos);return this.pos+=4,e},e.prototype.readI32=function(){var e=this.view.getInt32(this.pos);return this.pos+=4,e},e.prototype.readU64=function(){var e,t,n=(e=this.view,t=this.pos,4294967296*e.getUint32(t)+e.getUint32(t+4));return this.pos+=8,n},e.prototype.readI64=function(){var e=zn(this.view,this.pos);return this.pos+=8,e},e.prototype.readF32=function(){var e=this.view.getFloat32(this.pos);return this.pos+=4,e},e.prototype.readF64=function(){var e=this.view.getFloat64(this.pos);return this.pos+=8,e},e}();class wo{static write(e){let t=e.byteLength||e.length;const n=[];do{let e=127&t;t>>=7,t>0&&(e|=128),n.push(e)}while(t>0);t=e.byteLength||e.length;const o=new Uint8Array(n.length+t);return o.set(n,0),o.set(e,n.length),o.buffer}static parse(e){const t=[],n=new Uint8Array(e),o=[0,7,14,21,28];for(let r=0;r<e.byteLength;){let i,s=0,a=0;do{i=n[r+s],a|=(127&i)<<o[s],s++}while(s<Math.min(5,e.byteLength-r)&&0!=(128&i));if(0!=(128&i)&&s<5)throw new Error("Cannot read message size.");if(5===s&&i>7)throw new Error("Messages bigger than 2GB are not supported.");if(!(n.byteLength>=r+s+a))throw new Error("Incomplete message.");t.push(n.slice?n.slice(r+s,r+s+a):n.subarray(r+s,r+s+a)),r=r+s+a}return t}}const bo=new Uint8Array([145,hn.Ping]);class _o{constructor(e){this.name="messagepack",this.version=2,this.transferFormat=Tn.Binary,this._errorResult=1,this._voidResult=2,this._nonVoidResult=3,e=e||{},this._encoder=new so(e.extensionCodec,e.context,e.maxDepth,e.initialBufferSize,e.sortKeys,e.forceFloat32,e.ignoreUndefined,e.forceIntegerToFloat),this._decoder=new yo(e.extensionCodec,e.context,e.maxStrLength,e.maxBinLength,e.maxArrayLength,e.maxMapLength,e.maxExtLength)}parseMessages(e,t){if(!(n=e)||"undefined"==typeof ArrayBuffer||!(n instanceof ArrayBuffer||n.constructor&&"ArrayBuffer"===n.constructor.name))throw new Error("Invalid input for MessagePack hub protocol. Expected an ArrayBuffer.");var n;null===t&&(t=$t.instance);const o=wo.parse(e),r=[];for(const e of o){const n=this._parseMessage(e,t);n&&r.push(n)}return r}writeMessage(e){switch(e.type){case hn.Invocation:return this._writeInvocation(e);case hn.StreamInvocation:return this._writeStreamInvocation(e);case hn.StreamItem:return this._writeStreamItem(e);case hn.Completion:return this._writeCompletion(e);case hn.Ping:return wo.write(bo);case hn.CancelInvocation:return this._writeCancelInvocation(e);case hn.Close:return this._writeClose();case hn.Ack:return this._writeAck(e);case hn.Sequence:return this._writeSequence(e);default:throw new Error("Invalid message type.")}}_parseMessage(e,t){if(0===e.length)throw new Error("Invalid payload.");const n=this._decoder.decode(e);if(0===n.length||!(n instanceof Array))throw new Error("Invalid payload.");const o=n[0];switch(o){case hn.Invocation:return this._createInvocationMessage(this._readHeaders(n),n);case hn.StreamItem:return this._createStreamItemMessage(this._readHeaders(n),n);case hn.Completion:return this._createCompletionMessage(this._readHeaders(n),n);case hn.Ping:return this._createPingMessage(n);case hn.Close:return this._createCloseMessage(n);case hn.Ack:return this._createAckMessage(n);case hn.Sequence:return this._createSequenceMessage(n);default:return t.log(Ft.Information,"Unknown message type '"+o+"' ignored."),null}}_createCloseMessage(e){if(e.length<2)throw new Error("Invalid payload for Close message.");return{allowReconnect:e.length>=3?e[2]:void 0,error:e[1],type:hn.Close}}_createPingMessage(e){if(e.length<1)throw new Error("Invalid payload for Ping message.");return{type:hn.Ping}}_createInvocationMessage(e,t){if(t.length<5)throw new Error("Invalid payload for Invocation message.");const n=t[2];return n?{arguments:t[4],headers:e,invocationId:n,streamIds:[],target:t[3],type:hn.Invocation}:{arguments:t[4],headers:e,streamIds:[],target:t[3],type:hn.Invocation}}_createStreamItemMessage(e,t){if(t.length<4)throw new Error("Invalid payload for StreamItem message.");return{headers:e,invocationId:t[2],item:t[3],type:hn.StreamItem}}_createCompletionMessage(e,t){if(t.length<4)throw new Error("Invalid payload for Completion message.");const n=t[3];if(n!==this._voidResult&&t.length<5)throw new Error("Invalid payload for Completion message.");let o,r;switch(n){case this._errorResult:o=t[4];break;case this._nonVoidResult:r=t[4]}return{error:o,headers:e,invocationId:t[2],result:r,type:hn.Completion}}_createAckMessage(e){if(e.length<1)throw new Error("Invalid payload for Ack message.");return{sequenceId:e[1],type:hn.Ack}}_createSequenceMessage(e){if(e.length<1)throw new Error("Invalid payload for Sequence message.");return{sequenceId:e[1],type:hn.Sequence}}_writeInvocation(e){let t;return t=e.streamIds?this._encoder.encode([hn.Invocation,e.headers||{},e.invocationId||null,e.target,e.arguments,e.streamIds]):this._encoder.encode([hn.Invocation,e.headers||{},e.invocationId||null,e.target,e.arguments]),wo.write(t.slice())}_writeStreamInvocation(e){let t;return t=e.streamIds?this._encoder.encode([hn.StreamInvocation,e.headers||{},e.invocationId,e.target,e.arguments,e.streamIds]):this._encoder.encode([hn.StreamInvocation,e.headers||{},e.invocationId,e.target,e.arguments]),wo.write(t.slice())}_writeStreamItem(e){const t=this._encoder.encode([hn.StreamItem,e.headers||{},e.invocationId,e.item]);return wo.write(t.slice())}_writeCompletion(e){const t=e.error?this._errorResult:void 0!==e.result?this._nonVoidResult:this._voidResult;let n;switch(t){case this._errorResult:n=this._encoder.encode([hn.Completion,e.headers||{},e.invocationId,t,e.error]);break;case this._voidResult:n=this._encoder.encode([hn.Completion,e.headers||{},e.invocationId,t]);break;case this._nonVoidResult:n=this._encoder.encode([hn.Completion,e.headers||{},e.invocationId,t,e.result])}return wo.write(n.slice())}_writeCancelInvocation(e){const t=this._encoder.encode([hn.CancelInvocation,e.headers||{},e.invocationId]);return wo.write(t.slice())}_writeClose(){const e=this._encoder.encode([hn.Close,null]);return wo.write(e.slice())}_writeAck(e){const t=this._encoder.encode([hn.Ack,e.sequenceId]);return wo.write(t.slice())}_writeSequence(e){const t=this._encoder.encode([hn.Sequence,e.sequenceId]);return wo.write(t.slice())}_readHeaders(e){const t=e[1];if("object"!=typeof t)throw new Error("Invalid headers.");return t}}const So="function"==typeof TextDecoder?new TextDecoder("utf-8"):null,Co=So?So.decode.bind(So):function(e){let t=0;const n=e.length,o=[],r=[];for(;t<n;){const n=e[t++];if(0===n)break;if(0==(128&n))o.push(n);else if(192==(224&n)){const r=63&e[t++];o.push((31&n)<<6|r)}else if(224==(240&n)){const r=63&e[t++],i=63&e[t++];o.push((31&n)<<12|r<<6|i)}else if(240==(248&n)){let r=(7&n)<<18|(63&e[t++])<<12|(63&e[t++])<<6|63&e[t++];r>65535&&(r-=65536,o.push(r>>>10&1023|55296),r=56320|1023&r),o.push(r)}o.length>1024&&(r.push(String.fromCharCode.apply(null,o)),o.length=0)}return r.push(String.fromCharCode.apply(null,o)),r.join("")},Eo=Math.pow(2,32),Io=Math.pow(2,21)-1;function ko(e,t){return e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24}function To(e,t){return e[t]+(e[t+1]<<8)+(e[t+2]<<16)+(e[t+3]<<24>>>0)}function Ro(e,t){const n=To(e,t+4);if(n>Io)throw new Error(`Cannot read uint64 with high order part ${n}, because the result would exceed Number.MAX_SAFE_INTEGER.`);return n*Eo+To(e,t)}class Ao{constructor(e){this.batchData=e;const t=new Mo(e);this.arrayRangeReader=new Po(e),this.arrayBuilderSegmentReader=new Uo(e),this.diffReader=new Do(e),this.editReader=new xo(e,t),this.frameReader=new No(e,t)}updatedComponents(){return ko(this.batchData,this.batchData.length-20)}referenceFrames(){return ko(this.batchData,this.batchData.length-16)}disposedComponentIds(){return ko(this.batchData,this.batchData.length-12)}disposedEventHandlerIds(){return ko(this.batchData,this.batchData.length-8)}updatedComponentsEntry(e,t){const n=e+4*t;return ko(this.batchData,n)}referenceFramesEntry(e,t){return e+20*t}disposedComponentIdsEntry(e,t){const n=e+4*t;return ko(this.batchData,n)}disposedEventHandlerIdsEntry(e,t){const n=e+8*t;return Ro(this.batchData,n)}}class Do{constructor(e){this.batchDataUint8=e}componentId(e){return ko(this.batchDataUint8,e)}edits(e){return e+4}editsEntry(e,t){return e+16*t}}class xo{constructor(e,t){this.batchDataUint8=e,this.stringReader=t}editType(e){return ko(this.batchDataUint8,e)}siblingIndex(e){return ko(this.batchDataUint8,e+4)}newTreeIndex(e){return ko(this.batchDataUint8,e+8)}moveToSiblingIndex(e){return ko(this.batchDataUint8,e+8)}removedAttributeName(e){const t=ko(this.batchDataUint8,e+12);return this.stringReader.readString(t)}}class No{constructor(e,t){this.batchDataUint8=e,this.stringReader=t}frameType(e){return ko(this.batchDataUint8,e)}subtreeLength(e){return ko(this.batchDataUint8,e+4)}elementReferenceCaptureId(e){const t=ko(this.batchDataUint8,e+4);return this.stringReader.readString(t)}componentId(e){return ko(this.batchDataUint8,e+8)}elementName(e){const t=ko(this.batchDataUint8,e+8);return this.stringReader.readString(t)}textContent(e){const t=ko(this.batchDataUint8,e+4);return this.stringReader.readString(t)}markupContent(e){const t=ko(this.batchDataUint8,e+4);return this.stringReader.readString(t)}attributeName(e){const t=ko(this.batchDataUint8,e+4);return this.stringReader.readString(t)}attributeValue(e){const t=ko(this.batchDataUint8,e+8);return this.stringReader.readString(t)}attributeEventHandlerId(e){return Ro(this.batchDataUint8,e+12)}}class Mo{constructor(e){this.batchDataUint8=e,this.stringTableStartIndex=ko(e,e.length-4)}readString(e){if(-1===e)return null;{const n=ko(this.batchDataUint8,this.stringTableStartIndex+4*e),o=function(e,t){let n=0,o=0;for(let r=0;r<4;r++){const i=e[t+r];if(n|=(127&i)<<o,i<128)break;o+=7}return n}(this.batchDataUint8,n),r=n+((t=o)<128?1:t<16384?2:t<2097152?3:4),i=new Uint8Array(this.batchDataUint8.buffer,this.batchDataUint8.byteOffset+r,o);return Co(i)}var t}}class Po{constructor(e){this.batchDataUint8=e}count(e){return ko(this.batchDataUint8,e)}values(e){return e+4}}class Uo{constructor(e){this.batchDataUint8=e}offset(e){return 0}count(e){return ko(this.batchDataUint8,e)}values(e){return e+4}}class Lo{constructor(e){this.nextBatchId=2,this.logger=e}async processBatch(e,t,n){if(e<this.nextBatchId)return await this.completeBatch(n,e),void this.logger.log(wt.Debug,`Batch ${e} already processed. Waiting for batch ${this.nextBatchId}.`);if(e>this.nextBatchId)return this.fatalError?(this.logger.log(wt.Debug,`Received a new batch ${e} but errored out on a previous batch ${this.nextBatchId-1}`),void await n.send("OnRenderCompleted",this.nextBatchId-1,this.fatalError.toString())):void this.logger.log(wt.Debug,`Waiting for batch ${this.nextBatchId}. Batch ${e} not processed.`);try{this.nextBatchId++,this.logger.log(wt.Debug,`Applying batch ${e}.`),xe(On.Server,new Ao(t)),await this.completeBatch(n,e)}catch(t){throw this.fatalError=t.toString(),this.logger.log(wt.Error,`There was an error applying batch ${e}.`),n.send("OnRenderCompleted",e,t.toString()),t}}getLastBatchid(){return this.nextBatchId-1}async completeBatch(e,t){try{await e.send("OnRenderCompleted",t,null)}catch{this.logger.log(wt.Warning,`Failed to deliver completion notification for render '${t}'.`)}}}let Bo=!1;function Oo(){const e=document.querySelector("#blazor-error-ui");e&&(e.style.display="block"),Bo||(Bo=!0,document.querySelectorAll("#blazor-error-ui .reload").forEach((e=>{e.onclick=function(e){location.reload(),e.preventDefault()}})),document.querySelectorAll("#blazor-error-ui .dismiss").forEach((e=>{e.onclick=function(e){const t=document.querySelector("#blazor-error-ui");t&&(t.style.display="none"),e.preventDefault()}})))}class Fo{constructor(t,n,o,r){this._firstUpdate=!0,this._renderingFailed=!1,this._disposed=!1,this._circuitId=void 0,this._applicationState=n,this._componentManager=t,this._options=o,this._logger=r,this._renderQueue=new Lo(this._logger),this._dispatcher=e.attachDispatcher(this)}start(){if(this.isDisposedOrDisposing())throw new Error("Cannot start a disposed circuit.");return this._startPromise||(this._startPromise=this.startCore()),this._startPromise}updateRootComponents(e){var t,n;return this._firstUpdate?(this._firstUpdate=!1,null===(t=this._connection)||void 0===t?void 0:t.send("UpdateRootComponents",e,this._applicationState)):null===(n=this._connection)||void 0===n?void 0:n.send("UpdateRootComponents",e,"")}async startCore(){if(this._connection=await this.startConnection(),this._connection.state!==dn.Connected)return!1;const e=JSON.stringify(this._componentManager.initialComponents.map((e=>Lt(e))));if(this._circuitId=await this._connection.invoke("StartCircuit",Ve.getBaseURI(),Ve.getLocationHref(),e,this._applicationState||""),!this._circuitId)return!1;for(const e of this._options.circuitHandlers)e.onCircuitOpened&&e.onCircuitOpened();return!0}async startConnection(){var e,t;const n=new _o;n.name="blazorpack";const o=(new Bn).withUrl("_blazor").withHubProtocol(n);this._options.configureSignalR(o);const r=o.build();r.on("JS.AttachComponent",((e,t)=>Ae(On.Server,this.resolveElement(t),e,!1))),r.on("JS.BeginInvokeJS",this._dispatcher.beginInvokeJSFromDotNet.bind(this._dispatcher)),r.on("JS.EndInvokeDotNet",this._dispatcher.endInvokeDotNetFromJS.bind(this._dispatcher)),r.on("JS.ReceiveByteArray",this._dispatcher.receiveByteArray.bind(this._dispatcher)),r.on("JS.BeginTransmitStream",(e=>{const t=new ReadableStream({start:t=>{r.stream("SendDotNetStreamToJS",e).subscribe({next:e=>t.enqueue(e),complete:()=>t.close(),error:e=>t.error(e)})}});this._dispatcher.supplyDotNetStream(e,t)})),r.on("JS.RenderBatch",(async(e,t)=>{var n,o;this._logger.log(Ft.Debug,`Received render batch with id ${e} and ${t.byteLength} bytes.`),await this._renderQueue.processBatch(e,t,this._connection),null===(o=(n=this._componentManager).onAfterRenderBatch)||void 0===o||o.call(n,On.Server)})),r.on("JS.EndUpdateRootComponents",(e=>{var t,n;null===(n=(t=this._componentManager).onAfterUpdateRootComponents)||void 0===n||n.call(t,e)})),r.on("JS.EndLocationChanging",yt._internal.navigationManager.endLocationChanging),r.onclose((e=>{this._interopMethodsForReconnection=function(e){const t=C.get(e);if(!t)throw new Error(`Interop methods are not registered for renderer ${e}`);return C.delete(e),t}(On.Server),this._disposed||this._renderingFailed||this._options.reconnectionHandler.onConnectionDown(this._options.reconnectionOptions,e)})),r.on("JS.Error",(e=>{this._renderingFailed=!0,this.unhandledError(e),Oo()}));try{await r.start()}catch(e){if(this.unhandledError(e),"FailedToNegotiateWithServerError"===e.errorType)throw e;Oo(),e.innerErrors&&(e.innerErrors.some((e=>"UnsupportedTransportError"===e.errorType&&e.transport===kn.WebSockets))?this._logger.log(Ft.Error,"Unable to connect, please ensure you are using an updated browser that supports WebSockets."):e.innerErrors.some((e=>"FailedToStartTransportError"===e.errorType&&e.transport===kn.WebSockets))?this._logger.log(Ft.Error,"Unable to connect, please ensure WebSockets are available. A VPN or proxy may be blocking the connection."):e.innerErrors.some((e=>"DisabledTransportError"===e.errorType&&e.transport===kn.LongPolling))&&this._logger.log(Ft.Error,"Unable to initiate a SignalR connection to the server. This might be because the server is not configured to support WebSockets. For additional details, visit https://aka.ms/blazor-server-websockets-error."))}return(null===(t=null===(e=r.connection)||void 0===e?void 0:e.features)||void 0===t?void 0:t.inherentKeepAlive)&&this._logger.log(Ft.Warning,"Failed to connect via WebSockets, using the Long Polling fallback transport. This may be due to a VPN or proxy blocking the connection. To troubleshoot this, visit https://aka.ms/blazor-server-using-fallback-long-polling."),r}async disconnect(){var e;await(null===(e=this._connection)||void 0===e?void 0:e.stop())}async reconnect(){if(!this._circuitId)throw new Error("Circuit host not initialized.");return this._connection.state===dn.Connected||(this._connection=await this.startConnection(),this._interopMethodsForReconnection&&(k(On.Server,this._interopMethodsForReconnection),this._interopMethodsForReconnection=void 0),!!await this._connection.invoke("ConnectCircuit",this._circuitId)&&(this._options.reconnectionHandler.onConnectionUp(),!0))}beginInvokeDotNetFromJS(e,t,n,o,r){this.throwIfDispatchingWhenDisposed(),this._connection.send("BeginInvokeDotNetFromJS",e?e.toString():null,t,n,o||0,r)}endInvokeJSFromDotNet(e,t,n){this.throwIfDispatchingWhenDisposed(),this._connection.send("EndInvokeJSFromDotNet",e,t,n)}sendByteArray(e,t){this.throwIfDispatchingWhenDisposed(),this._connection.send("ReceiveByteArray",e,t)}throwIfDispatchingWhenDisposed(){if(this._disposed)throw new Error("The circuit associated with this dispatcher is no longer available.")}sendLocationChanged(e,t,n){return this._connection.send("OnLocationChanged",e,t,n)}sendLocationChanging(e,t,n,o){return this._connection.send("OnLocationChanging",e,t,n,o)}sendJsDataStream(e,t,n){return function(e,t,n,o){setTimeout((async()=>{let r=5,i=(new Date).valueOf();try{const s=t instanceof Blob?t.size:t.byteLength;let a=0,c=0;for(;a<s;){const l=Math.min(o,s-a),h=await mt(t,a,l);if(r--,r>1)await e.send("ReceiveJSDataChunk",n,c,h,null);else{if(!await e.invoke("ReceiveJSDataChunk",n,c,h,null))break;const t=(new Date).valueOf(),o=t-i;i=t,r=Math.max(1,Math.round(500/Math.max(1,o)))}a+=l,c++}}catch(t){await e.send("ReceiveJSDataChunk",n,-1,null,t.toString())}}),0)}(this._connection,e,t,n)}resolveElement(e){const t=w(e);if(t)return W(t,!0);const n=Number.parseInt(e);if(!Number.isNaN(n))return H(this._componentManager.resolveRootComponent(n));throw new Error(`Invalid sequence number or identifier '${e}'.`)}getRootComponentManager(){return this._componentManager}unhandledError(e){this._logger.log(Ft.Error,e),this.disconnect()}getDisconnectFormData(){const e=new FormData,t=this._circuitId;return e.append("circuitId",t),e}didRenderingFail(){return this._renderingFailed}isDisposedOrDisposing(){return void 0!==this._disposePromise}sendDisconnectBeacon(){if(this._disposed)return;const e=this.getDisconnectFormData();this._disposed=navigator.sendBeacon("_blazor/disconnect",e)}dispose(){return this._disposePromise||(this._disposePromise=this.disposeCore()),this._disposePromise}async disposeCore(){var e;if(!this._startPromise)return void(this._disposed=!0);await this._startPromise,this._disposed=!0,null===(e=this._connection)||void 0===e||e.stop();const t=this.getDisconnectFormData();fetch("_blazor/disconnect",{method:"POST",body:t});for(const e of this._options.circuitHandlers)e.onCircuitClosed&&e.onCircuitClosed()}}function $o(e){const t={...Ho,...e};return e&&e.reconnectionOptions&&(t.reconnectionOptions={...Ho.reconnectionOptions,...e.reconnectionOptions}),t}const Ho={configureSignalR:e=>{},logLevel:wt.Warning,initializers:void 0,circuitHandlers:[],reconnectionOptions:{maxRetries:8,retryIntervalMilliseconds:2e4,dialogId:"components-reconnect-modal"}};class Wo{constructor(e,t,n,o){this.maxRetries=t,this.document=n,this.logger=o,this.modal=this.document.createElement("div"),this.modal.id=e,this.maxRetries=t,this.modal.style.cssText=["position: fixed","top: 0","right: 0","bottom: 0","left: 0","z-index: 1050","display: none","overflow: hidden","background-color: #fff","opacity: 0.8","text-align: center","font-weight: bold","transition: visibility 0s linear 500ms"].join(";"),this.message=this.document.createElement("h5"),this.message.style.cssText="margin-top: 20px",this.button=this.document.createElement("button"),this.button.style.cssText="margin:5px auto 5px",this.button.textContent="Retry";const r=this.document.createElement("a");r.addEventListener("click",(()=>location.reload())),r.textContent="reload",this.reloadParagraph=this.document.createElement("p"),this.reloadParagraph.textContent="Alternatively, ",this.reloadParagraph.appendChild(r),this.modal.appendChild(this.message),this.modal.appendChild(this.button),this.modal.appendChild(this.reloadParagraph),this.loader=this.getLoader(),this.message.after(this.loader),this.button.addEventListener("click",(async()=>{this.show();try{await yt.reconnect()||this.rejected()}catch(e){this.logger.log(wt.Error,e),this.failed()}}))}show(){this.document.contains(this.modal)||this.document.body.appendChild(this.modal),this.modal.style.display="block",this.loader.style.display="inline-block",this.button.style.display="none",this.reloadParagraph.style.display="none",this.message.textContent="Attempting to reconnect to the server...",this.modal.style.visibility="hidden",setTimeout((()=>{this.modal.style.visibility="visible"}),0)}update(e){this.message.textContent=`Attempting to reconnect to the server: ${e} of ${this.maxRetries}`}hide(){this.modal.style.display="none"}failed(){this.button.style.display="block",this.reloadParagraph.style.display="none",this.loader.style.display="none";const e=this.document.createTextNode("Reconnection failed. Try "),t=this.document.createElement("a");t.textContent="reloading",t.setAttribute("href",""),t.addEventListener("click",(()=>location.reload()));const n=this.document.createTextNode(" the page if you're unable to reconnect.");this.message.replaceChildren(e,t,n)}rejected(){this.button.style.display="none",this.reloadParagraph.style.display="none",this.loader.style.display="none";const e=this.document.createTextNode("Could not reconnect to the server. "),t=this.document.createElement("a");t.textContent="Reload",t.setAttribute("href",""),t.addEventListener("click",(()=>location.reload()));const n=this.document.createTextNode(" the page to restore functionality.");this.message.replaceChildren(e,t,n)}getLoader(){const e=this.document.createElement("div");return e.style.cssText=["border: 0.3em solid #f3f3f3","border-top: 0.3em solid #3498db","border-radius: 50%","width: 2em","height: 2em","display: inline-block"].join(";"),e.animate([{transform:"rotate(0deg)"},{transform:"rotate(360deg)"}],{duration:2e3,iterations:1/0}),e}}class jo{constructor(e,t,n){this.dialog=e,this.maxRetries=t,this.document=n,this.document=n;const o=this.document.getElementById(jo.MaxRetriesId);o&&(o.innerText=this.maxRetries.toString())}show(){this.removeClasses(),this.dialog.classList.add(jo.ShowClassName)}update(e){const t=this.document.getElementById(jo.CurrentAttemptId);t&&(t.innerText=e.toString())}hide(){this.removeClasses(),this.dialog.classList.add(jo.HideClassName)}failed(){this.removeClasses(),this.dialog.classList.add(jo.FailedClassName)}rejected(){this.removeClasses(),this.dialog.classList.add(jo.RejectedClassName)}removeClasses(){this.dialog.classList.remove(jo.ShowClassName,jo.HideClassName,jo.FailedClassName,jo.RejectedClassName)}}jo.ShowClassName="components-reconnect-show",jo.HideClassName="components-reconnect-hide",jo.FailedClassName="components-reconnect-failed",jo.RejectedClassName="components-reconnect-rejected",jo.MaxRetriesId="components-reconnect-max-retries",jo.CurrentAttemptId="components-reconnect-current-attempt";class zo{constructor(e,t,n){this._currentReconnectionProcess=null,this._logger=e,this._reconnectionDisplay=t,this._reconnectCallback=n||yt.reconnect}onConnectionDown(e,t){if(!this._reconnectionDisplay){const t=document.getElementById(e.dialogId);this._reconnectionDisplay=t?new jo(t,e.maxRetries,document):new Wo(e.dialogId,e.maxRetries,document,this._logger)}this._currentReconnectionProcess||(this._currentReconnectionProcess=new qo(e,this._logger,this._reconnectCallback,this._reconnectionDisplay))}onConnectionUp(){this._currentReconnectionProcess&&(this._currentReconnectionProcess.dispose(),this._currentReconnectionProcess=null)}}class qo{constructor(e,t,n,o){this.logger=t,this.reconnectCallback=n,this.isDisposed=!1,this.reconnectDisplay=o,this.reconnectDisplay.show(),this.attemptPeriodicReconnection(e)}dispose(){this.isDisposed=!0,this.reconnectDisplay.hide()}async attemptPeriodicReconnection(e){for(let t=0;t<e.maxRetries;t++){this.reconnectDisplay.update(t+1);const n=0===t&&e.retryIntervalMilliseconds>qo.MaximumFirstRetryInterval?qo.MaximumFirstRetryInterval:e.retryIntervalMilliseconds;if(await this.delay(n),this.isDisposed)break;try{return await this.reconnectCallback()?void 0:void this.reconnectDisplay.rejected()}catch(e){this.logger.log(wt.Error,e)}}this.reconnectDisplay.failed()}delay(e){return new Promise((t=>setTimeout(t,e)))}}qo.MaximumFirstRetryInterval=3e3;class Jo{constructor(e=!0,t,n,o=0){this.singleRuntime=e,this.logger=t,this.webRendererId=o,this.afterStartedCallbacks=[],n&&this.afterStartedCallbacks.push(...n)}async importInitializersAsync(e,t){await Promise.all(e.map((e=>async function(e,n){const o=function(e){const t=document.baseURI;return t.endsWith("/")?`${t}${e}`:`${t}/${e}`}(n),r=await import(o);if(void 0!==r){if(e.singleRuntime){const{beforeStart:n,afterStarted:o,beforeWebAssemblyStart:s,afterWebAssemblyStarted:a,beforeServerStart:c,afterServerStarted:l}=r;let h=n;e.webRendererId===On.Server&&c&&(h=c),e.webRendererId===On.WebAssembly&&s&&(h=s);let d=o;return e.webRendererId===On.Server&&l&&(d=l),e.webRendererId===On.WebAssembly&&a&&(d=a),i(e,h,d,t)}return function(e,t,n){var r;const s=n[0],{beforeStart:a,afterStarted:c,beforeWebStart:l,afterWebStarted:h,beforeWebAssemblyStart:d,afterWebAssemblyStarted:u,beforeServerStart:p,afterServerStarted:f}=t,g=!(l||h||d||u||p||f||!a&&!c),m=g&&s.enableClassicInitializers;if(g&&!s.enableClassicInitializers)null===(r=e.logger)||void 0===r||r.log(wt.Warning,`Initializer '${o}' will be ignored because multiple runtimes are available. use 'before(web|webAssembly|server)Start' and 'after(web|webAssembly|server)Started?' instead.)`);else if(m)return i(e,a,c,n);if(function(e){e.webAssembly?e.webAssembly.initializers||(e.webAssembly.initializers={beforeStart:[],afterStarted:[]}):e.webAssembly={initializers:{beforeStart:[],afterStarted:[]}},e.circuit?e.circuit.initializers||(e.circuit.initializers={beforeStart:[],afterStarted:[]}):e.circuit={initializers:{beforeStart:[],afterStarted:[]}}}(s),d&&s.webAssembly.initializers.beforeStart.push(d),u&&s.webAssembly.initializers.afterStarted.push(u),p&&s.circuit.initializers.beforeStart.push(p),f&&s.circuit.initializers.afterStarted.push(f),h&&e.afterStartedCallbacks.push(h),l)return l(s)}(e,r,t)}function i(e,t,n,o){if(n&&e.afterStartedCallbacks.push(n),t)return t(...o)}}(this,e))))}async invokeAfterStartedCallbacks(e){const t=function(e){var t;return null===(t=I.get(e))||void 0===t?void 0:t[1]}(this.webRendererId);t&&await t,await Promise.all(this.afterStartedCallbacks.map((t=>t(e))))}}let Ko,Vo,Xo,Go,Yo,Qo,Zo,er;function tr(e){if(Go)throw new Error("Circuit options have already been configured.");if(Go)throw new Error("WebAssembly options have already been configured.");Ko=async function(e){const t=await e;Go=$o(t)}(e)}function nr(e){if(void 0!==Qo)throw new Error("Blazor Server has already started.");return Qo=new Promise(or.bind(null,e)),Qo}async function or(e,t,n){await Ko;const o=await async function(e){if(e.initializers)return await Promise.all(e.initializers.beforeStart.map((t=>t(e)))),new Jo(!1,void 0,e.initializers.afterStarted,On.Server);const t=await fetch("_blazor/initializers",{method:"GET",credentials:"include",cache:"no-cache"}),n=await t.json(),o=new Jo(!0,void 0,void 0,On.Server);return await o.importInitializersAsync(n,[e]),o}(Go);if(Vo=kt(document)||"",Yo=new _t(Go.logLevel),Xo=new Fo(e,Vo,Go,Yo),Yo.log(wt.Information,"Starting up Blazor server-side application."),yt.reconnect=async()=>!(Xo.didRenderingFail()||!await Xo.reconnect()&&(Yo.log(wt.Information,"Reconnection attempt to the circuit was rejected by the server. This may indicate that the associated state is no longer available on the server."),1)),yt.defaultReconnectionHandler=new zo(Yo),Go.reconnectionHandler=Go.reconnectionHandler||yt.defaultReconnectionHandler,yt._internal.navigationManager.listenForNavigationEvents(On.Server,((e,t,n)=>Xo.sendLocationChanged(e,t,n)),((e,t,n,o)=>Xo.sendLocationChanging(e,t,n,o))),yt._internal.forceCloseConnection=()=>Xo.disconnect(),yt._internal.sendJSDataStream=(e,t,n)=>Xo.sendJsDataStream(e,t,n),!await Xo.start())return Yo.log(wt.Error,"Failed to start the circuit."),void t();const r=()=>{Xo.sendDisconnectBeacon()};yt.disconnect=r,window.addEventListener("unload",r,{capture:!1,once:!0}),Yo.log(wt.Information,"Blazor server-side application started."),o.invokeAfterStartedCallbacks(yt),t()}async function rr(){if(!Qo)throw new Error("Cannot start the circuit until Blazor Server has started.");return!(!Xo||Xo.isDisposedOrDisposing())||(Zo?await Zo:(await Qo,(!Xo||!Xo.didRenderingFail())&&(Xo&&Xo.isDisposedOrDisposing()&&(Vo=kt(document)||"",Xo=new Fo(Xo.getRootComponentManager(),Vo,Go,Yo)),Zo=Xo.start(),async function(e){await e,Zo===e&&(Zo=void 0)}(Zo),Zo)))}function ir(e){if(Xo&&!Xo.isDisposedOrDisposing())return Xo.updateRootComponents(e);!async function(e){await Qo,await rr()&&Xo.updateRootComponents(e)}(e)}function sr(e){return er=e,er}var ar,cr;const lr=navigator,hr=lr.userAgentData&&lr.userAgentData.brands,dr=hr&&hr.length>0?hr.some((e=>"Google Chrome"===e.brand||"Microsoft Edge"===e.brand||"Chromium"===e.brand)):window.chrome,ur=null!==(cr=null===(ar=lr.userAgentData)||void 0===ar?void 0:ar.platform)&&void 0!==cr?cr:navigator.platform;function pr(e){return 0!==e.debugLevel&&(dr||navigator.userAgent.includes("Firefox"))}let fr,gr,mr,vr,yr,wr,br;const _r=Math.pow(2,32),Sr=Math.pow(2,21)-1;let Cr=null;function Er(e){return gr.getI32(e)}const Ir={load:function(e,t){return async function(e,t){const{dotnet:n}=await async function(e){if("undefined"==typeof WebAssembly||!WebAssembly.validate)throw new Error("This browser does not support WebAssembly.");let t="_framework/dotnet.js";if(e.loadBootResource){const n="dotnetjs",o=e.loadBootResource(n,"dotnet.js",t,"","js-module-dotnet");if("string"==typeof o)t=o;else if(o)throw new Error(`For a ${n} resource, custom loaders must supply a URI string.`)}const n=new URL(t,document.baseURI).toString();return await import(n)}(e),o=function(e,t){const n={maxParallelDownloads:1e6,enableDownloadRetry:!1,applicationEnvironment:e.environment},o={...window.Module||{},onConfigLoaded:async n=>{n.environmentVariables||(n.environmentVariables={}),"sharded"===n.globalizationMode&&(n.environmentVariables.__BLAZOR_SHARDED_ICU="1"),yt._internal.getApplicationEnvironment=()=>n.applicationEnvironment,null==t||t(n),br=await async function(e,t){var n,o,r;if(e.initializers)return await Promise.all(e.initializers.beforeStart.map((t=>t(e)))),new Jo(!1,void 0,e.initializers.afterStarted,On.WebAssembly);{const i=[e,null!==(o=null===(n=t.resources)||void 0===n?void 0:n.extensions)&&void 0!==o?o:{}],s=new Jo(!0,void 0,void 0,On.WebAssembly),a=Object.keys((null===(r=null==t?void 0:t.resources)||void 0===r?void 0:r.libraryInitializers)||{});return await s.importInitializersAsync(a,i),s}}(e,n)},onDownloadResourceProgress:kr,config:n,disableDotnet6Compatibility:!1,out:Rr,err:Ar};return o}(e,t);e.applicationCulture&&n.withApplicationCulture(e.applicationCulture),e.environment&&n.withApplicationEnvironment(e.environment),e.loadBootResource&&n.withResourceLoader(e.loadBootResource),n.withModuleConfig(o),e.configureRuntime&&e.configureRuntime(n),wr=await n.create()}(e,t)},start:function(){return async function(){if(!wr)throw new Error("The runtime must be loaded it gets configured.");const{MONO:t,BINDING:n,Module:o,setModuleImports:r,INTERNAL:i,getConfig:s,invokeLibraryInitializers:a}=wr;mr=o,fr=n,gr=t,yr=i,function(e){const t=ur.match(/^Mac/i)?"Cmd":"Alt";pr(e)&&console.info(`Debugging hotkey: Shift+${t}+D (when application has focus)`),document.addEventListener("keydown",(t=>{t.shiftKey&&(t.metaKey||t.altKey)&&"KeyD"===t.code&&(pr(e)?navigator.userAgent.includes("Firefox")?async function(){const e=await fetch(`_framework/debug?url=${encodeURIComponent(location.href)}&isFirefox=true`);200!==e.status&&console.warn(await e.text())}():dr?function(){const e=document.createElement("a");e.href=`_framework/debug?url=${encodeURIComponent(location.href)}`,e.target="_blank",e.rel="noopener noreferrer",e.click()}():console.error("Currently, only Microsoft Edge (80+), Google Chrome, or Chromium, are supported for debugging."):console.error("Cannot start debugging, because the application was not compiled with debugging enabled."))}))}(s()),yt.runtime=wr,yt._internal.dotNetCriticalError=Ar,r("blazor-internal",{Blazor:{_internal:yt._internal}});const c=await wr.getAssemblyExports("Microsoft.AspNetCore.Components.WebAssembly");return Object.assign(yt._internal,{dotNetExports:{...c.Microsoft.AspNetCore.Components.WebAssembly.Services.DefaultWebAssemblyJSRuntime}}),vr=e.attachDispatcher({beginInvokeDotNetFromJS:(e,t,n,o,r)=>{if(xr(),!o&&!t)throw new Error("Either assemblyName or dotNetObjectId must have a non null value.");const i=o?o.toString():t;yt._internal.dotNetExports.BeginInvokeDotNet(e?e.toString():null,i,n,r)},endInvokeJSFromDotNet:(e,t,n)=>{yt._internal.dotNetExports.EndInvokeJS(n)},sendByteArray:(e,t)=>{yt._internal.dotNetExports.ReceiveByteArrayFromJS(e,t)},invokeDotNetFromJS:(e,t,n,o)=>(xr(),yt._internal.dotNetExports.InvokeDotNet(e||null,t,null!=n?n:0,o))}),{invokeLibraryInitializers:a}}()},callEntryPoint:async function(){try{await wr.runMain(wr.getConfig().mainAssemblyName,[])}catch(e){console.error(e),Oo()}},toUint8Array:function(e){const t=Dr(e),n=Er(t),o=new Uint8Array(n);return o.set(mr.HEAPU8.subarray(t+4,t+4+n)),o},getArrayLength:function(e){return Er(Dr(e))},getArrayEntryPtr:function(e,t,n){return Dr(e)+4+t*n},getObjectFieldsBaseAddress:function(e){return e+8},readInt16Field:function(e,t){return n=e+(t||0),gr.getI16(n);var n},readInt32Field:function(e,t){return Er(e+(t||0))},readUint64Field:function(e,t){return function(e){const t=e>>2,n=mr.HEAPU32[t+1];if(n>Sr)throw new Error(`Cannot read uint64 with high order part ${n}, because the result would exceed Number.MAX_SAFE_INTEGER.`);return n*_r+mr.HEAPU32[t]}(e+(t||0))},readFloatField:function(e,t){return n=e+(t||0),gr.getF32(n);var n},readObjectField:function(e,t){return Er(e+(t||0))},readStringField:function(e,t,n){const o=Er(e+(t||0));if(0===o)return null;if(n){const e=fr.unbox_mono_obj(o);return"boolean"==typeof e?e?"":null:e}return fr.conv_string(o)},readStructField:function(e,t){return e+(t||0)},beginHeapLock:function(){return xr(),Cr=Nr.create(),Cr},invokeWhenHeapUnlocked:function(e){Cr?Cr.enqueuePostReleaseAction(e):e()}};function kr(e,t){const n=e/t*100;document.documentElement.style.setProperty("--blazor-load-percentage",`${n}%`),document.documentElement.style.setProperty("--blazor-load-percentage-text",`"${Math.floor(n)}%"`)}const Tr=["DEBUGGING ENABLED"],Rr=e=>Tr.indexOf(e)<0&&console.log(e),Ar=e=>{console.error(e||"(null)"),Oo()};function Dr(e){return e+12}function xr(){if(Cr)throw new Error("Assertion failed - heap is currently locked")}class Nr{enqueuePostReleaseAction(e){this.postReleaseActions||(this.postReleaseActions=[]),this.postReleaseActions.push(e)}release(){var e;if(Cr!==this)throw new Error("Trying to release a lock which isn't current");for(yr.mono_wasm_gc_unlock(),Cr=null;null===(e=this.postReleaseActions)||void 0===e?void 0:e.length;)this.postReleaseActions.shift()(),xr()}static create(){return yr.mono_wasm_gc_lock(),new Nr}}class Mr{constructor(e){this.batchAddress=e,this.arrayRangeReader=Pr,this.arrayBuilderSegmentReader=Ur,this.diffReader=Lr,this.editReader=Br,this.frameReader=Or}updatedComponents(){return er.readStructField(this.batchAddress,0)}referenceFrames(){return er.readStructField(this.batchAddress,Pr.structLength)}disposedComponentIds(){return er.readStructField(this.batchAddress,2*Pr.structLength)}disposedEventHandlerIds(){return er.readStructField(this.batchAddress,3*Pr.structLength)}updatedComponentsEntry(e,t){return Fr(e,t,Lr.structLength)}referenceFramesEntry(e,t){return Fr(e,t,Or.structLength)}disposedComponentIdsEntry(e,t){const n=Fr(e,t,4);return er.readInt32Field(n)}disposedEventHandlerIdsEntry(e,t){const n=Fr(e,t,8);return er.readUint64Field(n)}}const Pr={structLength:8,values:e=>er.readObjectField(e,0),count:e=>er.readInt32Field(e,4)},Ur={structLength:12,values:e=>{const t=er.readObjectField(e,0),n=er.getObjectFieldsBaseAddress(t);return er.readObjectField(n,0)},offset:e=>er.readInt32Field(e,4),count:e=>er.readInt32Field(e,8)},Lr={structLength:4+Ur.structLength,componentId:e=>er.readInt32Field(e,0),edits:e=>er.readStructField(e,4),editsEntry:(e,t)=>Fr(e,t,Br.structLength)},Br={structLength:20,editType:e=>er.readInt32Field(e,0),siblingIndex:e=>er.readInt32Field(e,4),newTreeIndex:e=>er.readInt32Field(e,8),moveToSiblingIndex:e=>er.readInt32Field(e,8),removedAttributeName:e=>er.readStringField(e,16)},Or={structLength:36,frameType:e=>er.readInt16Field(e,4),subtreeLength:e=>er.readInt32Field(e,8),elementReferenceCaptureId:e=>er.readStringField(e,16),componentId:e=>er.readInt32Field(e,12),elementName:e=>er.readStringField(e,16),textContent:e=>er.readStringField(e,16),markupContent:e=>er.readStringField(e,16),attributeName:e=>er.readStringField(e,16),attributeValue:e=>er.readStringField(e,24,!0),attributeEventHandlerId:e=>er.readUint64Field(e,8)};function Fr(e,t,n){return er.getArrayEntryPtr(e,t,n)}class $r{constructor(e){this.componentManager=e}resolveRegisteredElement(e){const t=Number.parseInt(e);if(!Number.isNaN(t))return H(this.componentManager.resolveRootComponent(t))}getParameterValues(e){return this.componentManager.initialComponents[e].parameterValues}getParameterDefinitions(e){return this.componentManager.initialComponents[e].parameterDefinitions}getTypeName(e){return this.componentManager.initialComponents[e].typeName}getAssembly(e){return this.componentManager.initialComponents[e].assembly}getCount(){return this.componentManager.initialComponents.length}}let Hr,Wr,jr,zr,qr,Jr=!1,Kr=!1,Vr=!0,Xr=!1;const Gr=new Promise((e=>{qr=e}));let Yr;const Qr=new Promise((e=>{Yr=e}));let Zr;function ei(e){if(void 0!==zr)throw new Error("Blazor WebAssembly has already started.");return zr=new Promise(ti.bind(null,e)),zr}async function ti(e,t,n){(function(){if(window.parent!==window&&!window.opener&&window.frameElement){const e=window.sessionStorage&&window.sessionStorage["Microsoft.AspNetCore.Components.WebAssembly.Authentication.CachedAuthSettings"],t=e&&JSON.parse(e);return t&&t.redirect_uri&&location.href.startsWith(t.redirect_uri)}return!1})()&&await new Promise((()=>{}));const o=ni();!function(e){const t=D;D=(e,n,o)=>{((e,t,n)=>{const o=De(e);(null==o?void 0:o.eventDelegator.getHandler(t))&&Ir.invokeWhenHeapUnlocked(n)})(e,n,(()=>t(e,n,o)))}}(),yt._internal.applyHotReload=(e,t,n,o)=>{vr.invokeDotNetStaticMethod("Microsoft.AspNetCore.Components.WebAssembly","ApplyHotReloadDelta",e,t,n,o)},yt._internal.getApplyUpdateCapabilities=()=>vr.invokeDotNetStaticMethod("Microsoft.AspNetCore.Components.WebAssembly","GetApplyUpdateCapabilities"),yt._internal.invokeJSFromDotNet=oi,yt._internal.invokeJSJson=ri,yt._internal.endInvokeDotNetFromJS=ii,yt._internal.receiveWebAssemblyDotNetDataStream=si,yt._internal.receiveByteArray=ai;const r=sr(Ir);yt.platform=r,yt._internal.renderBatch=(e,t)=>{const n=Ir.beginHeapLock();try{xe(e,new Mr(t))}finally{n.release()}},yt._internal.navigationManager.listenForNavigationEvents(On.WebAssembly,(async(e,t,n)=>{await vr.invokeDotNetStaticMethodAsync("Microsoft.AspNetCore.Components.WebAssembly","NotifyLocationChanged",e,t,n)}),(async(e,t,n,o)=>{const r=await vr.invokeDotNetStaticMethodAsync("Microsoft.AspNetCore.Components.WebAssembly","NotifyLocationChangingAsync",t,n,o);yt._internal.navigationManager.endLocationChanging(e,r)}));const i=new $r(e);let s;yt._internal.registeredComponents={getRegisteredComponentsCount:()=>i.getCount(),getAssembly:e=>i.getAssembly(e),getTypeName:e=>i.getTypeName(e),getParameterDefinitions:e=>i.getParameterDefinitions(e)||"",getParameterValues:e=>i.getParameterValues(e)||""},yt._internal.getPersistedState=()=>Tt(document,Et)||"",yt._internal.getInitialComponentsUpdate=()=>Qr,yt._internal.updateRootComponents=e=>{var t;return null===(t=yt._internal.dotNetExports)||void 0===t?void 0:t.UpdateRootComponentsCore(e)},yt._internal.endUpdateRootComponents=t=>{var n;return null===(n=e.onAfterUpdateRootComponents)||void 0===n?void 0:n.call(e,t)},yt._internal.attachRootComponentToElement=(e,t,n)=>{const o=i.resolveRegisteredElement(e);o?Ae(n,o,t,!1):function(e,t,n){const o="::before";let r=!1;if(e.endsWith("::after"))e=e.slice(0,-7),r=!0;else if(e.endsWith(o))throw new Error(`The '${o}' selector is not supported.`);const i=w(e)||document.querySelector(e);if(!i)throw new Error(`Could not find any element matching selector '${e}'.`);Ae(n,W(i,!0),t,r)}(e,t,n)};try{await o,s=await r.start()}catch(e){throw new Error(`Failed to start platform. Reason: ${e}`)}r.callEntryPoint(),br.invokeAfterStartedCallbacks(yt),Kr=!0,t()}function ni(){return null!=jr||(jr=(async()=>{await Wr;const e=null!=Hr?Hr:{},t=null==Hr?void 0:Hr.configureRuntime;e.configureRuntime=e=>{null==t||t(e),Xr&&e.withEnvironmentVariable("__BLAZOR_WEBASSEMBLY_WAIT_FOR_ROOT_COMPONENTS","true")},await Ir.load(e,qr),Jr=!0})()),jr}function oi(t,n,o,r){const i=Ir.readStringField(t,0),s=Ir.readInt32Field(t,4),a=Ir.readStringField(t,8),c=Ir.readUint64Field(t,20);if(null!==a){const e=Ir.readUint64Field(t,12);if(0!==e)return vr.beginInvokeJSFromDotNet(e,i,a,s,c),0;{const e=vr.invokeJSFromDotNet(i,a,s,c);return null===e?0:fr.js_string_to_mono_string(e)}}{const t=e.findJSFunction(i,c).call(null,n,o,r);switch(s){case e.JSCallResultType.Default:return t;case e.JSCallResultType.JSObjectReference:return e.createJSObjectReference(t).__jsObjectId;case e.JSCallResultType.JSStreamReference:{const n=e.createJSStreamReference(t),o=JSON.stringify(n);return fr.js_string_to_mono_string(o)}case e.JSCallResultType.JSVoidResult:return null;default:throw new Error(`Invalid JS call result type '${s}'.`)}}}function ri(e,t,n,o,r){return 0!==r?(vr.beginInvokeJSFromDotNet(r,e,o,n,t),null):vr.invokeJSFromDotNet(e,o,n,t)}function ii(e,t,n){vr.endInvokeDotNetFromJS(e,t,n)}function si(e,t,n,o){!function(e,t,n,o,r){let i=vt.get(t);if(!i){const n=new ReadableStream({start(e){vt.set(t,e),i=e}});e.supplyDotNetStream(t,n)}r?(i.error(r),vt.delete(t)):0===o?(i.close(),vt.delete(t)):i.enqueue(n.length===o?n:n.subarray(0,o))}(vr,e,t,n,o)}function ai(e,t){vr.receiveByteArray(e,t)}function ci(e,t){t.namespaceURI?e.setAttributeNS(t.namespaceURI,t.name,t.value):e.setAttribute(t.name,t.value)}Wr=new Promise((e=>{Zr=e}));const li="data-permanent";var hi,di;!function(e){e[e.None=0]="None",e[e.Some=1]="Some",e[e.Infinite=2]="Infinite"}(hi||(hi={})),function(e){e.Keep="keep",e.Update="update",e.Insert="insert",e.Delete="delete"}(di||(di={}));class ui{static create(e,t,n){return 0===t&&n===e.length?e:new ui(e,t,n)}constructor(e,t,n){this.source=e,this.startIndex=t,this.length=n}item(e){return this.source.item(e+this.startIndex)}forEach(e,t){for(let t=0;t<this.length;t++)e(this.item(t),t,this)}}let pi=null;function fi(e,t){bi(t),gi(e,t)}function gi(e,t){var n;let o;o=e instanceof Node?e:null!==(n=K(e.startExclusive))&&void 0!==n?n:e.startExclusive.parentNode;const r=Z(o)||Z(t);let i,s;r&&(W(o,!0),W(t,!0)),r?(i=new Ei(o),s=new Ei(t)):(i=o.childNodes,s=t.childNodes),e instanceof Node||(i=new Ci(i,e));const a=function(e,t,n){const o=function(e,t,n){const o=Math.min(e.length,t.length);for(let r=0;r<o;r++)if(n(e.item(r),t.item(r))!==hi.None)return r;return o}(e,t,n);if(o===e.length&&o===t.length)return{skipCount:o};const r=function(e,t,n,o,r){let i=e.length-1,s=t.length-1,a=0;for(;i>=n&&s>=o&&r(e.item(i),t.item(s))===hi.None;)i--,s--,a++;return a}(e,t,o,o,n),i=function(e){var t;const n=[];let o=e.length-1,r=(null===(t=e[o])||void 0===t?void 0:t.length)-1;for(;o>0||r>0;){const t=0===o?di.Insert:0===r?di.Delete:e[o][r];switch(n.unshift(t),t){case di.Keep:case di.Update:o--,r--;break;case di.Insert:r--;break;case di.Delete:o--}}return n}(function(e,t,n){const o=[],r=[],i=e.length,s=t.length;if(0===i&&0===s)return[];for(let e=0;e<=i;e++)(o[e]=Array(s+1))[0]=e,r[e]=Array(s+1);const a=o[0];for(let e=1;e<=s;e++)a[e]=e;for(let a=1;a<=i;a++)for(let i=1;i<=s;i++){const s=n(e.item(a-1),t.item(i-1)),c=o[a-1][i]+1,l=o[a][i-1]+1;let h;switch(s){case hi.None:h=o[a-1][i-1];break;case hi.Some:h=o[a-1][i-1]+1;break;case hi.Infinite:h=Number.MAX_VALUE}h<l&&h<c?(o[a][i]=h,r[a][i]=s===hi.None?di.Keep:di.Update):l<c?(o[a][i]=l,r[a][i]=di.Insert):(o[a][i]=c,r[a][i]=di.Delete)}return r}(e=ui.create(e,o,e.length-o-r),t=ui.create(t,o,t.length-o-r),n));return{skipCount:o,edits:i}}(i,s,wi);let c,l;r?(c=new Si(i.item(0)),l=new Si(s.item(0))):(c=new _i(i.item(0)),l=new _i(s.item(0)));for(let e=0;e<a.skipCount;e++)mi(c.current,l.current),c.advance(),l.advance();if(a.edits){const t=a.edits,n=t.length;for(let e=0;e<n;e++){const n=t[e];switch(n){case di.Keep:mi(c.current,l.current),c.advance(),l.advance();break;case di.Update:vi(c.current,l.current),c.advance(),l.advance();break;case di.Delete:{const e=c.current;c.advance(),h=e,Z(d=o)?q(h,W(document.createDocumentFragment()),0):d.removeChild(h);break}case di.Insert:{const e=l.current;l.advance(),yi(e,c.current,o);break}default:throw new Error(`Unexpected operation: '${n}'`)}}const r=e instanceof Node?null:e.endExclusive;for(;c.current!==r;)mi(c.current,l.current),c.advance(),l.advance();if(l.current)throw new Error("Updating the DOM failed because the sets of trailing nodes had inconsistent lengths.")}var h,d}function mi(e,t){switch(e.nodeType){case Node.TEXT_NODE:break;case Node.COMMENT_NODE:{const n=e,o=t,r=X(n),i=X(o);if(!r!=!i)throw new Error("Not supported: merging component comment nodes with non-component comment nodes");r&&(function(e,t){if(!Bt(e,t))throw new Error(`Cannot merge mismatching component descriptors:\n${JSON.stringify(e)}\nand\n${JSON.stringify(t)}`);if(e.uniqueId=t.uniqueId,"webassembly"===e.type||"auto"===e.type){const n=t;e.parameterDefinitions=n.parameterDefinitions,e.parameterValues=n.parameterValues}if("server"===e.type||"auto"===e.type){const n=t;e.sequence=n.sequence,e.descriptor=n.descriptor}}(r,i),we(n)||gi(e,t));break}case Node.ELEMENT_NODE:{const o=(n=t)instanceof HTMLSelectElement?n.selectedIndex:n instanceof HTMLInputElement?"checkbox"===n.type||"radio"===n.type?n.checked:n.getAttribute("value")||"":n instanceof HTMLTextAreaElement?n.value:null;!function(e,t){if(!function(e,t){const n=e.length;if(n!==t.length)return!1;for(let o=0;o<n;o++){const n=t.item(o),r=e.item(o);if(n.name!==r.name||n.value!==r.value)return!1}return!0}(e.attributes,t.attributes)){const r=new Map;for(const t of e.attributes)r.set(t.name,t);for(const n of t.attributes){const t=n.namespaceURI?e.getAttributeNodeNS(n.namespaceURI,n.localName):e.getAttributeNode(n.name);t?(t.value!==n.value&&ci(e,n),r.delete(t.name)):ci(e,n)}for(const t of r.values())n=e,(o=t).namespaceURI?n.removeAttributeNS(o.namespaceURI,o.localName):n.removeAttribute(o.name)}var n,o}(e,t),ae(e),function(e){return e.hasAttribute(li)}(e)||gi(e,t),null!==o&&function(e,t){e instanceof HTMLTextAreaElement&&e.value!==t?e.value=t:e instanceof HTMLSelectElement&&e.selectedIndex!==t?e.selectedIndex=t:e instanceof HTMLInputElement&&("checkbox"===e.type||"radio"===e.type?e.checked!==t&&(e.checked=t):e.value!==t&&(e.value=t))}(e,o);break}case Node.DOCUMENT_TYPE_NODE:break;default:throw new Error(`Not implemented: matching nodes of type ${e.nodeType}`)}var n}function vi(e,t){switch(e.nodeType){case Node.TEXT_NODE:case Node.COMMENT_NODE:e.textContent=t.textContent;break;default:throw new Error(`Not implemented: substituting nodes of type ${e.nodeType}`)}}function yi(e,t,n){Z(n)?function(e,t,n){const o=Y(t);let r;if(n){if(r=Array.prototype.indexOf.call(o,n),r<0)throw new Error("Could not find logical element in the parent logical node list")}else r=o.length;q(e,t,r)}(e,n,t):n.insertBefore(e,t);const o=document.createNodeIterator(e,NodeFilter.SHOW_COMMENT);for(;o.nextNode();){const e=X(o.referenceNode);e&&(null==pi||pi.registerComponent(e))}}function wi(e,t){if(e.nodeType!==t.nodeType)return hi.Infinite;if(Z(e)!==Z(t))return hi.Infinite;switch(e.nodeType){case Node.TEXT_NODE:return e.textContent===t.textContent?hi.None:hi.Some;case Node.COMMENT_NODE:{const n=X(e),o=X(t);return n||o?n&&o&&Bt(n,o)?hi.None:hi.Infinite:e.textContent===t.textContent?hi.None:hi.Some}case Node.ELEMENT_NODE:return e.tagName!==t.tagName?hi.Infinite:(n=t,e.getAttribute(li)!==n.getAttribute(li)?hi.Infinite:hi.None);case Node.DOCUMENT_TYPE_NODE:return hi.None;default:return hi.Infinite}var n}function bi(e){const t=St(e,"server"),n=St(e,"webassembly"),o=St(e,"auto"),r=[];for(const e of[...t,...n,...o]){const t=X(e.start);if(t)r.push(t);else{H(e);const{start:t,end:n}=e;t.textContent="bl-root",n&&(n.textContent="/bl-root"),r.push(e)}}return r}class _i{constructor(e){this.current=e}advance(){if(!this.current)throw new Error("Cannot advance beyond the end of the sibling array");this.current=this.current.nextSibling}}class Si{constructor(e){this.current=e}advance(){if(!this.current)throw new Error("Cannot advance beyond the end of the logical children array");const e=Q(this.current);this.current=e}}class Ci{item(e){return this.siblings.item(this.startIndex+e)}forEach(e,t){for(let n=0;n<this.length;n++)e.call(t,this.item(n),n,this)}constructor(e,t){this.siblings=e,this.startIndex=Array.prototype.indexOf.call(this.siblings,t.startExclusive)+1,this.endIndexExcl=Array.prototype.indexOf.call(this.siblings,t.endExclusive),this.length=this.endIndexExcl-this.startIndex}}class Ei{constructor(e){const t=Y(e);this.length=t.length,Object.assign(this,t)}item(e){return this[e]||null}forEach(e,t){for(let n=0;n<this.length;n++)e.call(t,this.item(n),n,this)}}const Ii="text/html; blazor-enhanced-nav=on";let ki,Ti,Ri,Ai=location.href;function Di(e){Ti=e,document.addEventListener("click",Ni),document.addEventListener("submit",Pi),window.addEventListener("popstate",Mi),Ie=xi}function xi(e,t){t?history.replaceState(null,"",e):history.pushState(null,"",e),Ui(e,!1)}function Ni(e){$e()||e.target instanceof Element&&!function(e){const t=e.closest("[data-enhance-nav]");if(t){const e=t.getAttribute("data-enhance-nav");return""===e||"true"===e.toLowerCase()}return!0}(e.target)||Ne(e,(e=>{const t=Pe(e);history.pushState(null,"",e),t?Ue(e):Ui(e,!0)}))}function Mi(e){$e()||Ui(location.href,!1)}function Pi(e){var t,n,o,r,i;if($e()||e.defaultPrevented)return;const s=e.target;if(s instanceof HTMLFormElement){if(!function(e){const t=e.getAttribute("data-enhance");return"string"==typeof t&&""===t||"true"===(null==t?void 0:t.toLowerCase())}(s))return;const a=(null===(t=e.submitter)||void 0===t?void 0:t.getAttribute("formmethod"))||s.method;if("dialog"===a)return void console.warn('A form cannot be enhanced when its method is "dialog".');const c=(null===(n=e.submitter)||void 0===n?void 0:n.getAttribute("formtarget"))||s.target;if(""!==c&&"_self"!==c)return void console.warn('A form cannot be enhanced when its target is different from the default value "_self".');e.preventDefault();const l=new URL((null===(o=e.submitter)||void 0===o?void 0:o.getAttribute("formaction"))||s.action,document.baseURI),h={method:a},d=new FormData(s),u=null===(r=e.submitter)||void 0===r?void 0:r.getAttribute("name"),p=e.submitter.getAttribute("value");u&&p&&d.append(u,p);const f=new URLSearchParams(d).toString();if("get"===h.method)l.search=f,history.pushState(null,"",l.toString());else{const t=(null===(i=e.submitter)||void 0===i?void 0:i.getAttribute("formenctype"))||s.enctype;"multipart/form-data"===t?h.body=d:(h.body=f,h.headers={"content-type":t,accept:Ii})}Ui(l.toString(),!1,h)}}async function Ui(e,t,n,o){Ri=!0,null==ki||ki.abort(),function(e,t){null==ke||ke(e,t)}(e,t),ki=new AbortController;const r=ki.signal,i=fetch(e,Object.assign({signal:r,mode:"no-cors",headers:{accept:Ii}},n));let s=null;if(await async function(e,t,n,o){let r;try{if(r=await e,!r.body)return void n(r,"");const t=r.headers.get("ssr-framing");if(!t){const e=await r.text();return void n(r,e)}let o=!0;await r.body.pipeThrough(new TextDecoderStream).pipeThrough(function(e){let t="";return new TransformStream({transform(n,o){if(t+=n,t.indexOf(e,t.length-n.length-e.length)>=0){const n=t.split(e);n.slice(0,-1).forEach((e=>o.enqueue(e))),t=n[n.length-1]}},flush(e){e.enqueue(t)}})}(`\x3c!--${t}--\x3e`)).pipeTo(new WritableStream({write(e){o?(o=!1,n(r,e)):(e=>{const t=document.createRange().createContextualFragment(e);for(;t.firstChild;)document.body.appendChild(t.firstChild)})(e)}}))}catch(e){if("AbortError"===e.name&&t.aborted)return;throw e}}(i,r,((t,r)=>{const i=!(null==n?void 0:n.method)||"get"===n.method,a=t.status>=200&&t.status<300;if("opaque"===t.type){if(i)return void Bi(e);throw new Error("Enhanced navigation does not support making a non-GET request to an endpoint that redirects to an external origin. Avoid enabling enhanced navigation for form posts that may perform external redirections.")}if(a&&"allow"!==t.headers.get("blazor-enhanced-nav")){if(i)return void Bi(e);throw new Error("Enhanced navigation does not support making a non-GET request to a non-Blazor endpoint. Avoid enabling enhanced navigation for forms that post to a non-Blazor endpoint.")}(t.redirected||o)&&((o?"get"===o:i)?history.replaceState(null,"",t.url):t.url!==location.href&&history.pushState(null,"",t.url),e=t.url);const c=t.headers.get("blazor-enhanced-nav-redirect-location");if(c)return void location.replace(c);t.redirected||i||!a||(function(e){const t=new URL(e.url),n=new URL(Ai);return t.protocol===n.protocol&&t.host===n.host&&t.port===n.port&&t.pathname===n.pathname}(t)?location.href!==Ai&&history.pushState(null,"",Ai):s=`Cannot perform enhanced form submission that changes the URL (except via a redirection), because then back/forward would not work. Either remove this form's 'action' attribute, or change its method to 'get', or do not mark it as enhanced.\nOld URL: ${location.href}\nNew URL: ${t.url}`),Ai=t.url;const l=t.headers.get("content-type");if((null==l?void 0:l.startsWith("text/html"))&&r){const e=(new DOMParser).parseFromString(r,"text/html");fi(document,e),Ti.documentUpdated()}else(null==l?void 0:l.startsWith("text/"))&&r?Li(r):a||r?i?Bi(e):Li(`Error: ${n.method} request to ${e} returned non-HTML content of type ${l||"unspecified"}.`):Li(`Error: ${t.status} ${t.statusText}`)})),!r.aborted){const t=e.indexOf("#");if(t>=0){const n=e.substring(t+1),o=document.getElementById(n);null==o||o.scrollIntoView()}if(Ri=!1,Ti.enhancedNavigationCompleted(),s)throw new Error(s)}}function Li(e){document.documentElement.textContent=e;const t=document.documentElement.style;t.fontFamily="consolas, monospace",t.whiteSpace="pre-wrap",t.padding="1rem"}function Bi(e){history.replaceState(null,"",e+"?"),location.replace(e)}let Oi,Fi=!0;class $i extends HTMLElement{connectedCallback(){var e;const t=this.parentNode;null===(e=t.parentNode)||void 0===e||e.removeChild(t),t.childNodes.forEach((e=>{if(e instanceof HTMLTemplateElement){const t=e.getAttribute("blazor-component-id");if(t)"true"!==e.getAttribute("enhanced-nav")&&ki||function(e,t){const n=function(e){const t=`bl:${e}`,n=document.createNodeIterator(document,NodeFilter.SHOW_COMMENT);let o=null;for(;(o=n.nextNode())&&o.textContent!==t;);if(!o)return null;const r=`/bl:${e}`;let i=null;for(;(i=n.nextNode())&&i.textContent!==r;);return i?{startMarker:o,endMarker:i}:null}(e);if(n){const{startMarker:e,endMarker:o}=n;if(Fi)fi({startExclusive:e,endExclusive:o},t);else{const n=o.parentNode,r=new Range;for(r.setStart(e,e.textContent.length),r.setEnd(o,0),r.deleteContents();t.childNodes[0];)n.insertBefore(t.childNodes[0],o)}Oi.documentUpdated()}}(t,e.content);else switch(e.getAttribute("type")){case"redirection":const t=Fe(e.content.textContent),n="form-post"===e.getAttribute("from");"true"===e.getAttribute("enhanced")&&Me(t)?Ui(t,!1,void 0,n?"post":"get"):n?t!==location.href&&location.assign(t):location.replace(t);break;case"error":Li(e.content.textContent||"Error")}}}))}}class Hi{constructor(e){var t;this._circuitInactivityTimeoutMs=e,this._rootComponentsBySsrComponentId=new Map,this._seenDescriptors=new Set,this._pendingOperationBatches={},this._nextOperationBatchId=1,this._nextSsrComponentId=1,this._didWebAssemblyFailToLoadQuickly=!1,this._isComponentRefreshPending=!1,this.initialComponents=[],t=()=>{this.rootComponentsMayRequireRefresh()},E.push(t)}onAfterRenderBatch(e){e===On.Server&&this.circuitMayHaveNoRootComponents()}onDocumentUpdated(){this.rootComponentsMayRequireRefresh()}onEnhancedNavigationCompleted(){this.rootComponentsMayRequireRefresh()}registerComponent(e){if(this._seenDescriptors.has(e))return;"webassembly"===e.type?this.startLoadingWebAssemblyIfNotStarted():"auto"===e.type&&this.startLoadingWebAssemblyIfNotStarted(1);const t=this._nextSsrComponentId++;this._seenDescriptors.add(e),this._rootComponentsBySsrComponentId.set(t,{descriptor:e,ssrComponentId:t})}unregisterComponent(e){this._seenDescriptors.delete(e.descriptor),this._rootComponentsBySsrComponentId.delete(e.ssrComponentId),this.circuitMayHaveNoRootComponents()}async startLoadingWebAssemblyIfNotStarted(e){if(void 0!==jr)return;Xr=!0;const t=ni(),n=await Gr;void 0!==e&&(n.maxParallelDownloads=e),function(e){if(!e.cacheBootResources)return!1;const t=Wi(e);if(!t)return!1;const n=window.localStorage.getItem(t.key);return t.value===n}(n)||this.onWebAssemblyFailedToLoadQuickly(),await t,function(e){const t=Wi(e);t&&window.localStorage.setItem(t.key,t.value)}(n),this.rootComponentsMayRequireRefresh()}onWebAssemblyFailedToLoadQuickly(){this._didWebAssemblyFailToLoadQuickly||(this._didWebAssemblyFailToLoadQuickly=!0,this.rootComponentsMayRequireRefresh())}startCircutIfNotStarted(){return void 0===Qo?nr(this):!Xo||Xo.isDisposedOrDisposing()?rr():void 0}async startWebAssemblyIfNotStarted(){this.startLoadingWebAssemblyIfNotStarted(),void 0===zr&&await ei(this)}rootComponentsMayRequireRefresh(){this._isComponentRefreshPending||(this._isComponentRefreshPending=!0,setTimeout((()=>{this._isComponentRefreshPending=!1,this.refreshRootComponents(this._rootComponentsBySsrComponentId.values())}),0))}circuitMayHaveNoRootComponents(){if(this.rendererHasExistingOrPendingComponents(On.Server,"server","auto"))return clearTimeout(this._circuitInactivityTimeoutId),void(this._circuitInactivityTimeoutId=void 0);void 0===this._circuitInactivityTimeoutId&&(this._circuitInactivityTimeoutId=setTimeout((()=>{this.rendererHasExistingOrPendingComponents(On.Server,"server","auto")||(async function(){await(null==Xo?void 0:Xo.dispose())}(),this._circuitInactivityTimeoutId=void 0)}),this._circuitInactivityTimeoutMs))}rendererHasComponents(e){const t=De(e);return void 0!==t&&t.getRootComponentCount()>0}rendererHasExistingOrPendingComponents(e,...t){if(this.rendererHasComponents(e))return!0;for(const{descriptor:{type:n},assignedRendererId:o}of this._rootComponentsBySsrComponentId.values()){if(o===e)return!0;if(void 0===o&&-1!==t.indexOf(n))return!0}return!1}refreshRootComponents(e){const t=new Map;for(const n of e){const e=this.determinePendingOperation(n);if(!e)continue;const o=n.assignedRendererId;if(!o)throw new Error("Descriptors must be assigned a renderer ID before getting used as root components");let r=t.get(o);r||(r=[],t.set(o,r)),r.push(e)}for(const[e,n]of t){const t={batchId:this._nextOperationBatchId++,operations:n};this._pendingOperationBatches[t.batchId]=t;const o=JSON.stringify(t);e===On.Server?ir(o):this.updateWebAssemblyRootComponents(o)}this.circuitMayHaveNoRootComponents()}updateWebAssemblyRootComponents(e){Vr?(Yr(e),Vr=!1):function(e){if(!zr)throw new Error("Blazor WebAssembly has not started.");if(!yt._internal.updateRootComponents)throw new Error("Blazor WebAssembly has not initialized.");Kr?yt._internal.updateRootComponents(e):async function(e){if(await zr,!yt._internal.updateRootComponents)throw new Error("Blazor WebAssembly has not initialized.");yt._internal.updateRootComponents(e)}(e)}(e)}resolveRendererIdForDescriptor(e){switch("auto"===e.type?this.getAutoRenderMode():e.type){case"server":return this.startCircutIfNotStarted(),On.Server;case"webassembly":return this.startWebAssemblyIfNotStarted(),On.WebAssembly;case null:return null}}getAutoRenderMode(){return this.rendererHasExistingOrPendingComponents(On.WebAssembly,"webassembly")?"webassembly":this.rendererHasExistingOrPendingComponents(On.Server,"server")?"server":Jr?"webassembly":this._didWebAssemblyFailToLoadQuickly?"server":null}determinePendingOperation(e){if(t=e.descriptor,document.contains(t.start)){if(void 0===e.assignedRendererId){if(Ri||"loading"===document.readyState)return null;const t=this.resolveRendererIdForDescriptor(e.descriptor);return null===t?null:T(t)?(be(e.descriptor.start,!0),e.assignedRendererId=t,e.uniqueIdAtLastUpdate=e.descriptor.uniqueId,{type:"add",ssrComponentId:e.ssrComponentId,marker:Lt(e.descriptor)}):null}return T(e.assignedRendererId)?e.uniqueIdAtLastUpdate===e.descriptor.uniqueId?null:(e.uniqueIdAtLastUpdate=e.descriptor.uniqueId,{type:"update",ssrComponentId:e.ssrComponentId,marker:Lt(e.descriptor)}):null}return e.hasPendingRemoveOperation?null:void 0===e.assignedRendererId?(this.unregisterComponent(e),null):T(e.assignedRendererId)?(be(e.descriptor.start,!1),e.hasPendingRemoveOperation=!0,{type:"remove",ssrComponentId:e.ssrComponentId}):null;var t}resolveRootComponent(e){const t=this._rootComponentsBySsrComponentId.get(e);if(!t)throw new Error(`Could not resolve a root component with SSR component ID '${e}'.`);return t.descriptor}onAfterUpdateRootComponents(e){const t=this._pendingOperationBatches[e];delete this._pendingOperationBatches[e];for(const e of t.operations)switch(e.type){case"remove":{const t=this._rootComponentsBySsrComponentId.get(e.ssrComponentId);t&&this.unregisterComponent(t);break}}}}function Wi(e){var t;const n=null===(t=e.resources)||void 0===t?void 0:t.hash,o=e.mainAssemblyName;return n&&o?{key:`blazor-resource-hash:${o}`,value:n}:null}class ji{constructor(){this._eventListeners=new Map}static create(e){const t=new ji;return e.addEventListener=t.addEventListener.bind(t),e.removeEventListener=t.removeEventListener.bind(t),t}addEventListener(e,t){let n=this._eventListeners.get(e);n||(n=new Set,this._eventListeners.set(e,n)),n.add(t)}removeEventListener(e,t){var n;null===(n=this._eventListeners.get(e))||void 0===n||n.delete(t)}dispatchEvent(e,t){const n=this._eventListeners.get(e);if(!n)return;const o={...t,type:e};for(const e of n)e(o)}}let zi,qi=!1;function Ji(e){var t,n,o,r;if(qi)throw new Error("Blazor has already started.");qi=!0,null!==(t=(e=e||{}).logLevel)&&void 0!==t||(e.logLevel=wt.Error),yt._internal.isBlazorWeb=!0,yt._internal.hotReloadApplied=()=>{Be()&&Oe(location.href,!0)},zi=new Hi(null!==(o=null===(n=null==e?void 0:e.ssr)||void 0===n?void 0:n.circuitInactivityTimeoutMs)&&void 0!==o?o:2e3);const i=ji.create(yt),s={documentUpdated:()=>{zi.onDocumentUpdated(),i.dispatchEvent("enhancedload",{})},enhancedNavigationCompleted(){zi.onEnhancedNavigationCompleted()}};return pi=zi,function(e,t){Oi=t,(null==e?void 0:e.disableDomPreservation)&&(Fi=!1),customElements.define("blazor-ssr-end",$i)}(null==e?void 0:e.ssr,s),(null===(r=null==e?void 0:e.ssr)||void 0===r?void 0:r.disableDomPreservation)||Di(s),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",Ki.bind(null,e)):Ki(e),Promise.resolve()}function Ki(e){const t=$o((null==e?void 0:e.circuit)||{});e.circuit=t;const n=async function(e,t){var n;const o=Tt(document,It,"initializers");if(!o)return new Jo(!1,t);const r=null!==(n=JSON.parse(atob(o)))&&void 0!==n?n:[],i=new Jo(!1,t);return await i.importInitializersAsync(r,[e]),i}(e,new _t(t.logLevel));tr(Vi(n,t)),function(e){if(Hr)throw new Error("WebAssembly options have already been configured.");!async function(e){const t=await e;Hr=t,Zr()}(e)}(Vi(n,(null==e?void 0:e.webAssembly)||{})),function(e){const t=bi(document);for(const e of t)null==pi||pi.registerComponent(e)}(),zi.onDocumentUpdated(),async function(e){const t=await e;await t.invokeAfterStartedCallbacks(yt)}(n)}async function Vi(e,t){return await e,t}yt.start=Ji,window.DotNet=e,document&&document.currentScript&&"false"!==document.currentScript.getAttribute("autostart")&&Ji()})()})();]]></con:responseContent>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1da9667c1e8ef0a"</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 24 Apr 2024 16:52:14 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:33 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="Response 2" id="cef2288f-f38c-41db-9c95-894020957c9b" httpResponseStatus="304" mediaType="text/javascript">
        <con:settings/>
        <con:responseContent/>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1da9667c1e8ef0a"</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 24 Apr 2024 16:52:14 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:29 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/Aspire.Dashboard.styles.css" method="GET" resourcePath="/Aspire.Dashboard.styles.css" id="8c7aa235-553e-4fc6-bb45-06da26d5d0f5">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="Response 1" id="95bed623-9e7d-4603-a801-4c82345d2d14" httpResponseStatus="200" mediaType="text/css" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:responseContent>@import '_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.bundle.scp.css';

/* _content/Aspire.Dashboard/Components/Controls/Chart/ChartContainer.razor.rz.scp.css */
[b-1bjnlhkpkw] .tab-label > svg {
    margin-right: 2px;
}

[b-1bjnlhkpkw] .metric-tab {
    margin-top: 10px;
}
/* _content/Aspire.Dashboard/Components/Controls/Chart/MetricTable.razor.rz.scp.css */
[b-yksh7mapie] fluent-switch::part(label) {
    width: 500px;
}
/* _content/Aspire.Dashboard/Components/Controls/GridValue.razor.rz.scp.css */
.container[b-ts2fpirho8] {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: calc((6 + (var(--design-unit) * var(--density))) * 1px);
    align-items: center;
}

.masking-enabled[b-ts2fpirho8] {
    grid-template-columns: 1fr auto auto;
}

[b-ts2fpirho8] .cellText {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}

[b-ts2fpirho8] .defaultHidden {
    opacity: 0;
    cursor: pointer;
}

[b-ts2fpirho8]:hover .defaultHidden, [b-ts2fpirho8]:focus-within .defaultHidden  {
    opacity: 1;  /* safari has a bug where hover is not always called on an invisible element, so we use opacity instead */
}
/* _content/Aspire.Dashboard/Components/Controls/LogViewer.razor.rz.scp.css */
.log-overflow[b-su4p9d2w5e] {
    --console-theme-black: #0C0C0C;
    --console-theme-blue: #0037DA;
    --console-theme-cyan: #3A96DD;
    --console-theme-green: #13A10E;
    --console-theme-magenta: #CD13E8;
    --console-theme-bg-red: #F80F24;
    --console-theme-fg-red: #C50F1F;
    --console-theme-white: #CCCCCC;
    --console-theme-yellow: #C19C00;

    --console-theme-bright-black: #767676;
    --console-theme-bright-blue: #3B78FF;
    --console-theme-bright-cyan: #61D6D6;
    --console-theme-bright-green: #16C60C;
    --console-theme-bright-magenta: #DA01FA;
    --console-theme-bright-red: #E74856;
    --console-theme-bright-white: #F2F2F2;
    --console-theme-bright-yellow: #F9F1A5;

    --line-number-color: #848484;
    --timestamp-color: var(--line-number-color);
    --console-background-color: var(--console-theme-black);
    --console-background-color-hover: #1D1D1D;
    --console-font-color: var(--console-theme-white);

    height: 100%;
    width: 100%;
    overflow: auto;
    background-color: var(--console-background-color);
}

[b-su4p9d2w5e] .log-container {
    background: var(--console-background-color);
    color: var(--console-font-color);
    font-family: 'Cascadia Mono', Consolas, monospace;
    font-size: 13px;
    margin: 16px 0 0 0;
    padding-bottom: 24px;
    line-height: 20px;
    overflow: visible;
    display: flex;
    flex-direction: column;
    width: 100%;
}

[b-su4p9d2w5e] .line-row-container {
    width: 100%;
    overflow: hidden;
}

[b-su4p9d2w5e] .line-row {
    cursor: text;
    padding: 0 12px 0 12px;
    white-space: pre-wrap;

    display: flex;
    flex-direction: row;
    flex-grow: 1;
}

[b-su4p9d2w5e] .line-row:hover {
    background-color: var(--console-background-color-hover);
}

[b-su4p9d2w5e] .line-area {
    flex-grow: 1;
    justify-content: flex-start;
    display: flex;
    flex-direction: row;
}

[b-su4p9d2w5e] .line-number {
    padding-left: 10px;
    min-width: 43px;
    text-align: right;
    align-self: flex-start;
    flex-shrink: 0;
    color: var(--line-number-color);
    user-select: none;
    cursor: default;
}

[b-su4p9d2w5e] .content {
    word-break: break-all;
    margin-left: 20px;
    position: relative;
    margin-right: 6px;
    user-select: text;
    cursor: text;
    white-space: pre-wrap;
    overflow-wrap: anywhere;
}

[b-su4p9d2w5e] .content .timestamp {
    color: var(--timestamp-color);
}

[b-su4p9d2w5e] .content a,
[b-su4p9d2w5e] .content a:active,
[b-su4p9d2w5e] .content a:visited {
    color: var(--console-font-color);
    text-decoration: none;
}

[b-su4p9d2w5e] .content a:hover {
    text-decoration: underline;
}

[b-su4p9d2w5e] .content > fluent-badge {
    user-select: none;
}

[b-su4p9d2w5e] .content > .timestamp + fluent-badge {
    margin-left: 1ch;
}

[b-su4p9d2w5e] .ansi-fg-black {
    color: var(--console-theme-black);
}

[b-su4p9d2w5e] .ansi-fg-blue {
    color: var(--console-theme-blue);
}

[b-su4p9d2w5e] .ansi-fg-cyan {
    color: var(--console-theme-cyan);
}

[b-su4p9d2w5e] .ansi-fg-green {
    color: var(--console-theme-green);
}

[b-su4p9d2w5e] .ansi-fg-magenta {
    color: var(--console-theme-magenta);
}

[b-su4p9d2w5e] .ansi-fg-red {
    color: var(--console-theme-fg-red);
}

[b-su4p9d2w5e] .ansi-fg-white {
    color: var(--console-theme-white);
}

[b-su4p9d2w5e] .ansi-fg-yellow {
    color: var(--console-theme-yellow);
}

[b-su4p9d2w5e] .ansi-fg-brightblack {
    color: var(--console-theme-bright-black);
}

[b-su4p9d2w5e] .ansi-fg-brightblue {
    color: var(--console-theme-bright-blue);
}

[b-su4p9d2w5e] .ansi-fg-brightcyan {
    color: var(--console-theme-bright-cyan);
}

[b-su4p9d2w5e] .ansi-fg-brightgreen {
    color: var(--console-theme-bright-green);
}

[b-su4p9d2w5e] .ansi-fg-brightmagenta {
    color: var(--console-theme-bright-magenta);
}

[b-su4p9d2w5e] .ansi-fg-brightred {
    color: var(--console-theme-bright-red);
}

[b-su4p9d2w5e] .ansi-fg-brightwhite {
    color: var(--console-theme-bright-white);
}

[b-su4p9d2w5e] .ansi-fg-brightyellow {
    color: var(--console-theme-bright-yellow);
}

[b-su4p9d2w5e] .ansi-bg-black {
    background-color: var(--console-theme-black);
}

[b-su4p9d2w5e] .ansi-bg-blue {
    background-color: var(--console-theme-blue);
}

[b-su4p9d2w5e] .ansi-bg-cyan {
    background-color: var(--console-theme-cyan);
}

[b-su4p9d2w5e] .ansi-bg-green {
    background-color: var(--console-theme-green);
}

[b-su4p9d2w5e] .ansi-bg-magenta {
    background-color: var(--console-theme-magenta);
}

[b-su4p9d2w5e] .ansi-bg-red {
    background-color: var(--console-theme-bg-red);
}

[b-su4p9d2w5e] .ansi-bg-white {
    background-color: var(--console-theme-white);
}

[b-su4p9d2w5e] .ansi-bg-yellow {
    background-color: var(--console-theme-yellow);
}
/* _content/Aspire.Dashboard/Components/Controls/PropertyGrid.razor.rz.scp.css */
/* _content/Aspire.Dashboard/Components/Controls/ResourceDetails.razor.rz.scp.css */
[b-88l0jjgwpg].resource-details-layout {
    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-areas:
        "toolbar"
        "main";
    overflow: auto;
    gap: calc(var(--design-unit) * 1px);
}

[b-88l0jjgwpg].resource-details-layout > fluent-toolbar {
    grid-area: toolbar;
}
/* _content/Aspire.Dashboard/Components/Controls/SpanDetails.razor.rz.scp.css */
[b-2ivj0yt7ua].span-details-layout {
    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-areas:
        "toolbar"
        "main";
    overflow: auto;
    gap: calc(var(--design-unit) * 1px);
}

[b-2ivj0yt7ua].span-details-layout > fluent-toolbar {
    grid-area: toolbar;
}

[b-2ivj0yt7ua] .property-grid-container h4 {
    padding: calc(var(--design-unit) * 3px);
    margin-top: calc(var(--design-unit) * 1px);
    margin-bottom: 0;
}

[b-2ivj0yt7ua] .event-attributes-header {
    font-weight: bold;
    margin: 5px 0;
}

/* _content/Aspire.Dashboard/Components/Controls/StructuredLogDetails.razor.rz.scp.css */
[b-no4ho7sxz6].structured-log-details-layout {
    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-areas:
        "toolbar"
        "main";
    overflow: auto;
    gap: calc(var(--design-unit) * 1px);
}

[b-no4ho7sxz6].structured-log-details-layout > fluent-toolbar {
    grid-area: toolbar;
}
/* _content/Aspire.Dashboard/Components/Controls/SummaryDetailsView.razor.rz.scp.css */
.summary-details-container[b-io5bvzhacu] {
    overflow: auto;
}

[b-io5bvzhacu] split-panels {
    height: 100%;
    width: 100%;
}

[b-io5bvzhacu] .summary-container {
    height: 100%;
    min-width: 100%;
    overflow: auto;
}

[b-io5bvzhacu] .details-container {
    height: 100%;
    overflow: auto;
    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-areas:
        "head"
        "main";
}

[b-io5bvzhacu] .details-container > header {
    height: auto;
    grid-row-start: 1;
    background-color: var(--neutral-layer-4);
    color: var(--neutral-foreground-rest);
    padding: calc(var(--design-unit) * 2px) calc(var(--design-unit) * 3px);
    display: grid;
    grid-template-columns: 1fr auto;
    grid-template-areas: "title actions";
    align-items: center;
}

[b-io5bvzhacu] .details-container > header fluent-button[appearance=stealth]:not(:hover)::part(control) {
    background-color: var(--neutral-layer-4);
}

[b-io5bvzhacu] .details-container > *:last-child {
    grid-row-start: 2;
}

[b-io5bvzhacu] .details-container > header > .details-header-title {
    grid-area: title;
    font-size: var(--type-ramp-plus-1-font-size);
    font-weight: bold;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}

[b-io5bvzhacu] .details-container > header > .header-actions {
    white-space: nowrap;
    grid-area: actions;
}
/* _content/Aspire.Dashboard/Components/Controls/UserProfile.razor.rz.scp.css */

/*
    Workaround for issue in fluent-anchored-region when the content
    is near the top-right corner of the screen. Addressed in
    https://github.com/microsoft/fluentui-blazor/pull/1795 which
    we can use instead when it is available
*/
.profile-menu-container[b-aqod7giadj]  .fluent-profile-menu fluent-anchored-region {
    transform: unset !important;
    left: unset;
    right: -4px;
}

[b-aqod7giadj] fluent-button[appearance=stealth]:not(:hover):not(:active)::part(control) {
    background-color: var(--neutral-layer-floating);
}

[b-aqod7giadj] fluent-button[appearance=stealth]:hover::part(control) {
    background-color: var(--neutral-fill-secondary-hover);
}

[b-aqod7giadj] .fluent-profile-menu > .fluent-persona {
    margin: 0 4px;
}

[b-aqod7giadj] .fluent-profile-menu > .fluent-persona > .initials {
    font-size: var(--type-ramp-minus-1-font-size);
}

[b-aqod7giadj] .full-name,
[b-aqod7giadj] .user-id {
    color: var(--neutral-foreground-rest);
    max-width: 200px;
    overflow-x: hidden;
    text-overflow: ellipsis;
}

[b-aqod7giadj] .full-name {
    font-size: var(--type-ramp-base-font-size);
}

[b-aqod7giadj] .user-id {
    font-size: var(--type-ramp-minus-1-font-size);
    font-weight: normal;
    max-width: 200px;
}

[b-aqod7giadj] .inner-persona-container {
    height: 100%;
}

[b-aqod7giadj] .fluent-persona.inner-persona {
    margin-right: 40px;
    align-items: normal;
}

/* The form takes up space and throws off the alignment if we don't change its display */
[b-aqod7giadj] .sign-out-form {
    display: flex;
}
/* _content/Aspire.Dashboard/Components/Layout/MainLayout.razor.rz.scp.css */
#blazor-error-ui[b-oo67yya9vw] {
    background: var(--highlight-bg);
    bottom: 0;
    box-shadow: 0 -1px 2px rgba(0, 0, 0, 0.2);
    display: none;
    left: 0;
    padding: 0.6rem 1.25rem 0.7rem 1.25rem;
    position: fixed;
    width: 100%;
    z-index: 1000;
    color: var(--error-ui-foreground-color);
}

#blazor-error-ui a[b-oo67yya9vw] {
    color: var(--error-ui-accent-foreground-color);
}

#blazor-error-ui .dismiss[b-oo67yya9vw] {
    cursor: pointer;
    position: absolute;
    right: 0.75rem;
    top: 0.5rem;
}

#blazor-error-ui .reload[b-oo67yya9vw] {
    color: var(--error-ui-accent-foreground-color);
}

[b-oo67yya9vw].layout {
    height: 100vh;
    width: 100vw;
    display: grid;
    grid-template-columns: auto 1fr;
    grid-template-rows: auto auto 1fr;
    grid-template-areas:
        "icon head"
        "nav messagebar"
        "nav main";
    background-color: var(--fill-color);
    color: var(--neutral-foreground-rest);
}

[b-oo67yya9vw].layout > .aspire-icon {
    grid-area: icon;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--neutral-layer-4);
}

[b-oo67yya9vw].layout > header {
    grid-area: head;
}

[b-oo67yya9vw].layout > .nav-menu-container {
    grid-area: nav;
    overflow-y: auto;
    background: var(--neutral-layer-4);
}

[b-oo67yya9vw].layout > .body-content {
    grid-area: main;
    overflow-x: auto; /* allow horizontal scrolling */
    border-left: 1px solid var(--neutral-stroke-rest);
}

[b-oo67yya9vw].layout > .messagebar-container {
    grid-area: messagebar;
    border-top: 1px solid var(--neutral-stroke-rest);
    border-left: 1px solid var(--neutral-stroke-rest);
}

[b-oo67yya9vw] .header-right {
    margin-left: auto;
}

[b-oo67yya9vw].layout > header > .header-gutters > fluent-button[appearance=stealth]:not(:hover)::part(control),
[b-oo67yya9vw].layout > header > .header-gutters > fluent-anchor[appearance=stealth]:not(:hover)::part(control),
[b-oo67yya9vw].layout > header > .header-gutters > fluent-anchor[appearance=stealth].logo::part(control),
[b-oo67yya9vw].layout > .aspire-icon fluent-anchor[appearance=stealth].logo::part(control) {
    background-color: var(--neutral-layer-4);
}

[b-oo67yya9vw].layout > header {
    background-color: var(--neutral-layer-4);
    margin-bottom: 0;
}

[b-oo67yya9vw].layout > header > .header-gutters > fluent-anchor {
    font-size: var(--type-ramp-plus-2-font-size);
}

[b-oo67yya9vw] .aspire-icon fluent-anchor.logo::part(control) {
    padding: 0;
    border: none;
}

[b-oo67yya9vw] .aspire-icon fluent-anchor.logo,
[b-oo67yya9vw] .aspire-icon fluent-anchor.logo::part(control),
[b-oo67yya9vw] .aspire-icon fluent-anchor.logo::part(content) {
    height: 24px;
    width: 24px;
}

[b-oo67yya9vw].layout > header > .header-gutters {
    margin-left: 0;
}
/* _content/Aspire.Dashboard/Components/Pages/ConsoleLogs.razor.rz.scp.css */
[b-gdq2qhi767].resource-logs-layout {
    display: grid;
    grid-template-rows: auto auto 1fr;
    height: 100%;
    width: 100%;
    grid-template-areas:
        "head"
        "toolbar"
        "main";
    gap: calc(var(--design-unit) * 2px);
}

[b-gdq2qhi767].resource-logs-layout > h1 {
    grid-area: head;
}

[b-gdq2qhi767].resource-logs-layout > fluent-toolbar {
    grid-area: toolbar;
    padding: var(--layout-toolbar-padding);
}

[b-gdq2qhi767].resource-logs-layout > .log-overflow {
    grid-area: main;
}
/* _content/Aspire.Dashboard/Components/Pages/Error.razor.rz.scp.css */
.error-backdrop[b-cpir0udpdf] {
    background-color: var(--neutral-layer-4);
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    width: 100vw;
}

[data-theme="dark"] .error-backdrop[b-cpir0udpdf] {
    background-color: var(--neutral-layer-3);
}

.error-container[b-cpir0udpdf] {
    --error: #FF8181;
    background-color: var(--neutral-layer-1);
    padding: calc((var(--design-unit) * 7px));
    border-radius: calc(var(--design-unit) * 2.5px);
    display: grid;
    grid-column-gap: calc(var(--design-unit) * 5px);
    grid-template-columns: auto 450px;
    grid-template-rows: auto;
    grid-template-areas:
        "logo entry";
    box-shadow: 0px 0px 15px 0px rgba(0,0,0,0.75);
}

.error-logo[b-cpir0udpdf] {
    grid-area: logo;
    display: flex;
    align-items: center;
    justify-content: center;
}

.error-entry-container[b-cpir0udpdf] {
    grid-area: entry;
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: calc(var(--design-unit) * 1px);

}

.version-info[b-cpir0udpdf] {
    position: fixed;
    right: calc(var(--design-unit) * 4px);
    bottom: calc(var(--design-unit) * 3px);
}
/* _content/Aspire.Dashboard/Components/Pages/Login.razor.rz.scp.css */
.token-backdrop[b-vvtvglsdza] {
    background-color: var(--neutral-layer-4);
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    width: 100vw;
}

[data-theme="dark"] .token-backdrop[b-vvtvglsdza] {
    background-color: var(--neutral-layer-3);
}

.token-form-container[b-vvtvglsdza] {
    --error: #FF8181;
    background-color: var(--neutral-layer-1);
    padding: calc((var(--design-unit) * 5px));
    border-radius: calc(var(--design-unit) * 2.5px);
    display: grid;
    grid-column-gap: calc(var(--design-unit) * 5px);
    grid-template-columns: auto 25em;
    grid-template-rows: auto;
    grid-template-areas:
        "logo entry";
    box-shadow: 0px 0px 15px 0px rgba(0,0,0,0.75);
}

.token-logo[b-vvtvglsdza] {
    grid-area: logo;
    display: flex;
    align-items: center;
    justify-content: center;
}

.token-entry-container[b-vvtvglsdza] {
    grid-area: entry;
    display: flex;
    flex-direction: column;
    justify-content: center;
    gap: calc(var(--design-unit) * 1px);

}

.token-entry-header[b-vvtvglsdza] {
    color: var(--accent-foreground-rest);
}

.token-entry-header h1[b-vvtvglsdza] {
    overflow: hidden;
    text-overflow: ellipsis;
    text-wrap: nowrap;
    margin-bottom: 1rem;
}

.token-entry[b-vvtvglsdza] {
    grid-area: entry;
}

[b-vvtvglsdza] .token-entry-text {
    width: 100%;
}

.token-entry-footer[b-vvtvglsdza] {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.token-validation[b-vvtvglsdza] {
    min-height: var(--type-ramp-base-line-height);
}

/* For the validation failed message that is not inside the FluentValidationMessage component */
.token-validation > .validation-message[b-vvtvglsdza] {
    color: var(--error);
    font-size: var(--type-ramp-minus-1-font-size);
    display: flex;
    align-items: center;
    column-gap: 4px;
}

.token-help-container[b-vvtvglsdza] {
    display: flex;
    flex-direction: column;
    gap: calc(var(--design-unit) * 2px);
    margin: calc(var(--design-unit) * 2px);
}

.token-help-container fluent-anchor[b-vvtvglsdza] {
    width: fit-content;
}

.token-help-container img[b-vvtvglsdza] {
    width: auto;
    max-width: 100%;
}

.version-info[b-vvtvglsdza] {
    position: fixed;
    right: calc(var(--design-unit) * 4px);
    bottom: calc(var(--design-unit) * 3px);
}
/* _content/Aspire.Dashboard/Components/Pages/Metrics.razor.rz.scp.css */
.empty-content[b-1niogo26bg] {
    width: 100%;
    height: 100px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: 600;
}

/* Metrics chart SVG */
[b-1niogo26bg] .yaxislayer-above {
    transform: translate(-10px,0px);
}

[b-1niogo26bg] .xaxislayer-above {
    transform: translate(0px,10px);
}

[b-1niogo26bg] .metrics-chart {
    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-areas:
        "header"
        "chart";
    width: 100%;
    gap: calc(var(--design-unit) * 4px);
    padding-left: 40px;
}

[b-1niogo26bg] .metrics-chart-header {
    grid-area: header;
}

[b-1niogo26bg] .metrics-chart-container {
    grid-area: chart;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    row-gap: calc(var(--design-unit) * 4px);
    column-gap: calc(var(--design-unit) * 4px);
}

[b-1niogo26bg] .metrics-filters-container {
    width: 600px;
}

[b-1niogo26bg] .metrics-filters-section {
    margin-bottom: 15px;
}

[b-1niogo26bg] .dimension-popup {
    max-width: 500px;
    min-width: 100px;
    overflow-x: hidden;
}

[b-1niogo26bg] .fluent-popover-content {
    overflow-wrap: normal;
    word-break: normal;
    max-height: 400px;
    overflow-y: auto;
}

[b-1niogo26bg] .metrics-tree {
    min-width: auto;
    margin-right: 3px;
}

[b-1niogo26bg] .metrics-content {
    margin-left: 10px;
}

[b-1niogo26bg].metrics-layout {
    display: grid;
    grid-template-rows: auto auto 1fr;
    height: 100%;
    width: 100%;
    grid-template-areas:
        "head"
        "toolbar"
        "main";
    gap: calc(var(--design-unit) * 2px);
}

[b-1niogo26bg].metrics-layout > h1 {
    grid-area: head;
}

[b-1niogo26bg].metrics-layout > fluent-toolbar {
    grid-area: toolbar;
    padding: var(--layout-toolbar-padding);
}

[b-1niogo26bg].metrics-layout > .page-content-area {
    grid-area: main;
}

.page-content-area[b-1niogo26bg] {
    height: 100%;
    width: 100%;
    overflow: auto;
}

[b-1niogo26bg] #plotly-chart-container {
    margin-left: -40px;
}

[b-1niogo26bg] .metric-info-icon {
    vertical-align: text-bottom;
    margin-left: 3px;
}
/* _content/Aspire.Dashboard/Components/Pages/NotFound.razor.rz.scp.css */
.error-stack[b-ghlziz0g9g] {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-top: calc(var(--design-unit) * 10px);
}

.error-code[b-ghlziz0g9g] {
    --error-code-font-size: 90px;
    font-size: var(--error-code-font-size);
    line-height: var(--error-code-font-size);
}

.error-description[b-ghlziz0g9g] {
    font-size: var(--type-ramp-plus-6-font-size);
    line-height: var(--type-ramp-plus-6-line-height);
}
/* _content/Aspire.Dashboard/Components/Pages/Resources.razor.rz.scp.css */
[b-x7u4xwueep] .resource-state-badge {
    padding: 0 3px;
    cursor: pointer;
}

[b-x7u4xwueep] fluent-toolbar > h1 {
    padding-left: calc(var(--design-unit) * 1.5px);
}

[b-x7u4xwueep].content-layout-with-toolbar > fluent-toolbar {
    padding: var(--layout-toolbar-padding);
}

[b-x7u4xwueep] .unread-logs-errors-link {
    vertical-align: middle;
    --unread-logs-badge-color: #ffffff;
}

[b-x7u4xwueep] .unread-logs-errors-link::part(control) {
    margin-left: 5px;
    padding: 0;
    flex-grow: 0;
    color: #ffffff;
}

[b-x7u4xwueep] .error-counter-badge {
    padding: 1px;
}

/* Forces the grid to always take up the width of its rows,
   and the rows to always take up the width of the cells.
   This fixes a few odd rendering things, but also enables us
   to set overflow-x: clip on the grid to prevent an odd visual
   glitch with the menu when it is at the far right of the viewport
*/
[b-x7u4xwueep] fluent-data-grid,
[b-x7u4xwueep] fluent-data-grid-row {
    min-width: min-content;
}

/* Ensures that any popups (e.g. menus) don't overflow past
   the right edge of the grid causing a visual flicker of
   the horizontal scrollbar appearing and disappearing
*/
[b-x7u4xwueep] fluent-data-grid {
    overflow-x: clip;
}
/* _content/Aspire.Dashboard/Components/Pages/StructuredLogs.razor.rz.scp.css */
[b-qyhwcts74n].logs-layout {
    display: grid;
    grid-template-rows: auto auto 1fr;
    height: 100%;
    width: 100%;
    grid-template-areas:
        "head"
        "toolbar"
        "main";
    gap: calc(var(--design-unit) * 2px);
}

[b-qyhwcts74n].logs-layout > h1 {
    grid-area: head;
}

[b-qyhwcts74n].logs-layout > fluent-toolbar {
    grid-area: toolbar;
    padding: var(--layout-toolbar-padding);
}

[b-qyhwcts74n].logs-layout > .summary-details-container {
    grid-area: main;
}

[b-qyhwcts74n] .log-row-critical,
[b-qyhwcts74n] .log-row-critical fluent-button[appearance=lightweight]:not(:hover)::part(control) {
    background-color: var(--log-critical);
}

[b-qyhwcts74n] .log-row-error,
[b-qyhwcts74n] .log-row-error fluent-button[appearance=lightweight]:not(:hover)::part(control) {
    background-color: var(--log-error);
}

[b-qyhwcts74n] .log-row-warning,
[b-qyhwcts74n] .log-row-warning fluent-button[appearance=lightweight]:not(:hover)::part(control){
    background-color: var(--log-warning);
}

[b-qyhwcts74n] .logs-summary-layout {
    display: grid;
    grid-template-rows: 1fr auto;
    height: 100%;
    width: 100%;
    grid-template-areas:
        "main"
        "foot";
    gap: calc(var(--design-unit) * 2px);
}

[b-qyhwcts74n] .logs-summary-layout > .logs-grid-container {
    grid-area: main;
    overflow: auto;
}

[b-qyhwcts74n] .logs-summary-layout > .total-items-footer {
    grid-area: foot;
}

[b-qyhwcts74n] .wrap {
    text-wrap: wrap;
    white-space: pre-line;
}
/* _content/Aspire.Dashboard/Components/Pages/TraceDetail.razor.rz.scp.css */
.empty-content[b-0he436ibgv] {
    width: 100%;
    height: 100px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: 600;
}

[b-0he436ibgv] .trace-id {
    color: var(--foreground-subtext-rest);
    padding-left: 0.5rem;
    font-size: 12px;
}

[b-0he436ibgv] .trace-view-grid {
    width: 100%;
}

[b-0he436ibgv] .trace-view-grid fluent-data-grid-row[row-type="default"]:hover .span-bar-label-detail {
    display: inline !important;
}

[b-0he436ibgv] .trace-view-grid fluent-data-grid-row[row-type="default"]:hover {
    background-color: var(--neutral-fill-hover);
}

[b-0he436ibgv] .trace-view-grid fluent-data-grid-row[row-type="default"] {
    cursor: pointer;
}

[b-0he436ibgv] .trace-view-grid fluent-data-grid-row[row-type="header"] {
    background: var(--fill-color);
    border-bottom: calc(var(--stroke-width) * 1px) solid var(--neutral-stroke-divider-rest);
}

[b-0he436ibgv] .trace-view-grid fluent-data-grid-row {
    padding: 0;
    border: 0;
    align-items: center;
}

[b-0he436ibgv] .trace-view-grid fluent-data-grid-cell {
    padding: 0;
    border: 0;
    border-radius: 0;
    vertical-align: middle;
}

[b-0he436ibgv] .trace-view-grid fluent-data-grid-cell[grid-column="2"] fluent-divider {
    display: none;
}

[b-0he436ibgv] .ticks {
    width: 100%;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    align-items: center;
}

[b-0he436ibgv] .ticks .tick {
    width: 1px;
    height: 32px;
    background: #d8d8d8;
    grid-row: 1;
}

[b-0he436ibgv] .ticks .end-tick {
    justify-self: end;
    grid-row: 1;
}

[b-0he436ibgv] .tick-label {
    margin-left: 0.25rem;
    margin-right: 0.25rem;
    white-space: nowrap;
    grid-row: 1;
}

[b-0he436ibgv] .span-collapse-symbol {
    display: inline-block;
    width: 20px;
    text-align: center;
    padding: 0px 5px;
    line-height: 28px;
    user-select: none;
}

[b-0he436ibgv] .span-name-container {
    margin-left: -3px;
    line-height: 28px;
}

[b-0he436ibgv] .span-container {
    grid-column: 1 / span 4;
    grid-row: 1;
    height: 100%;
    display: grid;
    z-index: 1;
    align-items: center;
}

[b-0he436ibgv] .span-container .span-bar {
    height: 15px;
    border-radius: 5px;
    grid-row: 1;
}

[b-0he436ibgv] .span-container .span-bar-label {
    font-size: 12px;
    color: var(--foreground-subtext-rest);
    padding: 0 0.5em;
    cursor: pointer;
    height: min-content;
}

[b-0he436ibgv] .span-container .span-bar-label-detail {
    display: none;
}

[b-0he436ibgv] .span-container .span-bar-label-right {
    grid-row: 1;
    grid-column: 3;
}

[b-0he436ibgv] .span-container .span-bar-label-left {
    grid-row: 1;
    grid-column: 1;
    justify-self: end;
}

[b-0he436ibgv] .uninstrumented-peer {
    padding-left: 0.25rem;
}

[b-0he436ibgv] .span-kind-icon {
    margin-right: 3px;
    vertical-align: text-bottom;
}

[b-0he436ibgv] .uninstrumented-peer-icon {
    vertical-align: text-bottom;
}

[b-0he436ibgv] .span-row-name {
    color: var(--foreground-subtext-rest);
    padding-left: 0.5rem;
    font-size: 12px;
}

[b-0he436ibgv] .selected-row .span-row-name,
[b-0he436ibgv] .selected-row fluent-data-grid-row[row-type="default"]:hover .span-row-name,
[b-0he436ibgv] fluent-data-grid-row[row-type="default"]:hover .span-row-name,
[b-0he436ibgv] .selected-row .span-container .span-bar-label,
[b-0he436ibgv] .selected-row fluent-data-grid-row[row-type="default"]:hover .span-container .span-bar-label,
[b-0he436ibgv] fluent-data-grid-row[row-type="default"]:hover .span-container .span-bar-label {
    color: var(--neutral-foreground-rest);
}

[b-0he436ibgv].trace-detail-layout {
    display: grid;
    grid-template-rows: auto auto 1fr;
    height: 100%;
    width: 100%;
    grid-template-areas:
        "head"
        "toolbar"
        "main";
    gap: calc(var(--design-unit) * 2px);
}

[b-0he436ibgv].trace-detail-layout > .trace-detail-header {
    grid-area: head;
}

[b-0he436ibgv].trace-detail-layout > fluent-toolbar {
    grid-area: toolbar;
    padding: var(--layout-toolbar-padding);
}

[b-0he436ibgv].trace-detail-layout > .summary-details-container {
    grid-area: main;
}

[b-0he436ibgv] .pane-details-title {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}
/* _content/Aspire.Dashboard/Components/Pages/Traces.razor.rz.scp.css */
.trace-id[b-fgllqjj151] {
    color: var(--foreground-subtext-rest);
    padding-left: 0.5rem;
    font-size: 12px;
}

.trace-tag[b-fgllqjj151] {
    display: flex;
    align-items: center;
    border: 1px solid rgb(217, 217, 217);
    padding: 2px 7px;
    font-size: 12px;
    background-color: var(--neutral-fill-rest);
    color: var(--neutral-foreground-rest);
}

.trace-service-tag[b-fgllqjj151] {
    border-left-width: 15px;
    margin-right: 7px;
}

[b-fgllqjj151].traces-layout {
    display: grid;
    grid-template-rows: auto auto 1fr auto;
    height: 100%;
    width: 100%;
    grid-template-areas:
        "head"
        "toolbar"
        "main"
        "foot";
    gap: calc(var(--design-unit) * 2px);
}

[b-fgllqjj151].traces-layout > h1 {
    grid-area: head;
}

[b-fgllqjj151].traces-layout > fluent-toolbar {
    grid-area: toolbar;
    padding: var(--layout-toolbar-padding);
}

[b-fgllqjj151].traces-layout > .datagrid-overflow-area {
    grid-area: main;
}

[b-fgllqjj151].traces-layout > .total-items-footer {
    grid-area: foot;
}

[b-fgllqjj151] fluent-progress-ring::part(background) {
    stroke: var(--neutral-fill-input-alt-active);
}

[b-fgllqjj151] fluent-progress-ring::part(determinate) {
    transition: unset;
    stroke-linecap: unset;
}

[b-fgllqjj151] .duration-container {
    display: flex;
    align-items: center;
}

[b-fgllqjj151] .duration-ring {
    width: 20px;
    height: 20px;
}

[b-fgllqjj151] .trace-duration {
    padding-left: 10px;
}
/* _content/Aspire.Dashboard/Components/ResourcesGridColumns/EndpointsColumnDisplay.razor.rz.scp.css */
[b-zwpfnaw5sm].endpoint-list {
    margin: 0;
    padding: 0;
}

[b-zwpfnaw5sm].endpoint-list li {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}</con:responseContent>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1daa17b681326bf"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 08 May 2024 19:10:36 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:33 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="Response 2" id="4df9678e-0485-4356-b47e-46d1439f4556" httpResponseStatus="304" mediaType="text/css">
        <con:settings/>
        <con:responseContent/>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1daa17b681326bf"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 08 May 2024 19:10:36 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:28 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.bundle.scp.css" method="GET" resourcePath="/_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.bundle.scp.css" id="06ffadd0-c310-4c2d-b665-d9114dc315fe">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="Response 1" id="f24432e9-7c05-4e12-a9ab-d2c0704dd0f2" httpResponseStatus="200" mediaType="text/css" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:responseContent>/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/AnchoredRegion/FluentAnchoredRegion.razor.rz.scp.css */
fluent-anchored-region[b-2ov9fhztky] {
    pointer-events: none;
}

    fluent-anchored-region > *[b-2ov9fhztky] {
        pointer-events: all;
    }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/AppBar/FluentAppBar.razor.rz.scp.css */
[b-dkkdhxy2t7] .fluent-appbar-item {
    width: 100%;
    --appbar-active-indicator-width: calc(var(--design-unit) * 0.5px);
    height: var(--appbar-item-height, 56px);
}

    [b-dkkdhxy2t7] .fluent-appbar-item:hover {
        background-color: var(--neutral-fill-secondary-rest);
    }

[b-dkkdhxy2t7] a[role="listitem"] {
    color: inherit;
    text-decoration: none;
    font-size: var(--type-ramp-minus-2-font-size);
    line-height: var(--type-ramp-minus-2-line-height);
    position: relative;
    display: inline-block;
    height: 100%;
    width: 100%;
}

[b-dkkdhxy2t7] a[role="listitem"] .stack-vertical {
    padding: calc(var(--design-unit) * 1px) calc(var(--appbar-active-indicator-width) + (var(--design-unit) * 1.5px));
    height: 100%;
}

[b-dkkdhxy2t7] div[part="label"] {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: 100%;
    text-align: center;
}

[b-dkkdhxy2t7] .fluent-appbar-item:not(.popover) a[role="listitem"].active::before {
    content: "";
    position: absolute;
    width: var(--appbar-active-indicator-width);
    height: 100%;
    background-color: var(--accent-fill-rest);
    border-radius: calc(var(--control-corner-radius) * 1px);
    top: 0;
    left: calc(var(--design-unit) * 0.5px);
    right: unset;
}

[dir='rtl'] *[b-dkkdhxy2t7]  .fluent-appbar-item:not(.popover) a[role="listitem"].active::before {
    right: calc(var(--design-unit) * 0.5px);
    left: unset;
}

[b-dkkdhxy2t7] .fluent-popover-content .fluent-popover-body {
    margin-top: 0 !important;
}

[b-dkkdhxy2t7] .fluent-appbar-item[role="listitem"]:hover svg[part="icon-rest"],
[b-dkkdhxy2t7] .fluent-appbar-item[role="listitem"]:not(:hover):not(.active) svg[part="icon-active"],
[b-dkkdhxy2t7] .fluent-appbar-item[role="listitem"]:not(:hover).active svg[part="icon-rest"],
[b-dkkdhxy2t7] .fluent-appbar-item[overflow] {
    display: none;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/AppBar/FluentAppBarItem.razor.rz.scp.css */
[b-eakb9mygz6].fluent-appbar-item:hover a[role="listitem"] svg[part="icon-rest"],
[b-eakb9mygz6].fluent-appbar-item:not(:hover) a[role="listitem"]:not(.active) svg[part="icon-active"],
[b-eakb9mygz6].fluent-appbar-item:not(:hover) a[role="listitem"].active svg[part="icon-rest"],
[b-eakb9mygz6].fluent-appbar-item[overflow] {
    display: none;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/BodyContent/FluentBodyContent.razor.rz.scp.css */
.body-content[b-9l28a7kahd] {
    margin: 0;
    overflow-y: auto;
    overflow-x: hidden;
    align-items: flex-start;
    height: 100%;
    width: 100%;
    font-family: var(--body-font);
    font-weight: normal;
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Button/FluentButton.razor.rz.scp.css */
.loading-button[b-x1200685t0] {
    position: relative;
}

    .loading-button[b-x1200685t0]  fluent-progress-ring {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        width: 16px;
        height: 16px;
        cursor: not-allowed;
    }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Card/FluentCard.razor.rz.scp.css */
fluent-card[b-6epdlk0xtt]  {
    padding: calc(var(--design-unit) * 5px);
}

.fluent-card-minimal-style[b-6epdlk0xtt]  {
    height: var(--card-height, 100%);
    width: var(--card-width, 100%);
    contain: content;
    background: var(--fill-color);
    color: var(--neutral-foreground-rest);
    border: calc(var(--stroke-width)* 1px) solid var(--neutral-stroke-layer-rest);
    border-radius: calc(var(--layer-corner-radius)* 1px);
    box-shadow: var(--elevation-shadow-card-rest);
    padding: calc(var(--design-unit)* 5px);
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/CollapsibleRegion/FluentCollapsibleRegion.razor.rz.scp.css */
.fluent-collapsible-region-container[b-hk0m26j2or] {
    overflow: hidden;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/CounterBadge/FluentCounterBadge.razor.rz.scp.css */
.fluentui-counterbadge-container[b-v8ui8wcemu] {
    display: inline;
    position: relative;
    height: 100%;
}

.fluentui-counterbadge[b-v8ui8wcemu] {
    position: absolute;
    z-index: 10;
    font-size: var(--type-ramp-minus-2-font-size);
    font-weight: 600;
    border-radius: 10000px;
    letter-spacing: 0;
    min-width: 10px;
    padding: 4px 4px;
    line-height: 1;
    text-align: center;
    text-indent: 0;
    white-space: nowrap;
    box-sizing: content-box;
    cursor: default;
}

    .fluentui-counterbadge[dot-only][b-v8ui8wcemu] {
        width: var(--design-unit);
        min-width: unset;
        height: var(--design-unit);
    }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/DataGrid/Columns/ColumnBase.razor.rz.scp.css */
/* Contains the title text and sort indicator, and expands to fill as much of the col width as it can */
.col-title[b-pxhtqoo8qd] {
    display: flex; /* So that we can make col-title-text expand as much as possible, and still hide overflow with ellipsis */
    min-width: 0px;
    flex-grow: 1;
    padding: 0;
}

/* If the column is sortable, its title is rendered as a button element for accessibility and to support navigation by tab */
button.col-title[b-pxhtqoo8qd] {
    border: none;
    background: none;
    position: relative;
    cursor: pointer;
}

.col-justify-center .col-title[b-pxhtqoo8qd] {
    justify-content: center;
}

.col-justify-end .col-title[b-pxhtqoo8qd], .col-justify-right .col-title[b-pxhtqoo8qd] {
    flex-direction: row-reverse; /* For end-justified cols, the sort indicator should appear before the title text */
}

/* We put the column title text in its own element primarily so that it can use text-overflow: ellipsis */
.col-title-text[b-pxhtqoo8qd] {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/DataGrid/FluentDataGrid.razor.rz.scp.css */
fluent-data-grid[b-ppmhrkw1mj] {
    --col-gap: 1rem;
}

[b-ppmhrkw1mj] .empty-content-row,
[b-ppmhrkw1mj] .loading-content-row {
    width: 100%;
    height: 100% !important ;
    display: flex;
    justify-content: center;
    align-items: center;
}

[b-ppmhrkw1mj] .empty-content-cell, 
[b-ppmhrkw1mj] .loading-content-cell {

    font-weight: 600;
}

.col-options[b-ppmhrkw1mj] {
    position: absolute;
    top: 2.2rem;
    background: var(--neutral-layer-2);
    border: 1px solid var(--neutral-layer-3);
    border-radius: 0.3rem;
    box-shadow: 0 3px 8px 1px var(--neutral-layer-4);
    padding: 1rem;
    z-index: 1;
}

[dir=rtl] .col-options[b-ppmhrkw1mj] {
    left: unset;
}

.col-justify-end .col-options[b-ppmhrkw1mj], .col-justify-right .col-options[b-ppmhrkw1mj] {
    left: unset;
    right: 0.2rem;
}

[dir=rtl] .col-justify-end .col-options[b-ppmhrkw1mj], [dir=rtl] .col-justify-right .col-options[b-ppmhrkw1mj] {
    right: unset;
    left: 0.2rem;
}

[b-ppmhrkw1mj] > fluent-data-grid-row > fluent-data-grid-cell.grid-cell-placeholder:after {
    content: '\2026'; /*horizontal ellipsis*/
    opacity: 0.75;
}



[b-ppmhrkw1mj] .col-width-draghandle {
    height: auto;
    width: calc(var(--design-unit) * 1px + 2px);
    right: calc(var(--col-gap)/2 - 0.5rem);
    border-top: none;
    border-left: calc(var(--stroke-width) * 1px) solid var(--neutral-stroke-divider-rest);
    cursor: col-resize;
}

.col-width-draghandle:hover[b-ppmhrkw1mj], .col-width-draghandle:active[b-ppmhrkw1mj] {
    background: var(--neutral-stroke-divider-rest);
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/DataGrid/FluentDataGridCell.razor.rz.scp.css */
fluent-data-grid-cell[b-w6qdxfylwy] {
    text-overflow: ellipsis;
}

.multiline-text[b-w6qdxfylwy] {
    white-space: inherit;
    overflow: auto;
    word-break: break-word;
}

.column-header[b-w6qdxfylwy] {
    display: flex;
    align-self: center;
    padding-inline: 0;
}

    .column-header.col-justify-end[b-w6qdxfylwy], .column-header.col-justify-right[b-w6qdxfylwy] {
        width: 100%;
        padding: 0;
        justify-content: end;
    }

    .column-header.col-justify-center[b-w6qdxfylwy] {
        width: 100%;
        padding: 0;
        justify-content: center;
    }

    .column-header[b-w6qdxfylwy] >  .col-sort-button {
        flex-grow: 1;
        padding-inline-end: 5px;
    }

        .column-header[b-w6qdxfylwy] >  .col-sort-button::part(content) {
            overflow: hidden;
            text-overflow: ellipsis;
        }

    .column-header.col-justify-end[b-w6qdxfylwy]  .col-title-text, .column-header.col-justify-right[b-w6qdxfylwy]  .col-title-text {
        text-align: end;
    }

    .column-header.col-justify-end[b-w6qdxfylwy]  .col-sort-button, .column-header.col-justify-right[b-w6qdxfylwy]  .col-sort-button {
        justify-content: end;
    }

    .column-header.col-justify-center[b-w6qdxfylwy]  .col-title-text {
        text-align: center;
    }

    .column-header.col-justify-end[b-w6qdxfylwy]  .col-sort-button, .column-header.col-justify-right[b-w6qdxfylwy]  .col-sort-button {
        justify-content: end;
        text-align: end;
    }

[b-w6qdxfylwy] .col-sort-button::part(control) {
    align-items: center;
    justify-content: start;
    overflow: hidden;
    text-overflow: ellipsis;
}

.col-justify-center[b-w6qdxfylwy]  .col-sort-button::part(control) {
    justify-content: center;
}

.col-justify-end[b-w6qdxfylwy]  .col-sort-button::part(control), .col-justify-right[b-w6qdxfylwy]  .col-sort-button::part(control) {
    justify-content: end;
}

.col-justify-center[b-w6qdxfylwy] {
    justify-self: center;
}

.col-justify-end[b-w6qdxfylwy], .col-justify-right[b-w6qdxfylwy] {
    justify-self: end;
    padding-inline-end: 20px;
}

    .col-justify-end .col-title[b-w6qdxfylwy], .col-justify-right .col-title[b-w6qdxfylwy] {
        justify-content: end;
    }

[b-w6qdxfylwy] .col-title {
    padding: 0 calc((12 + (var(--design-unit) * 2 * var(--density))) * 1px);
    display: flex;
    align-items: center;
}

[b-w6qdxfylwy] .col-title-text {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
    font-weight: 600;
}



/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/DataGrid/FluentDataGridRow.razor.rz.scp.css */
.header[b-upi3f9mbnn] {
    padding: 0;
    z-index: 3;
}

.sticky-header[b-upi3f9mbnn] {
    z-index: 3;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/DateTime/FluentCalendar.razor.rz.scp.css */
/*
    "Days" View
*/
.fluent-calendar[b-bgn9u4guxz] {
    --calendar-cell-size: 28px;
    --calendar-gap: 2px;
    font-family: var(--body-font);
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
    color: var(--neutral-foreground-rest);
    width: calc((var(--calendar-cell-size) + 2 * var(--calendar-gap)) * 7);
    height: calc((var(--calendar-cell-size) + 3 * var(--calendar-gap)) * 8);
    user-select: none;
}

    /* Header: month name and month navigation */
    .fluent-calendar[b-bgn9u4guxz]  .title {
        display: flex;
        padding: calc(var(--design-unit) * 2px);
        font-weight: 600;
        width: 100%;
        height: calc(var(--calendar-cell-size) + 4 * var(--calendar-gap));
        flex-direction: row;
        justify-content: space-between;
    }

        .fluent-calendar[b-bgn9u4guxz]  .title > .label {
            vertical-align: middle;
            cursor: pointer;
            width: 100%;
        }

            .fluent-calendar[b-bgn9u4guxz]  .title > .label[readonly] {
                cursor: default;
            }

    .fluent-calendar[b-bgn9u4guxz]  .change-period {
        float: right;
        display: flex;
        margin-right: -6px;
    }

        .fluent-calendar[b-bgn9u4guxz]  .change-period > .previous,
        .fluent-calendar[b-bgn9u4guxz]  .change-period > .next {
            width: var(--calendar-cell-size);
            height: var(--calendar-cell-size);
            margin-left: calc(2 * var(--calendar-gap));
            text-align: center;
            cursor: pointer;
        }

            .fluent-calendar[b-bgn9u4guxz]  .change-period > .previous:not([disabled]):hover,
            .fluent-calendar[b-bgn9u4guxz]  .change-period > .next:not([disabled]):hover {
                background: var(--neutral-fill-stealth-hover);
            }

            .fluent-calendar[b-bgn9u4guxz]  .change-period > .previous svg,
            .fluent-calendar[b-bgn9u4guxz]  .change-period > .next svg {
                width: 16px;
                fill: var(--neutral-fill-strong-focus);
            }

    /* List of days */
    .fluent-calendar[b-bgn9u4guxz]  .days {
        text-align: center;
    }

    .fluent-calendar[b-bgn9u4guxz]  .week-days,
    .fluent-calendar[b-bgn9u4guxz]  .week {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        grid-gap: var(--calendar-gap);
        border: 0px;
        padding: 0px;
    }

    .fluent-calendar[b-bgn9u4guxz]  .day,
    .fluent-calendar[b-bgn9u4guxz]  .week-day {
        border: 1px solid transparent;
        width: var(--calendar-cell-size);
        height: var(--calendar-cell-size);
        line-height: var(--calendar-cell-size);
        padding: 0px;
        box-sizing: initial;
    }

    /* Week names */
    .fluent-calendar[b-bgn9u4guxz]  .week-day {
        font-weight: 600;
    }

    /* Days */
    .fluent-calendar[b-bgn9u4guxz]  .day {
        border: calc(var(--stroke-width) * 1px) solid transparent;
        border-radius: calc(var(--control-corner-radius) * 1px);
        cursor: pointer;
    }

    .fluent-calendar[readonly][b-bgn9u4guxz]  .day {
        cursor: default;
    }

    .fluent-calendar:not([readonly])[b-bgn9u4guxz]  .day:not([disabled]):not([inactive]):not([today]):hover {
        background: var(--neutral-fill-stealth-hover);
    }

    /* Inactive and Disabled */
    .fluent-calendar[b-bgn9u4guxz]  .day[inactive] {
        color: var(--neutral-stroke-focus);
        cursor: default;
    }

    .fluent-calendar[b-bgn9u4guxz]  .day[disabled] {
        color: var(--neutral-stroke-focus);
        cursor: default;
    }

        .fluent-calendar[b-bgn9u4guxz]  .day[disabled]::before { /* strikethrough */
            transform: translate(-4px, 0px) rotate(45deg);
            content: "";
            display: inline-block;
            width: calc(var(--calendar-cell-size) * .8);
            height: calc(var(--stroke-width) * 1px);
            background: currentcolor;
            position: absolute;
            margin-top: calc(var(--calendar-cell-size) / 2);
            transform-origin: center center;
            z-index: 1;
        }

    /* Today */
    .fluent-calendar[b-bgn9u4guxz]  .day:not([selected])[today] {
        color: var(--foreground-on-accent-rest);
        background: var(--accent-fill-rest);
        border-radius: 50%;
        position: relative;
    }

    /* Selected */
    .fluent-calendar[b-bgn9u4guxz]  .day[selected] {
        color: var(--accent-fill-rest);
        border: 1px solid var(--accent-fill-rest);
        background: var(--fill-color);
    }

    /* Animations */
    .fluent-calendar[b-bgn9u4guxz]  .animation-running-down {
        animation: 0.2s fluent-text-animation-down-b-bgn9u4guxz ease-out;
    }

    .fluent-calendar[b-bgn9u4guxz]  .animation-running-up {
        animation: 0.2s fluent-text-animation-up-b-bgn9u4guxz ease-out;
    }

    .fluent-calendar[b-bgn9u4guxz]  .animation-none {
        animation: none;
    }

/*
    "Months" View
*/
.fluent-month[b-bgn9u4guxz] {
    --month-cell-size: 28px;
    --month-cell-height: 48px;
    --month-gap: 2px;
    font-family: var(--body-font);
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
    color: var(--neutral-foreground-rest);
    min-width: 220px;
    max-width: calc((var(--month-cell-size) + 2 * var(--month-gap)) * 7);
    user-select: none;
}

    /* Header: Year name and navigation arrows */
    .fluent-month[b-bgn9u4guxz]  .title {
        display: flex;
        padding: calc(var(--design-unit) * 2px);
        font-weight: 600;
        width: 100%;
        height: calc(var(--month-cell-size) + 4 * var(--month-gap));
        flex-direction: row;
        justify-content: space-between;
    }

        .fluent-month[b-bgn9u4guxz]  .title > .label {
            vertical-align: middle;
            cursor: pointer;
            width: 100%;
        }

            .fluent-month[b-bgn9u4guxz]  .title > .label[readonly] {
                cursor: default;
            }

    .fluent-month[b-bgn9u4guxz]  .change-period {
        float: right;
        display: flex;
        margin-right: -6px;
    }

        .fluent-month[b-bgn9u4guxz]  .change-period > .previous,
        .fluent-month[b-bgn9u4guxz]  .change-period > .next {
            width: var(--month-cell-size);
            height: var(--month-cell-size);
            margin-left: calc(2 * var(--month-gap));
            text-align: center;
            cursor: pointer;
        }

            .fluent-month[b-bgn9u4guxz]  .change-period > .previous:not([disabled]):hover,
            .fluent-month[b-bgn9u4guxz]  .change-period > .next:not([disabled]):hover {
                background: var(--neutral-fill-stealth-hover);
            }

            .fluent-month[b-bgn9u4guxz]  .change-period > .previous svg,
            .fluent-month[b-bgn9u4guxz]  .change-period > .next svg {
                width: 16px;
                fill: var(--neutral-fill-strong-focus);
            }

    /* List of months */
    .fluent-month[b-bgn9u4guxz]  .months {
        text-align: center;
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        grid-gap: var(--month-gap);
        width: 100%;
    }

    .fluent-month[b-bgn9u4guxz]  .month {
        display: flex;
        height: var(--month-cell-height);
        border: calc(var(--stroke-width) * 1px) solid transparent;
        border-radius: calc(var(--control-corner-radius) * 1px);
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    .fluent-month[readonly][b-bgn9u4guxz]  .month {
        cursor: default;
    }

    .fluent-month:not([readonly])[b-bgn9u4guxz]  .month:not([disabled]):hover {
        background: var(--neutral-fill-stealth-hover);
    }

    .fluent-month[b-bgn9u4guxz]  .month[selected] {
        color: var(--accent-fill-rest);
        border: 1px solid var(--accent-fill-rest);
        background: var(--fill-color);
    }

    .fluent-month[b-bgn9u4guxz]  .month[disabled] {
        color: var(--neutral-stroke-focus);
        cursor: default;
    }

    /* Animations */
    .fluent-month[b-bgn9u4guxz]  .animation-running-down {
        animation: 0.2s fluent-text-animation-down-b-bgn9u4guxz ease-out;
    }

    .fluent-month[b-bgn9u4guxz]  .animation-running-up {
        animation: 0.2s fluent-text-animation-up-b-bgn9u4guxz ease-out;
    }

    .fluent-month[b-bgn9u4guxz]  .animation-none {
        animation: none;
    }

/*
    "Years" View
*/
.fluent-year[b-bgn9u4guxz] {
    --year-cell-size: 28px;
    --year-cell-height: 48px;
    --year-gap: 2px;
    font-family: var(--body-font);
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
    color: var(--neutral-foreground-rest);
    min-width: 220px;
    max-width: calc((var(--year-cell-size) + 2 * var(--year-gap)) * 7);
    user-select: none;
}

    /* Header: Multiple years and navigation arrows */
    .fluent-year[b-bgn9u4guxz]  .title {
        display: flex;
        padding: calc(var(--design-unit) * 2px);
        font-weight: 600;
        width: 100%;
        height: calc(var(--year-cell-size) + 4 * var(--year-gap));
        flex-direction: row;
        justify-content: space-between;
    }

        .fluent-year[b-bgn9u4guxz]  .title > .label {
            vertical-align: middle;
        }

            .fluent-year[b-bgn9u4guxz]  .title > .label[readonly] {
                cursor: default;
            }

    .fluent-year[b-bgn9u4guxz]  .change-period {
        float: right;
        display: flex;
        margin-right: -6px;
    }

        .fluent-year[b-bgn9u4guxz]  .change-period > .previous,
        .fluent-year[b-bgn9u4guxz]  .change-period > .next {
            width: var(--year-cell-size);
            height: var(--year-cell-size);
            margin-left: calc(2 * var(--year-gap));
            text-align: center;
            cursor: pointer;
        }

            .fluent-year[b-bgn9u4guxz]  .change-period > .previous:not([disabled]):hover,
            .fluent-year[b-bgn9u4guxz]  .change-period > .next:not([disabled]):hover {
                background: var(--neutral-fill-stealth-hover);
            }

            .fluent-year[b-bgn9u4guxz]  .change-period > .previous svg,
            .fluent-year[b-bgn9u4guxz]  .change-period > .next svg {
                width: 16px;
                fill: var(--neutral-fill-strong-focus);
            }

    /* List of years */
    .fluent-year[b-bgn9u4guxz]  .years {
        text-align: center;
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        grid-gap: var(--year-gap);
        width: 100%;
    }

    .fluent-year[b-bgn9u4guxz]  .year {
        display: flex;
        height: var(--year-cell-height);
        border: calc(var(--stroke-width) * 1px) solid transparent;
        border-radius: calc(var(--control-corner-radius) * 1px);
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    .fluent-year[readonly][b-bgn9u4guxz]  .year {
        cursor: default;
    }

    .fluent-year:not([readonly])[b-bgn9u4guxz]  .year:not([disabled]):hover {
        background: var(--neutral-fill-stealth-hover);
    }

    .fluent-year[b-bgn9u4guxz]  .year[selected] {
        color: var(--accent-fill-rest);
        border: 1px solid var(--accent-fill-rest);
        background: var(--fill-color);
    }

    .fluent-year[b-bgn9u4guxz]  .year[disabled] {
        color: var(--neutral-stroke-focus);
        cursor: default;
    }

    /* Animations */
    .fluent-year[b-bgn9u4guxz]  .animation-running-down {
        animation: 0.2s fluent-text-animation-down-b-bgn9u4guxz ease-out;
    }

    .fluent-year[b-bgn9u4guxz]  .animation-running-up {
        animation: 0.2s fluent-text-animation-up-b-bgn9u4guxz ease-out;
    }

    .fluent-year[b-bgn9u4guxz]  .animation-none {
        animation: none;
    }

@keyframes fluent-text-animation-up-b-bgn9u4guxz {
    0% {
        opacity: 0;
        transform: translateY(80%);
    }

    20% {
        opacity: 0;
    }

    80% {
        opacity: 1;
        transform: translateY(0%);
    }

    100% {
        opacity: 1;
        transform: translateY(0%);
    }
}

@keyframes fluent-text-animation-down-b-bgn9u4guxz {
    0% {
        opacity: 0;
        transform: translateY(-80%);
    }

    20% {
        opacity: 0;
    }

    80% {
        opacity: 1;
        transform: translateY(0%);
    }

    100% {
        opacity: 1;
        transform: translateY(0%);
    }
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/DateTime/FluentDatePicker.razor.rz.scp.css */
.fluent-datepicker-popup[b-i3i7ux5rp5] {
 
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/DateTime/FluentTimePicker.razor.rz.scp.css */
.fluent-timepicker[b-6gigqm0f7f] {
    min-width: 110px;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Dialog/ContentComponents/FluentSplashScreen.razor.rz.scp.css */
.fluent-launch[b-84hlqzw3vk] {
    font-family: var(--body-font);
    -webkit-font-smoothing: antialiased;
    background-color: white;
    color: rgb(73, 72, 71);
    --accent-fill-rest: #d3d3d3;
    user-select: none;
}

    .fluent-launch h1[b-84hlqzw3vk] {
        font-size: 32px;
        font-weight: 600;
        margin-top: 40px;
        line-height: 40px;
        margin: 40px 0px 0px 0px;
        user-select: none;
    }

    .fluent-launch h2[b-84hlqzw3vk] {
        font-size: 24px;
        font-weight: 400;
        line-height: 32px;
        margin: 24px 0px 50px 0px;
        user-select: none;
    }

    .fluent-launch h3[b-84hlqzw3vk] {
        font-size: 12px;
        font-weight: 300;
        margin: 0px;
        user-select: none;
    }
    
    .fluent-launch p[b-84hlqzw3vk] {
        user-select: none;
    }

    .fluent-launch .icon[b-84hlqzw3vk] {
        width: 150px;
        margin: 20px 0px 0px 0px;
    }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Dialog/ContentComponents/MessageBox.razor.rz.scp.css */
.fluent-messagebox[b-0npbikdt9h] {
    font-family: var(--body-font);
    -webkit-font-smoothing: antialiased;
    color: var( --neutral-foreground-rest);
    word-break: break-word;
}

.fluent-messagebox[b-0npbikdt9h]  .icon {
    min-width: 24px;
    margin: 4px;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Dialog/FluentDialog.razor.rz.scp.css */
fluent-dialog[b-dsxskpj5rr]::part(control) {
    --dialog-padding: calc(var(--design-unit) * 6 * 1px);
    position: relative;
    padding: var(--dialog-padding);
    width: calc(var(--dialog-width) - 2 * var(--dialog-padding));
    height: calc(var(--dialog-height) - 2 * var(--dialog-padding));
}

fluent-dialog:has(div[class~="fluent-dialog-body"]):not(:is(fluent-dialog[class~="right"], fluent-dialog[class~="left"]) )[b-dsxskpj5rr]::part(control) {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: auto 1fr auto;
    grid-template-areas:
        'dialog-header'
        'dialog-body'
        'dialog-footer';
}

fluent-dialog[class~="right"][b-dsxskpj5rr]::part(control),
fluent-dialog[class~="left"][b-dsxskpj5rr]::part(control) {
    display: flex;
    flex-direction: column;
    border-radius: unset;
    border-width: 0;
    --dialog-height: 100dvh;
    overflow-y: auto;
}

:is(fluent-dialog[class~="right"], fluent-dialog[class~="left"])[b-dsxskpj5rr]  .fluent-dialog-body {
    flex-grow: 1;
    overflow-y: auto;
}

fluent-dialog[class~="right"][b-dsxskpj5rr]::part(control) {
    position: absolute;
    right: 0;
}

fluent-dialog[class~="left"][b-dsxskpj5rr]::part(control) {
    position: absolute;
    left: 0;
}

fluent-dialog[b-dsxskpj5rr]  .fluent-dialog-header {
    grid-area: dialog-header;
    padding: 0 0 var(--dialog-padding) 0;
}

fluent-dialog[b-dsxskpj5rr]  .fluent-dialog-footer {
    grid-area: dialog-footer;
    margin-top: auto;
    padding: var(--dialog-padding) 0 0 0;
}

fluent-dialog:has(div[class~="fluent-dialog-body"])[b-dsxskpj5rr]  .fluent-dialog-footer {
    grid-area: dialog-footer;
    margin-top: auto;
    padding-top: var(--dialog-padding);
    right: 0px;
}

fluent-dialog[b-dsxskpj5rr]  .fluent-dialog-body {
    grid-area: dialog-body;
    width: 100%;
    height: auto;
    min-height: 80px;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Drag/FluentDropZone.razor.rz.scp.css */
div[draggable='true'][b-qxma62j335] {
    cursor: move;
}

div[dragged-over][b-qxma62j335] {
    background-color: lightgray;
    opacity: 0.6;
    animation: blinker 1s linear infinite;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Footer/FluentFooter.razor.rz.scp.css */
.footer[b-v3odva5qa5] {
    display: flex;
    z-index: 10;
    flex-direction: row;
    font-family: var(--body-font);
    font-weight: normal;
    font-size: var(--type-ramp-minus-1-font-size);
    line-height: var(--type-ramp-minus-1-line-height);
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Forms/FluentValidationMessage.razor.rz.scp.css */
.validation-message[b-tlmhiy4gb8] {
    color: var(--error);
    font-size: var(--type-ramp-minus-1-font-size);
    display: flex;
    align-items: center;
    column-gap: 4px;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Grid/FluentGrid.razor.rz.scp.css */
.fluent-grid[b-9fxwfzgab8] {
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    box-sizing: border-box;
}

    .fluent-grid[b-9fxwfzgab8]  > div {
        margin: 0;
        box-sizing: border-box;
    }

    /* Spacing */

    .fluent-grid[spacing="1"][b-9fxwfzgab8] {
        width: calc(100% + 8px);
        margin: -4px;
    }

        .fluent-grid[spacing="1"][b-9fxwfzgab8]  > div {
            padding: 4px;
        }

    .fluent-grid[spacing="2"][b-9fxwfzgab8] {
        width: calc(100% + 16px);
        margin: -8px;
    }

        .fluent-grid[spacing="2"][b-9fxwfzgab8]  > div {
            padding: 8px;
        }

    .fluent-grid[spacing="3"][b-9fxwfzgab8] {
        width: calc(100% + 24px);
        margin: -12px;
    }

        .fluent-grid[spacing="3"][b-9fxwfzgab8]  > div {
            padding: 12px;
        }

    .fluent-grid[spacing="4"][b-9fxwfzgab8] {
        width: calc(100% + 32px);
        margin: -16px;
    }

        .fluent-grid[spacing="4"][b-9fxwfzgab8]  > div {
            padding: 16px;
        }

    .fluent-grid[spacing="5"][b-9fxwfzgab8] {
        width: calc(100% + 40px);
        margin: -20px;
    }

        .fluent-grid[spacing="5"][b-9fxwfzgab8]  > div {
            padding: 20px;
        }

    .fluent-grid[spacing="6"][b-9fxwfzgab8] {
        width: calc(100% + 48px);
        margin: -24px;
    }

        .fluent-grid[spacing="6"][b-9fxwfzgab8]  > div {
            padding: 24px;
        }

    .fluent-grid[spacing="7"][b-9fxwfzgab8] {
        width: calc(100% + 56px);
        margin: -28px;
    }

        .fluent-grid[spacing="7"][b-9fxwfzgab8]  > div {
            padding: 28px;
        }

    .fluent-grid[spacing="8"][b-9fxwfzgab8] {
        width: calc(100% + 64px);
        margin: -32px;
    }

        .fluent-grid[spacing="8"][b-9fxwfzgab8]  > div {
            padding: 32px;
        }

    .fluent-grid[spacing="9"][b-9fxwfzgab8] {
        width: calc(100% + 72px);
        margin: -36px;
    }

        .fluent-grid[spacing="9"][b-9fxwfzgab8]  > div {
            padding: 36px;
        }

    .fluent-grid[spacing="10"][b-9fxwfzgab8] {
        width: calc(100% + 80px);
        margin: -40px;
    }

        .fluent-grid[spacing="10"][b-9fxwfzgab8]  > div {
            padding: 40px;
        }



    /* Size xs */

    .fluent-grid[b-9fxwfzgab8]  > div[xs="auto"] {
        flex-grow: 0;
        max-width: none;
        flex-basis: auto;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="true"] {
        flex-grow: 1;
        max-width: 100%;
        flex-basis: 0;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="0"] {
        flex: 1;
        max-width: fit-content;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="1"] {
        flex-grow: 0;
        max-width: 8.333%;
        flex-basis: 8.3333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="2"] {
        flex-grow: 0;
        max-width: 16.667%;
        flex-basis: 16.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="3"] {
        flex-grow: 0;
        max-width: 25%;
        flex-basis: 25%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="4"] {
        flex-grow: 0;
        max-width: 33.333%;
        flex-basis: 33.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="5"] {
        flex-grow: 0;
        max-width: 41.667%;
        flex-basis: 41.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="6"] {
        flex-grow: 0;
        max-width: 50%;
        flex-basis: 50%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="7"] {
        flex-grow: 0;
        max-width: 58.333%;
        flex-basis: 58.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="8"] {
        flex-grow: 0;
        max-width: 66.667%;
        flex-basis: 66.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="9"] {
        flex-grow: 0;
        max-width: 75%;
        flex-basis: 75%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="10"] {
        flex-grow: 0;
        max-width: 83.333%;
        flex-basis: 83.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="11"] {
        flex-grow: 0;
        max-width: 91.667%;
        flex-basis: 91.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xs="12"] {
        flex-grow: 0;
        max-width: 100%;
        flex-basis: 100%;
    }


@media(min-width: 600px) {

    /* Size sm */

    .fluent-grid[b-9fxwfzgab8]  > div[sm="auto"] {
        flex-grow: 0;
        max-width: none;
        flex-basis: auto;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="true"] {
        flex-grow: 1;
        max-width: 100%;
        flex-basis: 0;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="0"] {
        flex: 1;
        max-width: fit-content;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="1"] {
        flex-grow: 0;
        max-width: 8.333%;
        flex-basis: 8.3333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="2"] {
        flex-grow: 0;
        max-width: 16.667%;
        flex-basis: 16.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="3"] {
        flex-grow: 0;
        max-width: 25%;
        flex-basis: 25%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="4"] {
        flex-grow: 0;
        max-width: 33.333%;
        flex-basis: 33.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="5"] {
        flex-grow: 0;
        max-width: 41.667%;
        flex-basis: 41.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="6"] {
        flex-grow: 0;
        max-width: 50%;
        flex-basis: 50%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="7"] {
        flex-grow: 0;
        max-width: 58.333%;
        flex-basis: 58.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="8"] {
        flex-grow: 0;
        max-width: 66.667%;
        flex-basis: 66.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="9"] {
        flex-grow: 0;
        max-width: 75%;
        flex-basis: 75%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="10"] {
        flex-grow: 0;
        max-width: 83.333%;
        flex-basis: 83.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="11"] {
        flex-grow: 0;
        max-width: 91.667%;
        flex-basis: 91.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[sm="12"] {
        flex-grow: 0;
        max-width: 100%;
        flex-basis: 100%;
    }
}

@media(min-width: 960px) {

    /* Size md */

    .fluent-grid[b-9fxwfzgab8]  > div[md="auto"] {
        flex-grow: 0;
        max-width: none;
        flex-basis: auto;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="true"] {
        flex-grow: 1;
        max-width: 100%;
        flex-basis: 0;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="0"] {
        flex: 1;
        max-width: fit-content;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="1"] {
        flex-grow: 0;
        max-width: 8.333%;
        flex-basis: 8.3333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="2"] {
        flex-grow: 0;
        max-width: 16.667%;
        flex-basis: 16.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="3"] {
        flex-grow: 0;
        max-width: 25%;
        flex-basis: 25%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="4"] {
        flex-grow: 0;
        max-width: 33.333%;
        flex-basis: 33.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="5"] {
        flex-grow: 0;
        max-width: 41.667%;
        flex-basis: 41.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="6"] {
        flex-grow: 0;
        max-width: 50%;
        flex-basis: 50%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="7"] {
        flex-grow: 0;
        max-width: 58.333%;
        flex-basis: 58.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="8"] {
        flex-grow: 0;
        max-width: 66.667%;
        flex-basis: 66.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="9"] {
        flex-grow: 0;
        max-width: 75%;
        flex-basis: 75%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="10"] {
        flex-grow: 0;
        max-width: 83.333%;
        flex-basis: 83.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="11"] {
        flex-grow: 0;
        max-width: 91.667%;
        flex-basis: 91.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[md="12"] {
        flex-grow: 0;
        max-width: 100%;
        flex-basis: 100%;
    }
}

@media(min-width: 1280px) {

    /* Size lg */

    .fluent-grid[b-9fxwfzgab8]  > div[lg="auto"] {
        flex-grow: 0;
        max-width: none;
        flex-basis: auto;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="true"] {
        flex-grow: 1;
        max-width: 100%;
        flex-basis: 0;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="0"] {
        flex: 1;
        max-width: fit-content;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="1"] {
        flex-grow: 0;
        max-width: 8.333%;
        flex-basis: 8.3333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="2"] {
        flex-grow: 0;
        max-width: 16.667%;
        flex-basis: 16.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="3"] {
        flex-grow: 0;
        max-width: 25%;
        flex-basis: 25%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="4"] {
        flex-grow: 0;
        max-width: 33.333%;
        flex-basis: 33.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="5"] {
        flex-grow: 0;
        max-width: 41.667%;
        flex-basis: 41.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="6"] {
        flex-grow: 0;
        max-width: 50%;
        flex-basis: 50%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="7"] {
        flex-grow: 0;
        max-width: 58.333%;
        flex-basis: 58.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="8"] {
        flex-grow: 0;
        max-width: 66.667%;
        flex-basis: 66.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="9"] {
        flex-grow: 0;
        max-width: 75%;
        flex-basis: 75%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="10"] {
        flex-grow: 0;
        max-width: 83.333%;
        flex-basis: 83.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="11"] {
        flex-grow: 0;
        max-width: 91.667%;
        flex-basis: 91.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[lg="12"] {
        flex-grow: 0;
        max-width: 100%;
        flex-basis: 100%;
    }
}

@media(min-width: 1920px) {

    /* Size xl */

    .fluent-grid[b-9fxwfzgab8]  > div[xl="auto"] {
        flex-grow: 0;
        max-width: none;
        flex-basis: auto;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="true"] {
        flex-grow: 1;
        max-width: 100%;
        flex-basis: 0;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="0"] {
        flex: 1;
        max-width: fit-content;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="1"] {
        flex-grow: 0;
        max-width: 8.333%;
        flex-basis: 8.3333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="2"] {
        flex-grow: 0;
        max-width: 16.667%;
        flex-basis: 16.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="3"] {
        flex-grow: 0;
        max-width: 25%;
        flex-basis: 25%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="4"] {
        flex-grow: 0;
        max-width: 33.333%;
        flex-basis: 33.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="5"] {
        flex-grow: 0;
        max-width: 41.667%;
        flex-basis: 41.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="6"] {
        flex-grow: 0;
        max-width: 50%;
        flex-basis: 50%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="7"] {
        flex-grow: 0;
        max-width: 58.333%;
        flex-basis: 58.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="8"] {
        flex-grow: 0;
        max-width: 66.667%;
        flex-basis: 66.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="9"] {
        flex-grow: 0;
        max-width: 75%;
        flex-basis: 75%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="10"] {
        flex-grow: 0;
        max-width: 83.333%;
        flex-basis: 83.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="11"] {
        flex-grow: 0;
        max-width: 91.667%;
        flex-basis: 91.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xl="12"] {
        flex-grow: 0;
        max-width: 100%;
        flex-basis: 100%;
    }
}

@media(min-width: 2560px) {

    /* Size xxl */

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="auto"] {
        flex-grow: 0;
        max-width: none;
        flex-basis: auto;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="true"] {
        flex-grow: 1;
        max-width: 100%;
        flex-basis: 0;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="0"] {
        flex: 1;
        max-width: fit-content;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="1"] {
        flex-grow: 0;
        max-width: 8.333%;
        flex-basis: 8.3333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="2"] {
        flex-grow: 0;
        max-width: 16.667%;
        flex-basis: 16.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="3"] {
        flex-grow: 0;
        max-width: 25%;
        flex-basis: 25%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="4"] {
        flex-grow: 0;
        max-width: 33.333%;
        flex-basis: 33.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="5"] {
        flex-grow: 0;
        max-width: 41.667%;
        flex-basis: 41.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="6"] {
        flex-grow: 0;
        max-width: 50%;
        flex-basis: 50%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="7"] {
        flex-grow: 0;
        max-width: 58.333%;
        flex-basis: 58.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="8"] {
        flex-grow: 0;
        max-width: 66.667%;
        flex-basis: 66.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="9"] {
        flex-grow: 0;
        max-width: 75%;
        flex-basis: 75%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="10"] {
        flex-grow: 0;
        max-width: 83.333%;
        flex-basis: 83.333%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="11"] {
        flex-grow: 0;
        max-width: 91.667%;
        flex-basis: 91.667%;
    }

    .fluent-grid[b-9fxwfzgab8]  > div[xxl="12"] {
        flex-grow: 0;
        max-width: 100%;
        flex-basis: 100%;
    }
}

/* Hidden */

@media (max-width: 599.98px) {
    .fluent-grid[b-9fxwfzgab8]  > div[hidden-when~="xs"] {
        display: none;
    }
}

@media (min-width: 600px) and (max-width: 959.98px) {
    .fluent-grid[b-9fxwfzgab8]  > div[hidden-when~="sm"] {
        display: none;
    }
}

@media (min-width: 960px) and (max-width: 1279.98px) {
    .fluent-grid[b-9fxwfzgab8]  > div[hidden-when~="md"] {
        display: none;
    }
}

@media (min-width: 1280px) and (max-width: 1919.98px) {
    .fluent-grid[b-9fxwfzgab8]  > div[hidden-when~="lg"] {
        display: none;
    }
}

@media (min-width: 1920px) and (max-width: 2559.98px) {
    .fluent-grid[b-9fxwfzgab8]  > div[hidden-when~="xl"] {
        display: none;
    }
}

@media (min-width: 2560px) {
    .fluent-grid[b-9fxwfzgab8]  > div[hidden-when~="xxl"] {
        display: none;
    }
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Header/FluentHeader.razor.rz.scp.css */
.header[b-wxpnc5dx1o] {
    display: flex;
    z-index: 10;
    flex-shrink: 0;
    background-color: var(--accent-fill-rest);
    font-family: var(--body-font);
    font-weight: bold;
    font-size: var(--type-ramp-plus-1-font-size);
    line-height: var(--type-ramp-plus-1-line-height);
    color: var(--fill-color);
}

    .header .header-gutters[b-wxpnc5dx1o] {
        display: flex;
        position: relative;
        align-items: center;
        width: 100%;
        margin: 0.5rem 1.5rem;
    }

.header .header-fixed-top[b-wxpnc5dx1o] {
    position: fixed;
    top: 0;
    right: 0;
    left: 0;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/InputFile/FluentInputFile.razor.rz.scp.css */
.fluent-inputfile-container[b-72uj7bp8pi] {
    display: grid;
    grid-gap: 10px;
    background-color: var(--neutral-fill-hover);
}

    .fluent-inputfile-container[drop-files][b-72uj7bp8pi] {
        border: 2px dashed var(--accent-foreground-focus);
    }
    .fluent-inputfile-container .inputfile-content[b-72uj7bp8pi] {
        grid-column: 1;
        grid-row: 1;
        text-align: center;
        align-self: center;
        justify-self: center;
    }

    .fluent-inputfile-container[b-72uj7bp8pi]  input[type='file'] {
        width: 100%;
        height: 100%;
        opacity: 0;
    }

    .fluent-inputfile-container[b-72uj7bp8pi]  label,
    .fluent-inputfile-container[b-72uj7bp8pi]  a {
        color: var(--accent-fill-rest);
        text-decoration: underline;
        cursor: pointer;
    }

    .fluent-inputfile-container .inputfile-progress[b-72uj7bp8pi] {
        padding-top: 20px;
        height: 50px;
        margin: 0px 15%;
        text-align: center;
        line-height: 8px;
        font-size: var(--type-ramp-minus-2-font-size);
    }

    .fluent-inputfile-container[disabled][b-72uj7bp8pi], .fluent-inputfile-container[disabled="true"][b-72uj7bp8pi] {
        opacity: 0.5;
        pointer-events: none;
        cursor: not-allowed;
    }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Label/FluentInputLabel.razor.rz.scp.css */
.fluent-input-label[b-hum22yrq17] {
    display: flex;
    color: var(--neutral-foreground-rest);
    cursor: pointer;
    font-family: var(--body-font);
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
    font-weight: initial;
    font-variation-settings: var(--type-ramp-base-font-variations);
    margin-bottom: calc(var(--design-unit) * 1px);
    align-items: center;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Label/FluentLabel.razor.rz.scp.css */
/*
    --type-ramp-base-font-size: 14px;
    --type-ramp-base-line-height: 20px;
*/
.fluent-typography[b-1nnnfjehkp] {
    font-family: var(--body-font);
    color: var(--neutral-foreground-rest);
    font-style: normal;
}

    .fluent-typography:not([default-margin])[b-1nnnfjehkp] {
        margin-block: 0px;
    }

    .fluent-typography[typo='body'][b-1nnnfjehkp] {
        font-size: var(--type-ramp-base-font-size);
        line-height: var(--type-ramp-base-line-height);
        font-weight: 400;
    }

    .fluent-typography[typo='subject'][b-1nnnfjehkp] {
        font-size: var(--type-ramp-plus-1-font-size);
        line-height: var(--type-ramp-plus-1-line-height);
        font-weight: 400;
    }

    .fluent-typography[typo='header'][b-1nnnfjehkp] {
        font-size: var(--type-ramp-plus-2-font-size);
        line-height: var(--type-ramp-plus-2-line-height);
        font-weight: 400;
    }

    .fluent-typography[typo='pane-header'][b-1nnnfjehkp] {
        font-size: var(--type-ramp-plus-3-font-size);
        line-height: var(--type-ramp-plus-3-line-height);
        font-weight: 400;
    }

    .fluent-typography[typo='email-header'][b-1nnnfjehkp] {
        font-size: var(--type-ramp-plus-4-font-size);
        line-height: var(--type-ramp-plus-4-line-height);
        font-weight: 400;
    }

    .fluent-typography[typo='page-title'][b-1nnnfjehkp] {
        font-size: var(--type-ramp-plus-5-font-size);
        line-height: var(--type-ramp-plus-5-line-height);
        font-weight: 400;
    }

    .fluent-typography[typo='hero-title'][b-1nnnfjehkp] {
        font-size: var(--type-ramp-plus-6-font-size);
        line-height: var(--type-ramp-plus-6-line-height);
        font-weight: 400;
    }

    .fluent-typography[bold][b-1nnnfjehkp] {
        font-weight: 600;
    }

    .fluent-typography[bolder][b-1nnnfjehkp] {
        font-weight: 800;
    }

    .fluent-typography[disabled][b-1nnnfjehkp] {
        opacity: var(--disabled-opacity);
    }

.fluent-typo-left[b-1nnnfjehkp] {
    text-align: left;
}

.fluent-typo-center[b-1nnnfjehkp] {
    text-align: center;
}

.fluent-typo-right[b-1nnnfjehkp] {
    text-align: right;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Layout/FluentLayout.razor.rz.scp.css */
.layout[b-emdrz8ckod] {
    height: 100%;
    width: 100%;
    position: relative;
    flex: 1;
    display: flex;
    flex-direction: column;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/List/FluentAutocomplete.razor.rz.scp.css */
.fluent-autocomplete-multiselect div[role=listbox][b-hg72r5b4ox] {
    overflow-y: auto;
    max-height: 300px;
    outline: none;
    padding: 2px;
    display: inline-flex;
    flex-direction: column;
}

    .fluent-autocomplete-multiselect div[role=listbox][b-hg72r5b4ox]  fluent-option {
        min-height: 32px;
    }

        .fluent-autocomplete-multiselect div[role=listbox][b-hg72r5b4ox]  fluent-option:hover {
            background-color: var(--neutral-fill-stealth-hover) !important;
        }

        /* This first fluent-option will be selected when user presses Enter */
        .fluent-autocomplete-multiselect div[role=listbox][b-hg72r5b4ox]  fluent-option:not([disabled])[selectable] {
            background: var(--neutral-fill-secondary-hover);
        }

.fluent-autocomplete-multiselect[b-hg72r5b4ox]  fluent-text-field::part(start) {
    max-width: calc(100% - 80px);
}

.fluent-autocomplete-next[b-hg72r5b4ox] {
    height: 25px;
}

.fluent-autocomplete-previous[b-hg72r5b4ox] {
    height: 25px;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/List/FluentPersona.razor.rz.scp.css */
.fluent-persona[b-n7zog0zvqi] {
    display: flex;
    width: fit-content;
    border-radius: 999px;
    align-items: center;
    white-space: nowrap;
    text-overflow: ellipsis;
}

    .fluent-persona .initials[b-n7zog0zvqi] {
        display: flex;
        color: var(--fill-color);
        background: var(--accent-stroke-control-active);
        font-weight: 600;
        border-radius: 50%;
        text-align: center;
        align-items: center;
        justify-content: center;
        aspect-ratio: 1/1;
    }

    .fluent-persona[position='start'] .initials[b-n7zog0zvqi] {
        order: 3;
    }

        .fluent-persona .initials img[b-n7zog0zvqi] {
            border-radius: 50%;
            aspect-ratio: 1 / 1;
            width: auto;
            height: auto;
            margin-left: auto;
            margin-right: auto;
        }

    .fluent-persona .name[b-n7zog0zvqi] {
        margin-inline-start: 16px;
    }

    .fluent-persona[position='start'] .name[b-n7zog0zvqi] {
        order: 1;
        margin-inline-start: 0px;
        margin-inline-end: 16px;
    } 

    .fluent-persona .close[b-n7zog0zvqi] {
        display: flex;
        text-align: center;
        align-items: center;
        justify-content: center;
        margin: 0px 4px;
    }

    .fluent-persona[position='start'] .close[b-n7zog0zvqi] {
        order: 2;
    }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Main/FluentMain.razor.rz.scp.css */
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/MenuButton/FluentMenuButton.razor.rz.scp.css */
.fluent-menubutton-container[b-nrgns4mio7] {
    position: relative;

}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/MessageBar/FluentMessageBar.razor.rz.scp.css */
/* OneRow */

.fluent-messagebar[b-ig2qs97tvl] {
    font-family: var(--body-font);
    background-color: var(--neutral-layer-floating);
    color: var(--neutral-foreground-rest);
    display: grid;
    grid-template-columns: 24px 1fr auto;
    width: 100%;
    padding: 0px 3px;
    align-items: center;
    min-height: 36px;
    border-radius: calc(var(--control-corner-radius) * 1px);
    padding: 0 12px;
    column-gap: 8px;
    animation: fadein-b-ig2qs97tvl 1.5s;
}

.fluent-messagebar-container-action[b-ig2qs97tvl] {
    display: flex;
    padding: 6px 0px;
    justify-content: flex-end;
    align-items: center;
    gap: 8px;
}

    .fluent-messagebar.intent-info[b-ig2qs97tvl] {
        background-color: #f5f5f5; 
        border: 1px solid #d1d1d1; 

    }

    .fluent-messagebar.dark.intent-info[b-ig2qs97tvl] {
        background-color: #141414;
        border: 1px solid #666;
    }

    .fluent-messagebar.intent-warning[b-ig2qs97tvl] {
        background-color: #FDF6F3; 
        border: 1px solid #f4bfab; 
    }

    .fluent-messagebar.dark.intent-warning[b-ig2qs97tvl] {
        background-color: #411200;
        border: 1px solid #DA3B01;
    }
    .fluent-messagebar.intent-error[b-ig2qs97tvl] {
        background-color: #FDF3F4;
        border: 1px solid #f1bbbc;
    }

    .fluent-messagebar.dark.intent-error[b-ig2qs97tvl] {
        background-color: #3F1011;
        border: 1px solid #D13438;
    }
    .fluent-messagebar.intent-success[b-ig2qs97tvl] {
        background-color: #f1faf1;
        border: 1px solid #9fd89f;
    }

    .fluent-messagebar.dark.intent-success[b-ig2qs97tvl] {
        background-color: #052505;
        border: 1px solid #107C10;
    }
    .fluent-messagebar.intent-custom[b-ig2qs97tvl] {
        background-color: var(--neutral-layer-1);
        border: 1px solid var(--neutral-stroke-layer-rest);
    }

.fluent-messagebar-icon[b-ig2qs97tvl] {
        grid-column: 1;
        display: flex;
        justify-content:center;
    }

.fluent-messagebar-message[b-ig2qs97tvl] {
    grid-column: 2;
    padding: 10px 0;
    align-self: center;
    font-size: 12px;
    font-weight: 400;
    line-height: 16px;

}

.fluent-messagebar-message .title[b-ig2qs97tvl]{
    font-weight: 600;
    padding: 0 4px 0 0;

}

.fluent-messagebar-message[b-ig2qs97tvl]  fluent-anchor {
        margin-inline-start: 5px;
 }

[b-ig2qs97tvl] .fluent-messagebar-action {
    height: 24px;

}

.fluent-messagebar-close[b-ig2qs97tvl] {
    grid-column: 3;
    padding: 4px;
    justify-self: center;
    align-self: center;
    fill: var(--neutral-fill-strong-active);
    cursor: pointer;
    max-width: 16px;
    max-height: 16px;
}

/* Notification */

.fluent-messagebar-notification[b-ig2qs97tvl] {
    font-family: var(--body-font);
    color: var(--neutral-foreground-rest);
    display: grid;
    grid-template-columns: 24px 1fr auto;
    grid-template-rows: 36px 1fr auto;
    width: 100%;
    min-height: 36px;
    padding: 0 12px;
    column-gap: 8px;
    animation: fadein-b-ig2qs97tvl 1.5s;
}

    .fluent-messagebar-notification.intent-info[b-ig2qs97tvl] {
        fill: #797775; /* Gray */
    }

    .fluent-messagebar-notification.intent-warning[b-ig2qs97tvl] {
        fill: #d83b01; /* Orange */
    }

    .fluent-messagebar-notification.intent-error[b-ig2qs97tvl] {
        fill: #a80000; /* Red */
    }

    .fluent-messagebar-notification.intent-success[b-ig2qs97tvl] {
        fill: #107c10; /* Green */
    }

.fluent-messagebar-notification-icon[b-ig2qs97tvl] {
    grid-column: 1;
    grid-row: 1;
    display: flex;
    justify-content: center;
}

.fluent-messagebar-notification-message[b-ig2qs97tvl] {
    grid-column: 2;
    grid-row: 1;
    padding: 10px 0;
    align-self: center;
    font-weight: 600;
    font-size: 12px;
    line-height: 16px;
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}

.fluent-messagebar-notification-content[b-ig2qs97tvl] {
    grid-column: 1 / 4;
    grid-row: 2;
    padding: 6px 6px;
}

.fluent-messagebar-notification-content[b-ig2qs97tvl]   fluent-anchor {
    margin-inline-start: 5px;
}

[b-ig2qs97tvl] .fluent-messagebar-notification-action {
    margin-left: 5px;
}

.fluent-messagebar-notification-close[b-ig2qs97tvl] {
    grid-column: 3;
    grid-row: 1;
    padding: 4px;
    display: flex;
    justify-content: center;
    justify-self: center;
    cursor: pointer;
}

.fluent-messagebar-notification-time[b-ig2qs97tvl] {
    grid-column: 2 / 4;
    grid-row: 3;
    font-size: 12px;
    right: 10px;
    text-align: right;
    padding: 0px 4px 4px 0px;
}

@keyframes fadein-b-ig2qs97tvl {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/MessageBar/FluentMessageBarProvider.razor.rz.scp.css */
.fluent-messagebar-provider[b-aw4knpwcro] {
    display: flex;
    flex-direction: column;
    row-gap: calc( var(--design-unit) * 2px);
    padding-bottom: calc(var(--design-unit) * 1px);
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/NavMenuTree/FluentNavMenuTree.razor.rz.scp.css */
/*
    NavMenu
*/
.navmenu[b-4qk64k9jmw] {
    background-color: var(--neutral-layer-1);
}

/*
    NavMenu expander
*/
[b-4qk64k9jmw] .navmenu-expander::part(positioning-region) {
    background-color: var(--neutral-fill-stealth-rest);
}

[b-4qk64k9jmw] .navmenu-expander::part(content-region) {
    margin-inline-start: calc(var(--design-unit) * 2px);
    -webkit-user-select: none;
    user-select: none;
}

[b-4qk64k9jmw] .navmenu-expander::part(positioning-region):hover {
    background-color: var(--neutral-fill-secondary-rest);
}

[b-4qk64k9jmw] .navmenu-expander.selected::after {
    display: none;
}



/*
    Child Elements (Groups and Items)
*/
[b-4qk64k9jmw] .navmenu-child-element::part(content-region) {
    -webkit-user-select: none;
    user-select: none;
    margin-inline-start: calc(var(--design-unit) * 2px);
    margin-inline-end: calc(var(--design-unit) * 2px);
}

[b-4qk64k9jmw] .navmenu .treeitem-text, [b-4qk64k9jmw] .navmenu fluent-tree-item.navmenu-child-element::part(start) {
    pointer-events: none;
}

[b-4qk64k9jmw] .navmenu.collapsed .treeitem-text, [b-4qk64k9jmw] .navmenu.collapsed fluent-tree-item.navmenu-child-element::part(expand-collapse-button) {
    display: none;
}



/* 
    Groups
*/
[b-4qk64k9jmw] .navmenu-group::part(content-region) {
    margin-inline-end: var(--expand-collapse-button-size);
}



/*
    Group expander
*/
[b-4qk64k9jmw] .navmenu .navmenu-group::part(expand-collapse-button) {
    right: calc(var(--design-unit) * 2px);
    left: unset;
    margin-inline-end: calc(var(--expand-collapse-button-size) * -1);
}

[dir="rtl"] *[b-4qk64k9jmw]  .navmenu-group::part(expand-collapse-button) {
    left: calc(var(--design-unit) * 2px);
    right: unset;
    margin-inline-start: calc(var(--expand-collapse-button-size) - (var(--design-unit) * 2px));
}


/*
    Group items
*/
[b-4qk64k9jmw] .navmenu-group .navmenu-child-element::part(content-region) {
    padding-inline-start: calc(var(--design-unit) * 2px);
}

/* Hide any items inside groups of a collapsed nav menu*/
[b-4qk64k9jmw] .navmenu.collapsed > .navmenu-parent-element::part(items) {
    display: none;
}


/*
    Nav links
*/
[b-4qk64k9jmw] .navmenu .navmenu-link::part(content-region) {
    margin-inline-start: calc(var(--design-unit) * 2px);
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/NavMenu/FluentNavGroup.razor.rz.scp.css */
[b-hv9rzieq3w] .fluent-nav-link {
    width: 100%;
    color: inherit;
    align-items: center;
    text-decoration: none;
    display: flex;
}

    [b-hv9rzieq3w] .fluent-nav-link.notactive:focus-within {
        outline-offset: 1px;
    }

[b-hv9rzieq3w] .fluent-nav-icon {
    min-width: 20px;
}

[b-hv9rzieq3w] .fluent-nav-group.disabled {
    color: var(--neutral-fill-secondary-rest) !important;
    pointer-events: none;
}

    [b-hv9rzieq3w] .fluent-nav-group.disabled .fluent-nav-icon {
        fill: var(--neutral-stroke-rest) !important;
    }


/* Group expand/collapse */
[b-hv9rzieq3w] .expand-collapse-button {
    position: absolute;
    right: calc(var(--design-unit) * 2px);
    left: unset;
    border-radius: calc(var(--control-corner-radius) * 1px);
    width: calc((((var(--base-height-multiplier) / 2) * var(--design-unit)) + ((var(--design-unit) * var(--density)) / 2) + (var(--design-unit) * 2)) * 1px);
    height: calc((((var(--base-height-multiplier) / 2) * var(--design-unit)) + ((var(--design-unit) * var(--density)) / 2) + (var(--design-unit) * 2)) * 1px);
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
}

[dir="rtl"] * .expand-collapse-button[b-hv9rzieq3w] {
    position: absolute;
    left: calc(var(--design-unit) * 2px);
    right: unset;
}

[b-hv9rzieq3w] .expand-collapse-button:hover {
    background: var(--tree-item-expand-collapse-hover)
}

[b-hv9rzieq3w] .expand-collapse-button svg {
    transition: transform 0.1s linear 0s;
    pointer-events: none;
}

[dir="rtl"] *[b-hv9rzieq3w]  .expand-collapse-button svg {
    transform: rotate(180deg);
}

[b-hv9rzieq3w] .rotate.expand-collapse-button svg {
    transform: rotate(90deg);
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/NavMenu/FluentNavLink.razor.rz.scp.css */
[b-5upkyn31e7] .fluent-nav-link {
    width: 100%;
    color: inherit;
    align-items: center;
    text-decoration: none;
    display: flex;
}

[b-5upkyn31e7] :not(fluent-menu-item) .fluent-nav-icon {
    min-width: 20px;
}

[b-5upkyn31e7] :not(fluent-menu-item) .fluent-nav-link.disabled {
    color: var(--neutral-fill-secondary-rest) !important;
    cursor: not-allowed;
    pointer-events: none;
}


    [b-5upkyn31e7] :not(fluent-menu-item) .fluent-nav-link.disabled .fluent-nav-icon {
        fill: var(--neutral-stroke-rest) !important;
    }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/NavMenu/FluentNavMenu.razor.rz.scp.css */
/*  NavMenu */
.fluent-nav-menu[b-vs37bumpa7] {
    padding: 0 2px;
    
}

[b-vs37bumpa7] .fluent-nav-item.expander:focus-within {
    outline-offset: 1px;
}

[b-vs37bumpa7] .fluent-nav-item {
    margin: calc(var(--design-unit) * 1px) 0;
    -webkit-user-select: none;
    user-select: none;
}

    /* Hover and active highlighting */
    [b-vs37bumpa7] .fluent-nav-item .positioning-region:hover:not(:has(.disabled)) {
        cursor: pointer;
        background: var(--neutral-fill-secondary-rest);
    }

        /* Active item indicator */
        [b-vs37bumpa7] .fluent-nav-item a.active .positioning-region::before {
            content: "";
            display: block;
            position: absolute;
            right: unset;
            width: 3px;
            height: calc(((var(--base-height-multiplier) + var(--density)) * var(--design-unit) / 2) * 1px);
            background: var(--accent-fill-rest);
            border-radius: calc(var(--control-corner-radius) * 1px);
            margin: calc(var(--design-unit) * 2px) 2px;
            z-index: 5;
        }

[dir='rtl'] *[b-vs37bumpa7]  .fluent-nav-item a.active .positioning-region::before {
    left: unset;
}

[b-vs37bumpa7] .content-region {
    display: flex;
    align-items: center;
    white-space: nowrap;
    width: 100%;
    margin-inline-start: calc(var(--design-unit) * 2px);
}

/* Nav items */
[b-vs37bumpa7] .fluent-nav-item .positioning-region {
    display: flex;
    width: 100%;
    position: relative;
    align-items: center;
    box-sizing: border-box;
    background: var(--neutral-fill-stealth-rest);
    border: calc(var(--stroke-width) * 1px) solid transparent;
    border-radius: calc(var(--control-corner-radius) * 1px);
    min-height: calc(((var(--base-height-multiplier) + var(--density)) * var(--design-unit) + 1) * 1px);
}

[b-vs37bumpa7] .fluent-nav-group .fluent-nav-item:last-of-type, .fluent-nav-menu .fluent-nav-item:last-of-type[b-vs37bumpa7] {
    margin-bottom: 2px;
}

/* level indenting */
[b-vs37bumpa7] .fluent-nav-group * .fluent-nav-menu > .fluent-nav-item .content-region {
    padding-inline-start: 24px;
}

[b-vs37bumpa7] .fluent-nav-group * .fluent-nav-menu > .fluent-nav-item * .fluent-nav-menu > .fluent-nav-item .content-region {
    padding-inline-start: 48px;
}

[b-vs37bumpa7] .fluent-nav-group * .fluent-nav-menu > .fluent-nav-item * .fluent-nav-menu > .fluent-nav-item * .fluent-nav-menu > .fluent-nav-item .content-region {
    padding-inline-start: 72px;
}

[b-vs37bumpa7] .fluent-nav-group * .fluent-nav-menu > .fluent-nav-item * .fluent-nav-menu > .fluent-nav-item * .fluent-nav-menu > .fluent-nav-item * .fluent-nav-menu > .fluent-nav-item .content-region {
    padding-inline-start: 96px;
}

[b-vs37bumpa7] .fluent-nav-text {
    margin-inline-start: calc(var(--design-unit) * 2px + 2px);
    overflow: hidden;
    text-overflow: ellipsis;
    width: calc(100% - 70px);
}

/* collapsed */
[b-vs37bumpa7].collapsed .fluent-nav-text {
    display: none;
}

[b-vs37bumpa7].collapsed .expand-collapse-button {
    display: none;
}

[b-vs37bumpa7].collapsed .fluent-nav-group * .fluent-nav-menu > .fluent-nav-item {
    display: none;
}

    [b-vs37bumpa7].collapsed .fluent-nav-group * .fluent-nav-menu > .fluent-nav-item * .fluent-nav-menu > .fluent-nav-item {
        display: none;
    }

        [b-vs37bumpa7].collapsed .fluent-nav-group * .fluent-nav-menu > .fluent-nav-item * .fluent-nav-menu > .fluent-nav-item * .fluent-nav-menu > .fluent-nav-item {
            display: none;
        }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Overflow/FluentOverflow.razor.rz.scp.css */
.fluent-overflow[orientation="horizontal"][b-vceposnczs] {
    display: flex;
    flex-direction: row;
    overflow-x: hidden;
    gap: 5px;
}

.fluent-overflow[orientation="vertical"][b-vceposnczs] {
    display: flex;
    flex-direction: column;
    overflow-y: hidden;
}

.fluent-overflow-more[b-vceposnczs] {
    min-width: 32px;
    max-width: 32px;
}

.fluent-overflow[b-vceposnczs]  > *[overflow] {
    display: none;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Overlay/FluentOverlay.razor.rz.scp.css */
.fluent-overlay[b-xkrr7evqik] {
    inset: 0px;
    display: flex;
    pointer-events: auto;    
    width: 100%;
    height: 100%;
    overflow: hidden auto;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Pagination/FluentPaginator.razor.rz.scp.css */
.paginator[b-mskuhp0vb1] {
    display: flex;
    /*border-top: 1px solid var(--neutral-stroke-divider-rest);*/
    margin-top: 0.5rem;
    padding: 0.25rem 0;
    align-items: center;
}

.pagination-text[b-mskuhp0vb1] {
    margin: 0 0.5rem;
}

.paginator-nav[b-mskuhp0vb1] {
    padding: 0; 
    display: flex;
    margin-inline-start: auto;
    margin-inline-end: 0;
    gap: 0.5rem;
    align-items: center;
}

    
[dir="rtl"] *[b-mskuhp0vb1]  fluent-button > svg {
    transform: rotate(180deg);
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Popover/FluentPopover.razor.rz.scp.css */
.fluent-popover-content[b-qp3z8ghd2d]  {
    font-family: var(--body-font);
    -webkit-font-smoothing: antialiased;
    line-height: 27px;
    overflow-wrap: break-word;
    word-break: break-word;
    hyphens: auto;
    width: 100%;
    padding: 1em;
}

    .fluent-popover-content div[part="header"][b-qp3z8ghd2d] {
        font-size: 20px;
        font-weight: 600;
        width: inherit;
        margin-bottom: 12px;
    }

    .fluent-popover-content div[part="body"][b-qp3z8ghd2d] {
        height: 100%;
    }

    .fluent-popover-content div[part="footer"][b-qp3z8ghd2d] {
        font-size: 14px;
        font-weight: normal;
        width: inherit;
        margin-top: 12px;
    }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/PresenceBadge/FluentPresenceBadge.razor.rz.scp.css */
.fluent-presence-badge[b-1o8tp31nhy] {
    position: relative;
    display: inline-block;
    --fluent-presence-badge-border-size: 2px;
}

    .fluent-presence-badge[b-1o8tp31nhy]  *:first-child {
        display: block;
    }

    .fluent-presence-badge[b-1o8tp31nhy]  > img {
        border-radius: 999px;
        aspect-ratio: 1 / 1;
    }

    .fluent-presence-badge[b-1o8tp31nhy]  .status {
        display: block;
        position: absolute;
        background-color: var(--neutral-layer-1);
        bottom: calc(-1 * var(--fluent-presence-badge-border-size));
        right: calc(-1 * var(--fluent-presence-badge-border-size));
        border-radius: 999px;
        border: var(--fluent-presence-badge-border-size) solid var(--neutral-layer-1);
    }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/ProfileMenu/FluentProfileMenu.razor.rz.scp.css */
.fluent-profile-menu[b-rsm9d6pikk] {
}

    .fluent-profile-menu[b-rsm9d6pikk]  > .fluent-persona > .name {
        display: none;
    }

    .fluent-profile-menu[top-corner][b-rsm9d6pikk]  fluent-anchored-region {
        transform: unset !important;
        left: unset;
        right: -4px;
    }

[dir="rtl"] .fluent-profile-menu[top-corner][b-rsm9d6pikk]  fluent-anchored-region {
    transform: unset !important;
    left: -4px;
    right: unset;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/PullToRefresh/FluentPullToRefresh.razor.rz.scp.css */
.fluent-pull-container[b-rq0hhda1ik] {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    height: 100%;
}

    .fluent-pull-container div[part="tip"][b-rq0hhda1ik] {
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--neutral-layer-2);
        color: var(--neutral-base-color);
        padding: 0.5rem;
        height: var(--fluent-pull-refresh-head-height, 50px);
        width: 100%;
    }

        .fluent-pull-container div[part="tip"][direction="down"][b-rq0hhda1ik] {
            position: relative;
            top: 0px;
        }

        .fluent-pull-container div[part="tip"][direction="up"][b-rq0hhda1ik] {
            position: relative;
            bottom: 0px;
        }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Radio/FluentRadio.razor.rz.scp.css */
fluent-radio[b-98313echfq] {
    margin: calc(var(--design-unit) * 1px) 0;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/SortableList/FluentSortableList.razor.rz.scp.css */
/* 
  you need the ::deep identifier if you are using scoped styles like this
  because scoped styles are only applied to markup in the component, not
  to the markup inside the render fragment.
*/

.fluent-sortable-list[b-0uum8h8hrq] {
    --fluent-sortable-list-background-color: var(--neutral-layer-2);
    --fluent-sortable-list-item-height: calc(var(--design-unit) * 8px);
    --fluent-sortable-list-filtered: var(--warning);
    border: calc(var(--stroke-width) * 1px) solid var(--neutral-stroke-input-active);
    border-radius: calc(var(--control-corner-radius) * 1px);
    padding: calc(var(--design-unit) * 1px);
    min-height: var(--fluent-sortable-list-item-height);
}

    /*Not sure yet if this can be deleted. Need to test on iOS*/
    /*.fluent-sortable-list ::deep .sortable-fallback {
        opacity: 1 !important
    }*/

    .fluent-sortable-list[b-0uum8h8hrq]  .sortable-grab {
        cursor: grab;
        background-color: var(--neutral-layer-1);
        display: flex;
        position: relative;
        height: 100%;
        left: calc(var(--design-unit) * -2px);
        right: unset;
        border-radius: calc(var(--control-corner-radius)* 1px) 0 0 calc(var(--control-corner-radius)* 1px);
        width: 32px;
        padding: 0 5px;
    }

    [dir='rtl'] .fluent-sortable-list[b-0uum8h8hrq]  .sortable-grab {
        left: unset;
        right: calc(var(--design-unit) * -2px);
        border-radius: 0 calc(var(--control-corner-radius)* 1px) calc(var(--control-corner-radius)* 1px) 0;
    }

.fluent-sortable-list[b-0uum8h8hrq]  .sortable-item {
    display: flex;
    align-items: center;
    height: var(--fluent-sortable-list-item-height) !important;
    background-color: var(--fluent-sortable-list-background-color);
    border: calc(var(--stroke-width) * 1px) solid var(--neutral-stroke-input-active);
    border-radius: calc(var(--control-corner-radius) * 1px);
    -moz-user-select: none;
    -ms-user-select: none;
    -webkit-user-select: none;
    user-select: none;
    padding: 0 calc(var(--design-unit) * 2px);
    margin-bottom: 2px;
}

    .fluent-sortable-list[b-0uum8h8hrq]  .sortable-item:last-of-type {
        margin-bottom: 0;
    }

.fluent-sortable-list[b-0uum8h8hrq]  .sortable-ghost > .sortable-item-content {
    background-color: var(--neutral-layer-1) !important;
}

.fluent-sortable-list[b-0uum8h8hrq]  .sortable-ghost {
    background: var(--neutral-layer-1) !important;
    border: calc(var(--stroke-width) * 1px) dotted var(--accent-fill-rest) !important;
}

.fluent-sortable-list > .sortable-item:is(.filtered)[b-0uum8h8hrq] {
    background: var(--fluent-sortable-list-filtered);
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Splitter/FluentMultiSplitter.razor.rz.scp.css */
.fluent-multi-splitter[b-ug2ltnxcve] {
    /* Resize Icon colors */
    --fluent-multi-splitter-color: var(--neutral-stroke-strong-rest);
    --fluent-multi-splitter-color-active: var(--neutral-stroke-strong-hover);

    /* Bar colors */
    --fluent-multi-splitter-background-color: var(--neutral-stroke-rest);
    --fluent-multi-splitter-background-color-active: var(--neutral-stroke-hover);
    --fluent-multi-splitter-hover-opacity: 0.8;
    
    /* Bar size */
    --fluent-multi-splitter-bar-size: 8px;

    /* Styles */
    display: flex;
    flex-wrap: nowrap;
    width: 100%;
    height: 100%;
}

    /* Resize bar */
    .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar {
        flex: 0 0 auto;
        position: relative;
        text-align: center;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        color: var(--fluent-multi-splitter-color);
        background-color: var(--fluent-multi-splitter-background-color);
        opacity: 0.4;
        user-select: none;
        font-size: 8px;
    }

        .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="resize"] {
            border: 1px solid var(--fluent-multi-splitter-color);
            border-radius: 1px;
        }

        /* Collapse button */
        .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="collapse"] {
            display: table;
        }

            .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="collapse"]:before {
                line-height: normal;
                display: table-cell;
            }

            .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="collapse"]:hover {
                cursor: pointer;
            }

        /* Expand button */
        .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="expand"] {
            display: table;
        }

            .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="expand"]:before {
                line-height: normal;
                display: table-cell;
            }

            .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="expand"]:hover {
                cursor: pointer;
            }

    /* Hover and Active */
    .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar[status="resizable"]:hover {
        background-color: var(--fluent-multi-splitter-background-color);
        opacity: var(--fluent-multi-splitter-hover-opacity);
    }

    .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar[status="resizable"]:active {
        background-color: var(--fluent-multi-splitter-background-color-active);
        opacity: var(--fluent-multi-splitter-hover-opacity);
    }

        .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar[status="resizable"]:active > span[part="expand"],
        .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar[status="resizable"]:active > span[part="resize"],
        .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar[status="resizable"]:active > span[part="collapse"] {
            color: var(--fluent-multi-splitter-color-active);
        }

        .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar[status="resizable"]:active > span[part="resize"] {
            border: 1px solid var(--fluent-multi-splitter-color-active);
        }

    /* Disabled */
    .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-bar[status="resizable"]:disabled {
        opacity: 0.2;
    }

/* Horizontal bar */
.fluent-multi-splitter[orientation="horizontal"][b-ug2ltnxcve] {
    flex-direction: row;
}

    .fluent-multi-splitter[orientation="horizontal"][b-ug2ltnxcve]  > .fluent-multi-splitter-bar {
        flex-direction: column;
        width: var(--fluent-multi-splitter-bar-size);
    }

        .fluent-multi-splitter[orientation="horizontal"][b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="collapse"]:before {
            content: '\025C0;';            
        }

        .fluent-multi-splitter[orientation="horizontal"][b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="resize"] {
            height: 16px;
            margin: 2px 0;
        }

        .fluent-multi-splitter[orientation="horizontal"][b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="expand"]:before {
            content: '\025B6;';
        }

        .fluent-multi-splitter[orientation="horizontal"][b-ug2ltnxcve]  > .fluent-multi-splitter-bar[status="resizable"]:hover {
            cursor: ew-resize;
        }

/* Vertical bar */
.fluent-multi-splitter[orientation="vertical"][b-ug2ltnxcve] {
    flex-direction: column;
}

    .fluent-multi-splitter[orientation="vertical"][b-ug2ltnxcve]  > .fluent-multi-splitter-bar {
        flex-direction: row;
        height: var(--fluent-multi-splitter-bar-size);
    }

        .fluent-multi-splitter[orientation="vertical"][b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="collapse"]:before {
            content: '\025B2;';
        }

        .fluent-multi-splitter[orientation="vertical"][b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="resize"] {
            width: 16px;
            margin: 0 2px;
        }

        .fluent-multi-splitter[orientation="vertical"][b-ug2ltnxcve]  > .fluent-multi-splitter-bar > span[part="expand"]:before {
            content: '\025BC;';
        }

        .fluent-multi-splitter[orientation="vertical"][b-ug2ltnxcve]  > .fluent-multi-splitter-bar[status="resizable"]:hover {
            cursor: ns-resize;
        }

/* Pane */
.fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-pane {
    overflow: hidden;
    position: relative;
    flex: 0 1 auto;
}

    .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-pane[status="collapsed"] {
        flex: 0 1 0% !important;
        overflow: hidden !important;
        display: block !important;
    }

    .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-pane[status="lastresizable"] {
        flex: 1 1 auto;
    }

    .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-pane[status="resizable"] {
    }

    .fluent-multi-splitter[b-ug2ltnxcve]  > .fluent-multi-splitter-pane[status="locked"] {
    }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Stack/FluentStack.razor.rz.scp.css */
.stack-vertical[b-0nr62qx0mz] {
    display: flex;
    flex-direction: column;
}

.stack-horizontal[b-0nr62qx0mz] {
    display: flex;
    flex-direction: row;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Tabs/FluentTab.razor.rz.scp.css */
fluent-tab[b-urryfr514w] {
    -webkit-user-select: none;
    user-select: none;
    font-weight: 400;
}

    fluent-tab[aria-selected="true"][b-urryfr514w] {
        font-weight: 600;
        z-index: 1;
    }

    fluent-tab[overflow][b-urryfr514w] {
        display: none;
    }

    fluent-tab[disabled][b-urryfr514w] {
        cursor: not-allowed;
        color: var(--neutral-foreground-hint)
    }

[b-urryfr514w] .fluent-tab-icon {
    fill: var(--neutral-fill-strong-active);
    min-width: 18px;
    max-width: 18px;
}

[b-urryfr514w] .fluent-tab-close {
    fill: var(--neutral-fill-strong-active);
    cursor: pointer;
    max-width: 12px;
    max-height: 12px;
    margin-left: 6px;
}

    [b-urryfr514w] .fluent-tab-close:hover {
        fill: var(--neutral-fill-strong-hover);
    }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Toast/FluentToast.razor.rz.scp.css */
.fluent-toast[b-uq7572caeb] {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    flex-grow: initial;
    margin-bottom: 10px;
    padding: 12px;
    position: relative;
    min-width: 292px;
    max-width: 500px;
    min-height: 44px;
    font-family: var(--body-font);
    background-color: var(--neutral-layer-floating);
    box-shadow: var(--elevation-shadow-tooltip);
    border-radius: calc( var(--control-corner-radius) * 1px);
    color: var(--neutral-foreground-rest);
    overflow-wrap: break-word;
    word-break: break-word;
    -webkit-hyphens: auto;
    hyphens: auto;
    -webkit-user-select: none;
    user-select: none;
    overflow: hidden;
    pointer-events: auto;
    animation-name: fadein-b-uq7572caeb;
    animation-duration: 0.5s;
    animation-delay: 0s;
}


    .fluent-toast[b-uq7572caeb]  .fluent-toast-title {
        flex-grow: 1;
        font-weight: 600;
        font-size: 14px;
    }

    .fluent-toast[b-uq7572caeb]  .fluent-toast-action {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        width: 48px;
        min-width: 48px;
        height: 20px;
        font-weight: 400;
    }

    .fluent-toast[b-uq7572caeb]  .fluent-toast-body {
        display: flex;
        flex-direction: column;
        width: calc( 100% - 12px);
        justify-content: flex-start;
        padding-inline-start: 24px;

    }

    .fluent-toast[b-uq7572caeb]  .fluent-toast-small {
        font-size: 12px;
        line-height: 16px;
    }

    .fluent-toast[b-uq7572caeb]  .fluent-toast-action:has(.timestamp) {
        cursor: initial;
    }

    .fluent-toast[b-uq7572caeb]  .fluent-toast-details {
        font-size: 14px;
        line-height: 20px;
    }

    .fluent-toast[b-uq7572caeb]  .fluent-toast-progressbar {
        display: grid;
        padding: 8px 0px 0px;
        width: 100%;
    }

    .fluent-toast[b-uq7572caeb]  .fluent-toast-progressbar-percentage {
        font-size: 12px;
        line-height: 16px;
        padding-top: 7px;
    }

    .fluent-toast[b-uq7572caeb]  .fluent-toast-actions {
        display: flex;
        align-items: flex-end;
        gap: 16px;
        height: 28px;
        width: calc( 100% - 12px);
        justify-content: flex-start;
        padding-inline-start: 24px;
    }

@keyframes fadein-b-uq7572caeb {
    from {
        opacity: 0;
    }

    to {
        opacity: 1;
    }
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Toast/FluentToastProvider.razor.rz.scp.css */
.fluent-toast-provider[b-wmvy1145n8] {
    display: flex;
    flex-direction: column;
    position: fixed;
    z-index: 999;
}

.position-topleft[b-wmvy1145n8],
.position-topright[b-wmvy1145n8],
.position-topcenter[b-wmvy1145n8] {
    top: 0;
}

.position-bottomleft[b-wmvy1145n8],
.position-bottomright[b-wmvy1145n8],
.position-bottomcenter[b-wmvy1145n8] {
    bottom: 0;
}

.position-topleft[b-wmvy1145n8] {
    top: 24px;
    left: 24px;
}

.position-topright[b-wmvy1145n8] {
    top: 24px;
    right: 24px;
}

.position-topcenter[b-wmvy1145n8] {
    top: 24px;
    left: 50%;
    transform: translate(-50%, 0%);
}

.position-bottomleft[b-wmvy1145n8] {
    bottom: 24px;
    left: 24px;
}

.position-bottomright[b-wmvy1145n8] {
    bottom: 24px;
    right: 24px;
}

.position-bottomcenter[b-wmvy1145n8] {
    bottom: 24px;
    left: 50%;
    transform: translate(-50%, 0%);
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/TreeView/FluentTreeItem.razor.rz.scp.css */
.treeitem-text[b-toee5o4b4e] {
    pointer-events: none;
}
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Wizard/FluentWizard.razor.rz.scp.css */
.fluent-wizard[b-l81u9o5gjc] {
    display: grid;
    height: 100%;
    --fluent-wizard-circle-size: 24px;
    --fluent-wizard-spacing: 4px;
}

    .fluent-wizard[border-outside][b-l81u9o5gjc] {
        border: 1px solid var(--neutral-stroke-hover);
    }

    .fluent-wizard > ol[b-l81u9o5gjc] {
        display: flex;
        padding-inline-start: 0px;
        margin-block-start: 0px;
        margin-block-end: 0px;
        padding: 10px;
    }

    .fluent-wizard .fluent-wizard-buttons[b-l81u9o5gjc] {
        display: flex;
        justify-content: end;
    }

    .fluent-wizard .fluent-wizard-buttons[border-inside][b-l81u9o5gjc] {
        border-top: 1px solid var(--neutral-stroke-hover);
    }

    /* Wizard with steps on Left */
    .fluent-wizard[position="left"][b-l81u9o5gjc] {
        grid-template-columns: auto 1fr;
        grid-template-rows: 1fr auto;
    }

        .fluent-wizard[position="left"] > ol[b-l81u9o5gjc] {
            flex-direction: column;
            grid-column: 1;
            grid-row: 1 / span 2;
        }

            .fluent-wizard[position="left"] > ol[border-inside][b-l81u9o5gjc] {
                border-right: 1px solid var(--neutral-stroke-hover);
            }

        .fluent-wizard[position="left"] .fluent-wizard-content[b-l81u9o5gjc] {
            grid-column: 2;
            grid-row: 1;
            margin: 5px 10px 0px 15px;
        }

        .fluent-wizard[position="left"] .fluent-wizard-buttons[b-l81u9o5gjc] {
            grid-column: 2;
            grid-row: 2;
            text-align-last: end;
            padding: 10px;
        }

    /* Wizard with steps on Top */
    .fluent-wizard[position="top"][b-l81u9o5gjc] {
        grid-template-columns: auto;
        grid-template-rows: auto 1fr auto;
    }

        .fluent-wizard[position="top"] > ol[b-l81u9o5gjc] {
            flex-direction: row;
            justify-content: center;
        }

            .fluent-wizard[position="top"] > ol[border-inside][b-l81u9o5gjc] {
                border-bottom: 1px solid var(--neutral-stroke-hover);
            }

        .fluent-wizard[position="top"] .fluent-wizard-content[b-l81u9o5gjc] {
            margin: 5px 10px 0px 10px;
        }

        .fluent-wizard[position="top"] .fluent-wizard-buttons[b-l81u9o5gjc] {
            padding: 10px;
        }
/* _content/Microsoft.FluentUI.AspNetCore.Components/Components/Wizard/FluentWizardStep.razor.rz.scp.css */
/* Wizard with steps */
.fluent-wizard > ol > li[b-a5o5s1yurv] {
    position: relative;
    display: flex;
}

/* Wizard with steps on Left */
.fluent-wizard[position="left"] > ol > li[b-a5o5s1yurv] {
    gap: 10px;
}

    .fluent-wizard[position="left"] > ol > li[b-a5o5s1yurv]:before {
        flex: 0 0 var(--fluent-wizard-circle-size);
        height: var(--fluent-wizard-circle-size);
    }

    .fluent-wizard[position="left"] > ol > li:last-child[b-a5o5s1yurv] {
        height: auto;
    }

    .fluent-wizard[position="left"] > ol > li:not(:last-child)[b-a5o5s1yurv]:after {
        content: "";
        position: absolute;
        left: 0;
        top: calc(var(--fluent-wizard-circle-size) + var(--fluent-wizard-spacing));
        bottom: var(--fluent-wizard-spacing);
        order: -1;
        transform: translateX(calc(var(--fluent-wizard-circle-size) / 2));
        width: 2px;
        background-color: var(--neutral-stroke-hover);
    }

/* Wizard with steps on Top */
.fluent-wizard[position="top"] > ol > li[b-a5o5s1yurv] {
    flex-direction: column;
    flex: 1;
    text-align: center;
}

    .fluent-wizard[position="top"] > ol > li[b-a5o5s1yurv]:before {
        width: var(--fluent-wizard-circle-size);
        height: var(--fluent-wizard-circle-size);
        margin-left: calc((100% - var(--fluent-wizard-circle-size)) / 2);
    }

    .fluent-wizard[position="top"] > ol > li:not(:last-child)[b-a5o5s1yurv]:after {
        content: "";
        position: absolute;
        left: calc(50% + calc(var(--fluent-wizard-circle-size) / 2 + var(--fluent-wizard-spacing)));
        right: unset;
        top: calc(var(--fluent-wizard-circle-size) / 2);
        width: calc(100% - var(--fluent-wizard-circle-size) - calc(var(--fluent-wizard-spacing) * 2));
        height: 2px;
        order: -1;
        background-color: var(--neutral-stroke-hover);
    }


    [dir="rtl"] .fluent-wizard[position="top"] > ol > li:not(:last-child)[b-a5o5s1yurv]:after {
        left: unset;
        right: calc(50% + calc(var(--fluent-wizard-circle-size) / 2 + var(--fluent-wizard-spacing)));
    }

/* Icon */
.fluent-wizard > ol > li .fluent-wizard-icon[b-a5o5s1yurv] {
    min-width: calc(1.2 * var(--fluent-wizard-circle-size));
    min-height: calc(1.2 * var(--fluent-wizard-circle-size));
}

/* Icon Number */
.fluent-wizard > ol > li .fluent-wizard-icon-number[b-a5o5s1yurv] {
    margin-top: calc(var(--fluent-wizard-circle-size) * -1 - 3px);
    font-size: small;
    color: var(--accent-fill-rest);
    text-align: center;
}

.fluent-wizard[position="top"] > ol > li .fluent-wizard-icon-number[b-a5o5s1yurv] {
    height: var(--fluent-wizard-circle-size);
}

.fluent-wizard[position="left"] > ol > li .fluent-wizard-icon-number[b-a5o5s1yurv] {
    width: var(--fluent-wizard-circle-size);
    height: var(--fluent-wizard-circle-size);
}

.fluent-wizard > ol > li .fluent-wizard-icon-number[disabled][b-a5o5s1yurv] {
    opacity: var(--disabled-opacity);
}

.fluent-wizard > ol > li .fluent-wizard-icon-number[status='previous']:not([disabled])[b-a5o5s1yurv] {
    color: var(--foreground-on-accent-rest);
}

.fluent-wizard > ol > li .fluent-wizard-icon-number[status='current']:not([disabled])[b-a5o5s1yurv] {
    color: var(--foreground-on-accent-rest);
}

.fluent-wizard > ol > li .fluent-wizard-icon-number[status='next']:not([disabled])[b-a5o5s1yurv] {
    color: var(--accent-fill-rest);
}

/* Title */
.fluent-wizard > ol > li .fluent-wizard-title[b-a5o5s1yurv] {
    margin-block-start: 2px;
    margin-block-end: 0px;
    white-space: nowrap;
}

.fluent-wizard > ol > li[status='next'][b-a5o5s1yurv]  .fluent-wizard-title {
    color: var(--neutral-stroke-strong-rest);
}

.fluent-wizard > ol > li[status='current'][b-a5o5s1yurv]  .fluent-wizard-title {
    font-weight: bold;
}

/* Summary */
.fluent-wizard > ol > li[b-a5o5s1yurv]  .fluent-wizard-summary {
    margin-block-start: 4px;
    margin-block-end: 0px;
    font-size: smaller;
}

.fluent-wizard > ol > li[status='current'][b-a5o5s1yurv]  .fluent-wizard-summary {
    color: var(--accent-fill-rest);
}

.fluent-wizard > ol > li[status='next'][b-a5o5s1yurv]  .fluent-wizard-summary {
    color: var(--neutral-stroke-strong-rest);
}

/* Body */
.fluent-wizard-body[b-a5o5s1yurv] {
    margin: 10px;
}

/* Hidden */
@media (max-width: 599.98px) {
    .fluent-wizard > ol > li[b-a5o5s1yurv]  > div[hidden-when~="xs"] {
        display: none;
    }
}

@media (min-width: 600px) and (max-width: 959.98px) {
    .fluent-wizard > ol > li[b-a5o5s1yurv]  > div[hidden-when~="sm"] {
        display: none;
    }
}

@media (min-width: 960px) and (max-width: 1279.98px) {
    .fluent-wizard > ol > li[b-a5o5s1yurv]  > div[hidden-when~="md"] {
        display: none;
    }
}

@media (min-width: 1280px) and (max-width: 1919.98px) {
    .fluent-wizard > ol > li[b-a5o5s1yurv]  > div[hidden-when~="lg"] {
        display: none;
    }
}

@media (min-width: 1920px) and (max-width: 2559.98px) {
    .fluent-wizard > ol > li[b-a5o5s1yurv]  > div[hidden-when~="xl"] {
        display: none;
    }
}

@media (min-width: 2560px) {
    .fluent-wizard > ol > li[b-a5o5s1yurv]  > div[hidden-when~="xxl"] {
        display: none;
    }
}</con:responseContent>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1da8b4243a6031f"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 10 Apr 2024 12:26:08 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:33 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="Response 2" id="e0b13930-7615-4803-a39a-b269e97cd105" httpResponseStatus="304" mediaType="text/css">
        <con:settings/>
        <con:responseContent/>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1da8b4243a6031f"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 10 Apr 2024 12:26:08 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:28 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/js/app.js" method="GET" resourcePath="/js/app.js" id="f197a775-7826-4e09-be10-757c5f6f7b3a">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="Response 1" id="ce064692-cc1d-4ba7-ab46-fe7e67a49e08" httpResponseStatus="200" mediaType="text/javascript" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:responseContent><![CDATA[// To avoid Flash of Unstyled Content, the body is hidden by default with
// the before-upgrade CSS class. Here we'll find the first web component
// and wait for it to be upgraded. When it is, we'll remove that class
// from the body.
const firstUndefinedElement = document.body.querySelector(":not(:defined)");

if (firstUndefinedElement) {
    customElements.whenDefined(firstUndefinedElement.localName).then(() => {
        document.body.classList.remove("before-upgrade");
    });
} else {
    // In the event this code doesn't run until after they've all been upgraded
    document.body.classList.remove("before-upgrade");
}

// Register a global click event listener to handle copy button clicks.
// Required because an "onclick" attribute is denied by CSP.
document.addEventListener("click", function (e) {
    if (e.target.type === "button" && e.target.getAttribute("data-copybutton")) {
        buttonCopyTextToClipboard(e.target);
        e.stopPropagation();
    }
});

let isScrolledToContent = false;
let lastScrollHeight = null;

window.getIsScrolledToContent = function () {
    return isScrolledToContent;
}

window.setIsScrolledToContent = function (value) {
    if (isScrolledToContent != value) {
        isScrolledToContent = value;
    }
}

window.resetContinuousScrollPosition = function () {
    // Reset to scrolling to the end of the content after switching.
    setIsScrolledToContent(false);
}

window.initializeContinuousScroll = function () {
    // Reset to scrolling to the end of the content when initializing.
    // This needs to be called because the value is remembered across Aspire pages because the browser isn't reloading.
    resetContinuousScrollPosition();

    const container = document.querySelector('.continuous-scroll-overflow');
    if (container == null) {
        return;
    }

    // The scroll event is used to detect when the user scrolls to view content.
    container.addEventListener('scroll', () => {
        var v = !isScrolledToBottom(container);
        setIsScrolledToContent(v);
   }, { passive: true });

    // The ResizeObserver reports changes in the grid size.
    // This ensures that the logs are scrolled to the bottom when there are new logs
    // unless the user has scrolled to view content.
    const observer = new ResizeObserver(function () {
        lastScrollHeight = container.scrollHeight;
        if (!getIsScrolledToContent()) {
            container.scrollTop = lastScrollHeight;
        }
    });
    for (const child of container.children) {
        observer.observe(child);
    }
};

function isScrolledToBottom(container) {
    lastScrollHeight = lastScrollHeight || container.scrollHeight

    // There can be a race between resizing and scrolling events.
    // Use the last scroll height from the resize event to figure out if we've scrolled to the bottom.
    if (!getIsScrolledToContent()) {
        if (lastScrollHeight != container.scrollHeight) {
            console.log(`lastScrollHeight ${lastScrollHeight} doesn't equal container scrollHeight ${container.scrollHeight}.`);
        }
    }

    const marginOfError = 5;
    const containerScrollBottom = lastScrollHeight - container.clientHeight;
    const difference = containerScrollBottom - container.scrollTop;

    return difference < marginOfError;
}

window.buttonCopyTextToClipboard = function(element) {
    const text = element.getAttribute("data-text");
    const precopy = element.getAttribute("data-precopy");
    const postcopy = element.getAttribute("data-postcopy");

    copyTextToClipboard(element.getAttribute("id"), text, precopy, postcopy);
}

window.copyTextToClipboard = function (id, text, precopy, postcopy) {
    const button = document.getElementById(id);

    // If there is a pending timeout then clear it. Otherwise the pending timeout will prematurely reset values.
    if (button.dataset.copyTimeout) {
        clearTimeout(button.dataset.copyTimeout);
        delete button.dataset.copyTimeout;
    }

    const copyIcon = button.querySelector('.copy-icon');
    const checkmarkIcon = button.querySelector('.checkmark-icon');
    const anchoredTooltip = document.querySelector(`fluent-tooltip[anchor="${id}"]`);
    const tooltipDiv = anchoredTooltip ? anchoredTooltip.children[0] : null;
    navigator.clipboard.writeText(text)
        .then(() => {
            if (tooltipDiv) {
                tooltipDiv.innerText = postcopy;
            }
            copyIcon.style.display = 'none';
            checkmarkIcon.style.display = 'inline';
        })
        .catch(() => {
            if (tooltipDiv) {
                tooltipDiv.innerText = 'Could not access clipboard';
            }
        });

    button.dataset.copyTimeout = setTimeout(function () {
        if (tooltipDiv) {
            tooltipDiv.innerText = precopy;
        }

        copyIcon.style.display = 'inline';
        checkmarkIcon.style.display = 'none';
        delete button.dataset.copyTimeout;
   }, 1500);
};

window.updateFluentSelectDisplayValue = function (fluentSelect) {
    if (fluentSelect) {
        fluentSelect.updateDisplayValue();
    }
}

function getThemeColors() {
    // Get colors from the current light/dark theme.
    var style = getComputedStyle(document.body);
    return {
        backgroundColor: style.getPropertyValue("--fill-color"),
        textColor: style.getPropertyValue("--neutral-foreground-rest")
    };
}

function fixTraceLineRendering(chartDiv) {
    // In stack area charts Plotly orders traces so the top line area overwrites the line of areas below it.
    // This isn't the effect we want. When the P50, P90 and P99 values are the same, the line displayed is P99
    // on the P50 area.
    //
    // The fix is to reverse the order of traces so the correct line is on top. There isn't a way to do this
    // with CSS because SVG doesn't support z-index. Node order is what determines the rendering order.
    //
    // https://github.com/plotly/plotly.js/issues/6579
    var parent = chartDiv.querySelector(".scatterlayer");

    if (parent.childNodes.length > 0) {
        for (var i = 1; i < parent.childNodes.length; i++) {
            parent.insertBefore(parent.childNodes[i], parent.firstChild);
        }
    }
}

window.updateChart = function (id, traces, xValues, rangeStartTime, rangeEndTime) {
    var chartContainerDiv = document.getElementById(id);
    var chartDiv = chartContainerDiv.firstChild;

    var themeColors = getThemeColors();

    var xUpdate = [];
    var yUpdate = [];
    var tooltipsUpdate = [];
    for (var i = 0; i < traces.length; i++) {
        xUpdate.push(xValues);
        yUpdate.push(traces[i].values);
        tooltipsUpdate.push(traces[i].tooltips);
    }

    var data = {
        x: xUpdate,
        y: yUpdate,
        text: tooltipsUpdate,
    };

    var layout = {
        xaxis: {
            type: 'date',
            range: [rangeEndTime, rangeStartTime],
            fixedrange: true,
            tickformat: "%X",
            color: themeColors.textColor
        }
    };

    Plotly.update(chartDiv, data, layout);

    fixTraceLineRendering(chartDiv);
};

window.initializeChart = function (id, traces, xValues, rangeStartTime, rangeEndTime, serverLocale) {
    registerLocale(serverLocale);

    var chartContainerDiv = document.getElementById(id);

    // Reusing a div can create issues with chart lines appearing beyond the end range.
    // Workaround this issue by replacing the chart div. Ensures we start from a new state.
    var chartDiv = document.createElement("div");
    chartContainerDiv.replaceChildren(chartDiv);

    var themeColors = getThemeColors();

    var data = [];
    for (var i = 0; i < traces.length; i++) {
        var name = traces[i].name || "Value";
        var t = {
            x: xValues,
            y: traces[i].values,
            name: name,
            text: traces[i].tooltips,
            hoverinfo: 'text',
            stackgroup: "one"
        };
        data.push(t);
    }

    // Explicitly set the width and height based on the container div.
    // If there is no explicit width and height, Plotly will use the rendered container size.
    // However, if the container isn't visible then it uses a default size.
    // Being explicit ensures the chart is always the correct size.
    var width = parseInt(chartContainerDiv.style.width);
    var height = parseInt(chartContainerDiv.style.height);

    var layout = {
        width: width,
        height: height,
        paper_bgcolor: themeColors.backgroundColor,
        plot_bgcolor: themeColors.backgroundColor,
        margin: { t: 0, r: 0, b: 40, l: 50 },
        xaxis: {
            type: 'date',
            range: [rangeEndTime, rangeStartTime],
            fixedrange: true,
            tickformat: "%X",
            color: themeColors.textColor
        },
        yaxis: {
            rangemode: "tozero",
            fixedrange: true,
            color: themeColors.textColor
        },
        hovermode: "x",
        showlegend: true,
        legend: {
            orientation: "h",
            font: {
                color: themeColors.textColor
            },
            traceorder: "normal",
            itemclick: false,
            itemdoubleclick: false
        }
    };

    var options = { scrollZoom: false, displayModeBar: false };

    Plotly.newPlot(chartDiv, data, layout, options);

    fixTraceLineRendering(chartDiv);
};

function registerLocale(serverLocale) {
    // Register the locale for Plotly.js. This is to enable localization of time format shown by the charts.
    // Changing plotly.js time formatting is better than supplying values from the server which is very difficult to do correctly.

    // Right now necessary changes are to:
    // -Update AM/PM
    // -Update time format to 12/24 hour.
    var locale = {
        moduleType: 'locale',
        name: 'en',
        dictionary: {
            'Click to enter Colorscale title': 'Click to enter Colourscale title'
        },
        format: {
            days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
            periods: serverLocale.periods,
            dateTime: '%a %b %e %X %Y',
            date: '%d/%m/%Y',
            time: serverLocale.time,
            decimal: '.',
            thousands: ',',
            grouping: [3],
            currency: ['$', ''],
            year: '%Y',
            month: '%b %Y',
            dayMonth: '%b %-d',
            dayMonthYear: '%b %-d, %Y'
        }
    };
    Plotly.register(locale);
}

function isActiveElementInput() {
    const currentElement = document.activeElement;
    // fluent components may have shadow roots that contain inputs
    return currentElement.tagName.toLowerCase() === "input" || currentElement.tagName.toLowerCase().startsWith("fluent") ? isInputElement(currentElement, false) : false;
}

function isInputElement(element, isRoot, isShadowRoot) {
    const tag = element.tagName.toLowerCase();
    // comes from https://developer.mozilla.org/en-US/docs/Web/API/Element/input_event
    // fluent-select does not use <select /> element
    if (tag === "input" || tag === "textarea" || tag === "select" || tag === "fluent-select") {
        return true;
    }

    if (isShadowRoot || isRoot) {
        const elementChildren = element.children;
        for (let i = 0; i < elementChildren.length; i++) {
            if (isInputElement(elementChildren[i], false, isShadowRoot)) {
                return true;
            }
        }
    }

    const shadowRoot = element.shadowRoot;
    if (shadowRoot) {
        const shadowRootChildren = shadowRoot.children;
        for (let i = 0; i < shadowRootChildren.length; i++) {
            if (isInputElement(shadowRootChildren[i], false, true)) {
                return true;
            }
        }
    }

    return false;
}

window.registerGlobalKeydownListener = function(shortcutManager) {
    function hasNoModifiers(keyboardEvent) {
        return !keyboardEvent.altKey && !keyboardEvent.ctrlKey && !keyboardEvent.metaKey && !keyboardEvent.shiftKey;
    }

    // Shift in some but not all, keyboard layouts, is used for + and -
    function modifierKeysExceptShiftNotPressed(keyboardEvent) {
        return !keyboardEvent.altKey && !keyboardEvent.ctrlKey && !keyboardEvent.metaKey;
    }

    function calculateShortcut(e) {
        if (modifierKeysExceptShiftNotPressed(e)) {
            /* general shortcuts */
            switch (e.key) {
                case "?": // help
                    return 100;
                case "S": // settings
                    return 110;

                /* panel shortcuts */
                case "T": // toggle panel orientation
                    return 300;
                case "X": // close panel
                    return 310;
                case "R": // reset panel sizes
                    return 320;
                case "+": // increase panel size
                    return 330;
                case "_": // decrease panel size
                case "-":
                    return 340;
            }
        }

        if (hasNoModifiers(e)) {
            switch (e.key) {
                case "r": // go to resources
                    return 200;
                case "c": // go to console logs
                    return 210;
                case "s": // go to structured logs
                    return 220;
                case "t": // go to traces
                    return 230;
                case "m": // go to metrics
                    return 240;
            }
        }

        return null;
    }

    const keydownListener = function (e) {
        if (isActiveElementInput()) {
            return;
        }

        // list of shortcut enum codes is in src/Aspire.Dashboard/Model/IGlobalKeydownListener.cs
        // to serialize an enum from js->dotnet, we must pass the enum's integer value, not its name
        let shortcut = calculateShortcut(e);

        if (shortcut) {
            shortcutManager.invokeMethodAsync('OnGlobalKeyDown', shortcut);
        }
    }

    window.document.addEventListener('keydown', keydownListener);

    return {
        keydownListener: keydownListener,
    }
}

window.unregisterGlobalKeydownListener = function (keydownListener) {
    window.document.removeEventListener('keydown', keydownListener);
}

window.getBrowserTimeZone = function () {
    const options = Intl.DateTimeFormat().resolvedOptions();

    return options.timeZone;
}

window.focusElement = function(selector) {
    const element = document.getElementById(selector);
    if (element) {
        element.focus();
    }
}

// SIG // Begin signature block
// SIG // MIInzAYJKoZIhvcNAQcCoIInvTCCJ7kCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // YopWgxQ5lQqDAxlrY/KtM/v43BSE/qqCvZhiSWtUpiGg
// SIG // gg2FMIIGAzCCA+ugAwIBAgITMwAAA64tNVHIU49VHQAA
// SIG // AAADrjANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDg1OVoX
// SIG // DTI0MTExNDE5MDg1OVowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // 9CD8pjY3wxCoPmMhOkow7ycCltfqYnqk4wGNApzh2dTY
// SIG // +YqxozWTzJUOB38VxsgFQmXBFhOMdrGYGpvO9kdbNPkw
// SIG // HpTrW6hZqFuLLiRwGKEx4ZM5zVSqbHJuX2fPfUJ0Xmb+
// SIG // VrVsGw/BwBV2zz0rVtiSgqj3GeeGOsG7llfWyrSjyJqm
// SIG // 5DHE3o04BAI/NuhkHOv04euiqJGvHFCL8+fXvyD9OAxq
// SIG // 4fcJKtoyBb0PBA3oMNQeCsiUyLO+voZqVTOUsAWY0bN5
// SIG // YjkK4nq5DVaNdVrrowd5AX9gmz6D/TJTssns6pDCG00Y
// SIG // +Dh3ipWpnVmkhYcByyUSEKX3PLC8DkiAQQIDAQABo4IB
// SIG // gjCCAX4wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFIcf73Spl4cHOFoll27H9COd
// SIG // 4fE/MFQGA1UdEQRNMEukSTBHMS0wKwYDVQQLEyRNaWNy
// SIG // b3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQx
// SIG // FjAUBgNVBAUTDTIzMDAxMis1MDE4MzYwHwYDVR0jBBgw
// SIG // FoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0w
// SIG // SzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
// SIG // L3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDEx
// SIG // LTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYB
// SIG // BQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDEx
// SIG // LTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQBqyWA1Eu7PKNMjaaxl0V7gJ0XBysUo
// SIG // xZluMHJXFE2LEGZIZ2zMLYVjOnAGG/4dluRjSrZZo/8v
// SIG // wk4Xt8v6NBB9ofo8H1P/XidHytWTv9lg9MYu++6lPmu5
// SIG // fCozD3cI2NLZPW2BBhGX2D0R8tQBj0FbmZRuIucpiQ7D
// SIG // K3CHKlfKcc7MP8pPzuMv55Tox8+KFQD1NG6+bfbYA/BN
// SIG // PBkg4tyOh+exbaHfcNuodDJUIjq9dF6oa+Yjy0u0pUMI
// SIG // /B1t+8m6rJo0KSoZlrpesYl0jRhpt+hmqx8uENXoGJcY
// SIG // ZVJ5N2Skq90LViKNRhi9N4U+e8c4y9uXyomUF/6viCPJ
// SIG // 7huTNEJo75ehIJba+IWd3txUEc0R3y6DT6txC6cW1nR/
// SIG // LTbo9I/8fQq538G5IvJ+e5iSiOSVVkVk0i5m03Awy5E2
// SIG // ZSS4PVdQSCcFxmN4tpEfYuR7AAy/GJVtIDFlUpSgdXok
// SIG // pSui5hYtK1R9enXXvo+U/xGkLRc+qp4De3dZbzu7pOq7
// SIG // V/jCyhuCw0bEIAU4urCGIip7TI6GBRzD7yPzjFIqeZY7
// SIG // S4rVW5BRn2oEqpm8Su6yTIQvMIk8x2pwYNUa2339Z4gW
// SIG // 5xW21eFA5mLpo7NRSKRQms5OgAA18aCgqOU7Ds0h6q/Y
// SIG // B4BmEAtoTMl/TBiyKaMGAlEcdy+5FIhmzojMGjCCB3ow
// SIG // ggVioAMCAQICCmEOkNIAAAAAAAMwDQYJKoZIhvcNAQEL
// SIG // BQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMT
// SIG // KU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhv
// SIG // cml0eSAyMDExMB4XDTExMDcwODIwNTkwOVoXDTI2MDcw
// SIG // ODIxMDkwOVowfjELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYG
// SIG // A1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmluZyBQQ0Eg
// SIG // MjAxMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoC
// SIG // ggIBAKvw+nIQHC6t2G6qghBNNLrytlghn0IbKmvpWlCq
// SIG // uAY4GgRJun/DDB7dN2vGEtgL8DjCmQawyDnVARQxQtOJ
// SIG // DXlkh36UYCRsr55JnOloXtLfm1OyCizDr9mpK656Ca/X
// SIG // llnKYBoF6WZ26DJSJhIv56sIUM+zRLdd2MQuA3WraPPL
// SIG // bfM6XKEW9Ea64DhkrG5kNXimoGMPLdNAk/jj3gcN1Vx5
// SIG // pUkp5w2+oBN3vpQ97/vjK1oQH01WKKJ6cuASOrdJXtjt
// SIG // 7UORg9l7snuGG9k+sYxd6IlPhBryoS9Z5JA7La4zWMW3
// SIG // Pv4y07MDPbGyr5I4ftKdgCz1TlaRITUlwzluZH9TupwP
// SIG // rRkjhMv0ugOGjfdf8NBSv4yUh7zAIXQlXxgotswnKDgl
// SIG // mDlKNs98sZKuHCOnqWbsYR9q4ShJnV+I4iVd0yFLPlLE
// SIG // tVc/JAPw0XpbL9Uj43BdD1FGd7P4AOG8rAKCX9vAFbO9
// SIG // G9RVS+c5oQ/pI0m8GLhEfEXkwcNyeuBy5yTfv0aZxe/C
// SIG // HFfbg43sTUkwp6uO3+xbn6/83bBm4sGXgXvt1u1L50kp
// SIG // pxMopqd9Z4DmimJ4X7IvhNdXnFy/dygo8e1twyiPLI9A
// SIG // N0/B4YVEicQJTMXUpUMvdJX3bvh4IFgsE11glZo+TzOE
// SIG // 2rCIF96eTvSWsLxGoGyY0uDWiIwLAgMBAAGjggHtMIIB
// SIG // 6TAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4EFgQUSG5k
// SIG // 5VAF04KqFzc3IrVtqMp1ApUwGQYJKwYBBAGCNxQCBAwe
// SIG // CgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB
// SIG // /wQFMAMBAf8wHwYDVR0jBBgwFoAUci06AjGQQ7kUBU7h
// SIG // 6qfHMdEjiTQwWgYDVR0fBFMwUTBPoE2gS4ZJaHR0cDov
// SIG // L2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVj
// SIG // dHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIyLmNy
// SIG // bDBeBggrBgEFBQcBAQRSMFAwTgYIKwYBBQUHMAKGQmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMv
// SIG // TWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIyLmNydDCB
// SIG // nwYDVR0gBIGXMIGUMIGRBgkrBgEEAYI3LgMwgYMwPwYI
// SIG // KwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2lvcHMvZG9jcy9wcmltYXJ5Y3BzLmh0bTBABggr
// SIG // BgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBwAG8AbABp
// SIG // AGMAeQBfAHMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkq
// SIG // hkiG9w0BAQsFAAOCAgEAZ/KGpZjgVHkaLtPYdGcimwuW
// SIG // EeFjkplCln3SeQyQwWVfLiw++MNy0W2D/r4/6ArKO79H
// SIG // qaPzadtjvyI1pZddZYSQfYtGUFXYDJJ80hpLHPM8QotS
// SIG // 0LD9a+M+By4pm+Y9G6XUtR13lDni6WTJRD14eiPzE32m
// SIG // kHSDjfTLJgJGKsKKELukqQUMm+1o+mgulaAqPyprWElj
// SIG // HwlpblqYluSD9MCP80Yr3vw70L01724lruWvJ+3Q3fMO
// SIG // r5kol5hNDj0L8giJ1h/DMhji8MUtzluetEk5CsYKwsat
// SIG // ruWy2dsViFFFWDgycScaf7H0J/jeLDogaZiyWYlobm+n
// SIG // t3TDQAUGpgEqKD6CPxNNZgvAs0314Y9/HG8VfUWnduVA
// SIG // KmWjw11SYobDHWM2l4bf2vP48hahmifhzaWX0O5dY0Hj
// SIG // Wwechz4GdwbRBrF1HxS+YWG18NzGGwS+30HHDiju3mUv
// SIG // 7Jf2oVyW2ADWoUa9WfOXpQlLSBCZgB/QACnFsZulP0V3
// SIG // HjXG0qKin3p6IvpIlR+r+0cjgPWe+L9rt0uX4ut1eBrs
// SIG // 6jeZeRhL/9azI2h15q/6/IvrC4DqaTuv/DDtBEyO3991
// SIG // bWORPdGdVk5Pv4BXIqF4ETIheu9BCrE/+6jMpF3BoYib
// SIG // V3FWTkhFwELJm3ZbCoBIa/15n8G9bW1qyVJzEw16UM0x
// SIG // ghmfMIIZmwIBATCBlTB+MQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5n
// SIG // IFBDQSAyMDExAhMzAAADri01UchTj1UdAAAAAAOuMA0G
// SIG // CWCGSAFlAwQCAQUAoIGuMBkGCSqGSIb3DQEJAzEMBgor
// SIG // BgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAMBgorBgEE
// SIG // AYI3AgEVMC8GCSqGSIb3DQEJBDEiBCCwqzyYzFwSLiaH
// SIG // LUH/8Y80RPwqxpijvCH9j5fQIyIj8DBCBgorBgEEAYI3
// SIG // AgEMMTQwMqAUgBIATQBpAGMAcgBvAHMAbwBmAHShGoAY
// SIG // aHR0cDovL3d3dy5taWNyb3NvZnQuY29tMA0GCSqGSIb3
// SIG // DQEBAQUABIIBAL3onSlFY/JEyv+NFOU5HpxWAhP8/BZL
// SIG // GAFF3Cgfi7UMMpX/XgrDEeP6O7yFOTnCJYBJjnYJWiKb
// SIG // WoH2iznT5VM9/LEUK9Z2+CgbNiQFVckhm1GUrGLeEvqL
// SIG // hFUJQdD1vi74ghpv6ibMHHCMAMPYECwEvCACwby8ywGg
// SIG // bxwOCXoB75YaOJTO1VvCSu5U5ArECL+Q4ExqpDW8nr9I
// SIG // a5KTl+aKS5NeWqEQ8TNQOxmb16JrYu9eYBEr0hX+sGDg
// SIG // BmvjJrE34uKGBisbxnSJ/Mm9Iak/BKQrTgzRtH0ruKzl
// SIG // mrSZY9NFcki+T73ektR48jYzyy0RnBJyjaYDbS4p4x+d
// SIG // C42hghcpMIIXJQYKKwYBBAGCNwMDATGCFxUwghcRBgkq
// SIG // hkiG9w0BBwKgghcCMIIW/gIBAzEPMA0GCWCGSAFlAwQC
// SIG // AQUAMIIBWQYLKoZIhvcNAQkQAQSgggFIBIIBRDCCAUAC
// SIG // AQEGCisGAQQBhFkKAwEwMTANBglghkgBZQMEAgEFAAQg
// SIG // g57mDKldpje3PGBKUMsapCJFqLgqkmuOjJYZpL2VuoQC
// SIG // BmYzqwj6xBgTMjAyNDA1MDgyMTE0MTIuNDE5WjAEgAIB
// SIG // 9KCB2KSB1TCB0jELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEtMCsG
// SIG // A1UECxMkTWljcm9zb2Z0IElyZWxhbmQgT3BlcmF0aW9u
// SIG // cyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVT
// SIG // Tjo4NkRGLTRCQkMtOTMzNTElMCMGA1UEAxMcTWljcm9z
// SIG // b2Z0IFRpbWUtU3RhbXAgU2VydmljZaCCEXgwggcnMIIF
// SIG // D6ADAgECAhMzAAAB3V1XHZXUraobAAEAAAHdMA0GCSqG
// SIG // SIb3DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwMB4XDTIzMTAxMjE5MDcwOVoXDTI1MDExMDE5MDcw
// SIG // OVowgdIxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsT
// SIG // JE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGlt
// SIG // aXRlZDEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046ODZE
// SIG // Ri00QkJDLTkzMzUxJTAjBgNVBAMTHE1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFNlcnZpY2UwggIiMA0GCSqGSIb3DQEB
// SIG // AQUAA4ICDwAwggIKAoICAQCoTgOUROoud5x1ER+JZ3yi
// SIG // 6fvSb4qbk7XLWoqwsTFEqz0suQlitg7a4kD/k+dh12zd
// SIG // oOwJLUNaUGW0wxhcyundN72GDawj7iSvj0bD9hT1Q4wV
// SIG // 8uZqy0RcyBxy2ogGqGxObxSbqMWdGVnSjArPGnI4R1Jn
// SIG // 2mPu/fwke7jfgePsYyasL3aVP5qdJgKt3mq8h/gCpr+p
// SIG // ZK0DfM4K3GwoB8LKr76k+pRBamKYu7ip+zAGG0ni3tKT
// SIG // HWrVeRFujVZ1zGDk0Srhj38nwSnUobmpS6PPJBu6mtpm
// SIG // wOZe+/l9OiQHrDJKMmK+P/QoAxYx1KXB0jg7o5RQSjIt
// SIG // evM0XS3q3aVtGwV/RA7sdswTDGhCvDcsWsAhLgKu/vu5
// SIG // LRQG5d4VCrbs2AtRVGblJdgaulNe0uAirKkd4rS0/ajX
// SIG // G9qQCeI6yA3ZZeU4KKnn+YKb/mHLwTPN+G1xTcMrXd7o
// SIG // ww9uD/Q3fMX1Sb7po7AUEJCuU/6stx60CfLndZx0r7RV
// SIG // YuUmv7mxrmBKUvIBehg1jefym73hZHbKE1SD6PKZFoYz
// SIG // 7NEO5wOfrgcUAeM5YxIys+VluwQOMKZhZtuH4QZkY1eD
// SIG // W6fp+/HIAI7w0n05QOg2AXL9pMdSR9nSIWkZ0njl3j0+
// SIG // oTBdCJeffCzLtK8N+VYlFnAEJFDVE8UZ6hhcc+cPmbrD
// SIG // AwIDAQABo4IBSTCCAUUwHQYDVR0OBBYEFG6i9baMj1Ha
// SIG // Rcsh0gylo9COJcPxMB8GA1UdIwQYMBaAFJ+nFV0AXmJd
// SIG // g/Tl0mWnG1M1GelyMF8GA1UdHwRYMFYwVKBSoFCGTmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY3Js
// SIG // L01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAy
// SIG // MDEwKDEpLmNybDBsBggrBgEFBQcBAQRgMF4wXAYIKwYB
// SIG // BQUHMAKGUGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2lvcHMvY2VydHMvTWljcm9zb2Z0JTIwVGltZS1TdGFt
// SIG // cCUyMFBDQSUyMDIwMTAoMSkuY3J0MAwGA1UdEwEB/wQC
// SIG // MAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwDgYDVR0P
// SIG // AQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4ICAQAuVNmy
// SIG // DS4FyB1mzHKlbn/Y5FE/yvM8iwb7uYfCa6mEds/3mjts
// SIG // qNTqHPUocr8W3vRmQ7u5JFM8UsidSGZLGWcOhQ6usmTU
// SIG // 9zxIwBJ0RKUQS/Evpm14PjuFS0tC0pm/FyGYi7GqmdHw
// SIG // xHL9x3gPv8v6ipwkFpF4IaWhDMBjEM0ZIRsHBnV69cxq
// SIG // UOx08b37ue8RcWV9TJCp1hRDSerq3fuLXlIF49J4CDsf
// SIG // /5d1zCtx7fE9vs7xiTQBfuf+agZO569O/cyAmxV78bYn
// SIG // TTeXqF3VvvawCJEvlBg9fQGXQa7benWfjnQKrgYg5GEO
// SIG // ZFX1DCkt9ch0DhoJhcbgjs06Vh2pa6qXSJZbMvCjbI+V
// SIG // PbDjYlgHfTzZchBx20GQ5ovfwTZTmMk7dGHoS2w6L5mV
// SIG // DWs5O/TnfwPde5qgnU6qxMcARlD2zD/v73WFKmibKbqQ
// SIG // Z1LYzn/++gwIVcvHv3us0ffD5KZZpYjtm6y90N6w+vmQ
// SIG // lXaxjPUZuoVAwQZL2IfmI5hnXEORwelk/UXnPPqgx5m4
// SIG // S4V+GXWmq3efzl3i24Mdn+y+EEEI9yoKo6gzliJ1YTRN
// SIG // YGLU1ix3uPPNnf5Oy7otCtYPBGayg+5mjq7CSyjypXoH
// SIG // HifRQqmNbA1ClIUWtBB1FvmZCi5aISq0uxcI3ayDVpDw
// SIG // YG0M5wo3RNpuO0I02zCCB3EwggVZoAMCAQICEzMAAAAV
// SIG // xedrngKbSZkAAAAAABUwDQYJKoZIhvcNAQELBQAwgYgx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jv
// SIG // c29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAy
// SIG // MDEwMB4XDTIxMDkzMDE4MjIyNVoXDTMwMDkzMDE4MzIy
// SIG // NVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
// SIG // bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
// SIG // FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMd
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwggIi
// SIG // MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDk4aZM
// SIG // 57RyIQt5osvXJHm9DtWC0/3unAcH0qlsTnXIyjVX9gF/
// SIG // bErg4r25PhdgM/9cT8dm95VTcVrifkpa/rg2Z4VGIwy1
// SIG // jRPPdzLAEBjoYH1qUoNEt6aORmsHFPPFdvWGUNzBRMhx
// SIG // XFExN6AKOG6N7dcP2CZTfDlhAnrEqv1yaa8dq6z2Nr41
// SIG // JmTamDu6GnszrYBbfowQHJ1S/rboYiXcag/PXfT+jlPP
// SIG // 1uyFVk3v3byNpOORj7I5LFGc6XBpDco2LXCOMcg1KL3j
// SIG // tIckw+DJj361VI/c+gVVmG1oO5pGve2krnopN6zL64NF
// SIG // 50ZuyjLVwIYwXE8s4mKyzbnijYjklqwBSru+cakXW2dg
// SIG // 3viSkR4dPf0gz3N9QZpGdc3EXzTdEonW/aUgfX782Z5F
// SIG // 37ZyL9t9X4C626p+Nuw2TPYrbqgSUei/BQOj0XOmTTd0
// SIG // lBw0gg/wEPK3Rxjtp+iZfD9M269ewvPV2HM9Q07BMzlM
// SIG // jgK8QmguEOqEUUbi0b1qGFphAXPKZ6Je1yh2AuIzGHLX
// SIG // pyDwwvoSCtdjbwzJNmSLW6CmgyFdXzB0kZSU2LlQ+QuJ
// SIG // YfM2BjUYhEfb3BvR/bLUHMVr9lxSUV0S2yW6r1AFemzF
// SIG // ER1y7435UsSFF5PAPBXbGjfHCBUYP3irRbb1Hode2o+e
// SIG // FnJpxq57t7c+auIurQIDAQABo4IB3TCCAdkwEgYJKwYB
// SIG // BAGCNxUBBAUCAwEAATAjBgkrBgEEAYI3FQIEFgQUKqdS
// SIG // /mTEmr6CkTxGNSnPEP8vBO4wHQYDVR0OBBYEFJ+nFV0A
// SIG // XmJdg/Tl0mWnG1M1GelyMFwGA1UdIARVMFMwUQYMKwYB
// SIG // BAGCN0yDfQEBMEEwPwYIKwYBBQUHAgEWM2h0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvRG9jcy9SZXBv
// SIG // c2l0b3J5Lmh0bTATBgNVHSUEDDAKBggrBgEFBQcDCDAZ
// SIG // BgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8E
// SIG // BAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAW
// SIG // gBTV9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBN
// SIG // MEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20v
// SIG // cGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAx
// SIG // MC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsG
// SIG // AQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20v
// SIG // cGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIz
// SIG // LmNydDANBgkqhkiG9w0BAQsFAAOCAgEAnVV9/Cqt4Swf
// SIG // ZwExJFvhnnJL/Klv6lwUtj5OR2R4sQaTlz0xM7U518Jx
// SIG // Nj/aZGx80HU5bbsPMeTCj/ts0aGUGCLu6WZnOlNN3Zi6
// SIG // th542DYunKmCVgADsAW+iehp4LoJ7nvfam++Kctu2D9I
// SIG // dQHZGN5tggz1bSNU5HhTdSRXud2f8449xvNo32X2pFaq
// SIG // 95W2KFUn0CS9QKC/GbYSEhFdPSfgQJY4rPf5KYnDvBew
// SIG // VIVCs/wMnosZiefwC2qBwoEZQhlSdYo2wh3DYXMuLGt7
// SIG // bj8sCXgU6ZGyqVvfSaN0DLzskYDSPeZKPmY7T7uG+jIa
// SIG // 2Zb0j/aRAfbOxnT99kxybxCrdTDFNLB62FD+CljdQDzH
// SIG // VG2dY3RILLFORy3BFARxv2T5JL5zbcqOCb2zAVdJVGTZ
// SIG // c9d/HltEAY5aGZFrDZ+kKNxnGSgkujhLmm77IVRrakUR
// SIG // R6nxt67I6IleT53S0Ex2tVdUCbFpAUR+fKFhbHP+Crvs
// SIG // QWY9af3LwUFJfn6Tvsv4O+S3Fb+0zj6lMVGEvL8CwYKi
// SIG // excdFYmNcP7ntdAoGokLjzbaukz5m/8K6TT4JDVnK+AN
// SIG // uOaMmdbhIurwJ0I9JZTmdHRbatGePu1+oDEzfbzL6Xu/
// SIG // OHBE0ZDxyKs6ijoIYn/ZcGNTTY3ugm2lBRDBcQZqELQd
// SIG // VTNYs6FwZvKhggLUMIICPQIBATCCAQChgdikgdUwgdIx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsTJE1pY3Jv
// SIG // c29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGltaXRlZDEm
// SIG // MCQGA1UECxMdVGhhbGVzIFRTUyBFU046ODZERi00QkJD
// SIG // LTkzMzUxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0
// SIG // YW1wIFNlcnZpY2WiIwoBATAHBgUrDgMCGgMVADYjRxll
// SIG // 2zWgz8Z8og2xDnIkoxYQoIGDMIGApH4wfDELMAkGA1UE
// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
// SIG // b3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRp
// SIG // bWUtU3RhbXAgUENBIDIwMTAwDQYJKoZIhvcNAQEFBQAC
// SIG // BQDp5hHxMCIYDzIwMjQwNTA4MjMwMDAxWhgPMjAyNDA1
// SIG // MDkyMzAwMDFaMHQwOgYKKwYBBAGEWQoEATEsMCowCgIF
// SIG // AOnmEfECAQAwBwIBAAICFuUwBwIBAAICFBEwCgIFAOnn
// SIG // Y3ECAQAwNgYKKwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGE
// SIG // WQoDAqAKMAgCAQACAwehIKEKMAgCAQACAwGGoDANBgkq
// SIG // hkiG9w0BAQUFAAOBgQCv0CrppvTymcpMNT6JX+JQBt2c
// SIG // yQThn/tmV5/ZoMmheicBuMIOrtZmSQVWWloK6mVZxpoz
// SIG // NjPzaKzdm7jKrODAN35XKBav4wf7dCvlME2UdOVRBD8K
// SIG // 3xYC0WraGG6XYW2T+ftVshicKMB/eUZJfUJsGgR3MZ/X
// SIG // wT3U6+1B6A/2STGCBA0wggQJAgEBMIGTMHwxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB3V1XHZXUraob
// SIG // AAEAAAHdMA0GCWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG
// SIG // 9w0BCQMxDQYLKoZIhvcNAQkQAQQwLwYJKoZIhvcNAQkE
// SIG // MSIEIJntHF1n168BoynRK1tP6YmsejDfRwP9oOg8zi3r
// SIG // c8sMMIH6BgsqhkiG9w0BCRACLzGB6jCB5zCB5DCBvQQg
// SIG // Yf8OLZplrE94mZx7R9FZN+1AjdNpUcWPkYjjesAxY2Yw
// SIG // gZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MAITMwAAAd1dVx2V1K2qGwABAAAB3TAiBCDQCljlQPj+
// SIG // lF95Jt7DHwb/2U/ZY3BnSiNq/vxbXGGxBjANBgkqhkiG
// SIG // 9w0BAQsFAASCAgAwltao3zBvPn7JGCEEsNvfN7qGj/O7
// SIG // bkU+OtLnV2WXcUaalmlNLtyBD01tEo3mOkAIpO3LulC0
// SIG // 52Ku3Bc7sMKNhFKSRJpJ9zc6dPWY6Y9dRHAV5GYZCY5D
// SIG // 9/mjExhVRlWKWhk8xpN0tqw23ydDyJQlOxnKXjRpPYW7
// SIG // JftczAgPRFmWs8kHgpLBW0w8UbfCUf26y6AKBgPDF47o
// SIG // tu3PQNqEx4hh+1c8M07Ab94Oa4/jT+wI4nXePMqoG1ra
// SIG // yaaaZQmG7CgSvmgljhQIHy4pJG/XLPQu4UEPXdff0fhU
// SIG // iagkv4Al6JN53s5Sp2DcaRIPAt4fay0PDCED2zT1/Qf1
// SIG // QrYIX1H6NVd6ho4Pvo2Yrq8fryV6XWIFARq12RNS+LyY
// SIG // 79KIjBhYMur7/kifMhviBVE58F8CwT1RxKh6EYsMfJEM
// SIG // 8rsJ2YDXyUO+MY90c8UAs05b+odktNzakfIUirId0Xbe
// SIG // BQhZDrm6rxsT9gvYzoZrqJrreJIhjnxT0h3k3Of8fdHY
// SIG // elqVCVN/B6SqJpSh/Cwo/w9DSkYA5f0dm+QPcHw6vSaV
// SIG // /cuD8JugKoFzAfBjbDZl6KYdLoaq0qggomOxx22HiIum
// SIG // qLGrrsN8ahXVVrTNFfYLQKIj76ox4QnfUy05curAYvY2
// SIG // LFUAZG1UnSIWXCW0VRhWR+YjTbm5PTjGsbRQjA==
// SIG // End signature block]]></con:responseContent>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1daa17c19b2f0f8"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 08 May 2024 19:15:34 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:34 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="Response 2" id="7bff1746-9ef4-4af4-8acf-3dc7595f683b" httpResponseStatus="304" mediaType="text/javascript">
        <con:settings/>
        <con:responseContent/>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1daa17c19b2f0f8"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 08 May 2024 19:15:34 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:29 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/_content/Microsoft.FluentUI.AspNetCore.Components/css/reboot.css" method="GET" resourcePath="/_content/Microsoft.FluentUI.AspNetCore.Components/css/reboot.css" id="34bd40cb-e473-43ed-89ed-ad6ddf03d352">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="Response 1" id="0d3f49db-8259-4e05-b1e9-a7577587bcdf" httpResponseStatus="200" mediaType="text/css" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:responseContent>/*
 * Fluent UI Web Components for Blazor Reboot v1.0.0 
 * Copyright 2022 Microsoft
 *  
 * Normalization of HTML elements, copied and ajusted from Bootstrap's Reboot which is based on Normalize.css 
 * Licensed under MIT (https://github.com/microsoft/fluentui-blazor/blob/main/LICENSE)
 *   
 * Normalize is licensed under MIT (https://github.com/necolas/normalize.css/blob/master/LICENSE.md) 
 * Bootstrap is licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
 */
*, *::before, *::after {
    box-sizing: border-box;
}

@media (prefers-reduced-motion: no-preference) {
    :root {
        scroll-behavior: smooth;
    }
}

html {
    font-family: var(--body-font);
}

body {
    margin: 0;
    font-family: var(--body-font);
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
    font-weight: var(--font-weight);
    color: var(--neutral-foreground-rest);
    background-color: var(--neutral-fill-layer-rest);
    -webkit-text-size-adjust: 100%;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

hr {
    margin: 1rem 0;
    color: inherit;
    border: 0;
    border-top: 1px solid;
    opacity: 0.25;
}

h6, h5, h4, h3, h2, h1 {
    margin-top: 0;
    margin-bottom: 0.75rem;
    font-weight: 500;
    font-family: inherit;
}

h1 {
    font-size: var(--type-ramp-plus-5-font-size);
    line-height: var(--type-ramp-plus-5-line-height);
}

h2 {
    font-size: var(--type-ramp-plus-4-font-size);
    line-height: var(--type-ramp-plus-4-line-height);
}

h3 {
    font-size: var(--type-ramp-plus-3-font-size);
    line-height: var(--type-ramp-plus-3-line-height);
}

h4 {
    font-size: var(--type-ramp-plus-2-font-size);
    line-height: var(--type-ramp-plus-2-line-height);
}

h5 {
    font-size: var(--type-ramp-plus-1-font-size);
    line-height: var(--type-ramp-plus-1-line-height);
}

h6 {
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
}


p {
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
    font-weight: 400;
    margin-top: 0;
    margin-bottom: 1rem;
    font-family: var(--body-font);
}


a {
   
}

blockquote {
    border-left: 5px solid var(--accent-fill-rest);
    border-right: none;
    font-size: var(--type-ramp-base-font-size);
    font-style: italic;
    padding: 2px 15px;
}

[dir='rtl'] blockquote {
    border-left: none;
    border-right: 5px solid var(--accent-fill-rest);
}

abbr[title] {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
    cursor: help;
    -webkit-text-decoration-skip-ink: none;
    text-decoration-skip-ink: none;
}

address {
    margin-bottom: 1rem;
    font-style: normal;
    line-height: inherit;
}

ol,
ul {
    padding-left: 2rem;
}

ol,
ul,
dl {
    margin-top: 0;
    margin-bottom: 1rem;
}

    ol ol,
    ul ul,
    ol ul,
    ul ol {
        margin-bottom: 0;
    }

dt {
    font-weight: 700;
}

dd {
    margin-bottom: 0.5rem;
    margin-left: 0;
}
/*
blockquote {
    margin: 0 0 1rem;
}*/

b,
strong {
    font-weight: bolder;
}

small {
    font-size: 0.875em;
}

mark {
    padding: 0;
    background-color: var(--highlight-bg);
}

sub,
sup {
    position: relative;
    font-size: 0.75em;
    line-height: 0;
    vertical-align: baseline;
}

sub {
    bottom: -0.25em;
}

sup {
    top: -0.5em;
}

a {
    color: var(--accent-foreground-rest);
    text-decoration: underline;
}

    a:hover {
        color: var(--accent-foreground-hover);
    }

    a:active {
        color: var(--accent-foreground-active);
    }

    a:not([href]):not([class]), a:not([href]):not([class]):hover {
        color: inherit;
        text-decoration: none;
    }

pre,
code,
kbd,
samp {
    font-family: var(--font-monospace);
    font-size: 1em;
}

pre {
    display: block;
    margin-top: 0;
    margin-bottom: 1rem;
    overflow: auto;
    font-size: 0.875em;
}

    pre code {
        font-size: inherit;
        color: inherit;
        word-break: normal;
    }

code {
    font-size: 0.875em;
    color: var(--accent-foreground-rest);
    word-wrap: break-word;
}

a > code {
    color: inherit;
}

kbd {
    padding: 0.1875rem 0.375rem;
    font-size: 0.875em;
    color: var(--neutral-base-color);
    background-color: var(--neutral-fill-layer-rest);
    border-radius: 0.25rem;
}

    kbd kbd {
        padding: 0;
        font-size: 1em;
    }

figure {
    margin: 0 0 1rem;
}

/*img,
svg {
    vertical-align: middle;
}*/

table {
    font-size: var(--type-ramp-base-font-size);
    line-height: var(--type-ramp-base-line-height);
    font-weight: 400;
    margin-top: 0;
    margin-bottom: 1rem;
    caption-side: bottom;
    border-collapse: collapse;
}

caption {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    color: #6c757d;
    text-align: left;
}

th {
    text-align: inherit;
    text-align: -webkit-match-parent;
}

thead,
tbody,
tfoot,
tr,
td,
th {
    border-color: inherit;
    border-style: solid;
    border-width: 0;
}

label {
    display: inline-block;
}

button {
    border-radius: var(--control-corner-radius);
}

    button:focus:not(:focus-visible) {
        outline: 0;
    }

input,
button,
select,
optgroup,
textarea {
    margin: 0;
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
    border: 1px solid black;
}

.invalid::part(root) {
    outline: 1px solid var(--error);
}

.invalid[role='checkbox']::part(control) {
    outline: 1px solid var(--error);
}

button,
select {
    text-transform: none;
}

[role=button] {
    cursor: pointer;
}

select {
    word-wrap: normal;
}

    select:disabled {
        opacity: 1;
    }

[list]:not([type=date]):not([type=datetime-local]):not([type=month]):not([type=week]):not([type=time])::-webkit-calendar-picker-indicator {
    display: none !important;
}

button,
[type=button],
[type=reset],
[type=submit] {
    -webkit-appearance: button;
}

    button:not(:disabled),
    [type=button]:not(:disabled),
    [type=reset]:not(:disabled),
    [type=submit]:not(:disabled) {
        cursor: pointer;
    }

::-moz-focus-inner {
    padding: 0;
    border-style: none;
}

textarea {
    resize: vertical;
}

fieldset {
    min-width: 0;
    padding: 0;
    margin: 0;
    border: 0;
}

legend {
    float: left;
    width: 100%;
    padding: 0;
    margin-bottom: 0.5rem;
    font-size: calc(1.275rem + 0.3vw);
    line-height: inherit;
}

@media (min-width: 1200px) {
    legend {
        font-size: 1.5rem;
    }
}

legend + * {
    clear: left;
}

::-webkit-datetime-edit-fields-wrapper,
::-webkit-datetime-edit-text,
::-webkit-datetime-edit-minute,
::-webkit-datetime-edit-hour-field,
::-webkit-datetime-edit-day-field,
::-webkit-datetime-edit-month-field,
::-webkit-datetime-edit-year-field {
    padding: 0;
}

::-webkit-inner-spin-button {
    height: auto;
}

[type=search] {
    outline-offset: -2px;
    -webkit-appearance: textfield;
}

/* rtl:raw:
[type="tel"],
[type="url"],
[type="email"],
[type="number"] {
  direction: ltr;
}
*/
::-webkit-search-decoration {
    -webkit-appearance: none;
}

::-webkit-color-swatch-wrapper {
    padding: 0;
}

::-webkit-file-upload-button {
    font: inherit;
    -webkit-appearance: button;
}

::file-selector-button {
    font: inherit;
    -webkit-appearance: button;
}

output {
    display: inline-block;
}

iframe {
    border: 0;
}

summary {
    display: list-item;
    cursor: pointer;
}

progress {
    vertical-align: baseline;
}

[hidden] {
    display: none !important;
}</con:responseContent>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1da8b41959bd931"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 10 Apr 2024 12:21:16 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:34 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="Response 2" id="756257ca-59cd-4d41-91a2-89da06b84117" httpResponseStatus="304" mediaType="text/css">
        <con:settings/>
        <con:responseContent/>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1da8b41959bd931"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 10 Apr 2024 12:21:16 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:28 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/css/app.css" method="GET" resourcePath="/css/app.css" id="ce5f10c0-962f-4f13-ab14-3d13de2bc10a">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="Response 1" id="36ab0529-4e9c-4605-aaf7-2ee4a644f864" httpResponseStatus="200" mediaType="text/css" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:responseContent>fluent-toolbar fluent-switch,
fluent-toolbar p {
    margin-inline-end: 15px;
}

fluent-toolbar[orientation=horizontal] {
    width: 100%;
}

/* Hide any web components that haven't been */
:not(:defined),
.before-upgrade {
    visibility: hidden;
}

.col-long-content {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    height: 100%;
}

.trace-tag-icon {
    margin-right: 3px;
}

:root {
    --log-critical: #F8ECEB;
    --log-error: #F8ECEB;
    --log-warning: #FBF3DD;

    --info: #717171 !important;
    --warning: #E85E36 !important;
    --success: #108310 !important;

    --badge-fill-error: var(--error);
    --badge-fill-warning: var(--warning);
    --badge-color-error: var(--foreground-on-accent-rest);
    --foreground-subtext-rest: #5D5D5D;
    --foreground-subtext-hover: #6C6C6C;

    --error-ui-foreground-color: #131313;
    --error-ui-accent-foreground-color: #1d00d0;
    --reconnection-ui-bg: rgb(255, 255, 255);
    --error-counter-badge-foreground-color: var(--neutral-fill-rest);
    --kbd-background-color: var(--neutral-layer-4);

    --messagebar-warning-background-color: #FDF6F3;
    --messagebar-warning-border-color: #f4bfab;

    --layout-toolbar-padding: calc(var(--design-unit) * 1.5px);
}

[data-theme="dark"] {
    --log-critical: #493634;
    --log-error: #493634;
    --log-warning: #3F3A2B;
    --foreground-subtext-rest: #8D8D8D;
    --foreground-subtext-hover: #A1A1A1;

    --error-ui-foreground-color: #000000;
    --error-ui-accent-foreground-color: #512bd4;
    --reconnection-ui-bg: #D6D6D6;
    --error-counter-badge-foreground-color: #ffffff;
    --kbd-background-color: var(--fill-color);

    --messagebar-warning-background-color: #411200;
    --messagebar-warning-border-color: #DA3B01;

    /* overrides of default fluentui-blazor styling */
    --error: #E10B11 !important;

    color-scheme: dark;
}

[data-theme="light"] {
    color-scheme: light;
}

fluent-select.resource-list {
    /* overrides of default fluentui-blazor styling */
    --disabled-opacity: 0.7;
}

[data-theme="dark"] fluent-select.resource-list {
    /* overrides of default fluentui-blazor styling */
    --disabled-opacity: 0.85;
}

h1 {
    font-size: var(--type-ramp-plus-4-font-size);
    line-height: var(--type-ramp-plus-4-line-height);
    margin-top: 0.25rem;
    margin-bottom: 0.5rem;
}

 #components-reconnect-modal :is(h5, p) {
     color: var(--error-ui-foreground-color);
 }

 #components-reconnect-modal a {
     color: var(--error-ui-accent-foreground-color);
 }

 #components-reconnect-modal {
     /* avoid making modal take the entire screen dimensions */
     inset: unset !important;

     /* force modal to be compact, centered, slightly padded, and towards the top */
     top: 5% !important;
     left: 30% !important;
     right: 30% !important;
     height: 105px;
     padding: 2px;

     /* add a slight shadow */
     box-shadow: 2px 2px 2px var(--neutral-fill-secondary-rest);

     /* avoid modal being see-through */
     opacity: 1 !important;

     /* ensure sufficient contrast between all elements in the modal and its background */
     background-color: var(--reconnection-ui-bg) !important;
 }

.datagrid-overflow-area,
.parent-details-container {
    /*
        Height of the browser - static height for other content
        TODO: Is there a better way to do this?
    */
    height: 100%;
    min-width: 100%;
    overflow: auto;
}

fluent-data-grid .empty-content-cell,
fluent-data-grid .loading-content-cell {
    padding: calc(var(--design-unit) * 5px);
    display: flex;
    align-items: center;
}

/*
    Default LoadingContent template has align-items set to start, so the
    text doesn't line up with the spinner properly. It is set via inline style
    so we need to use !important to override it.
*/
fluent-data-grid .loading-content-cell .stack-horizontal {
    align-items: center !important;
    column-gap: calc(var(--design-unit) * 2px) !important;
}

.custom-body-content {
    margin-right: 10px;
}

.top-messagebar {
    padding: calc(var(--design-unit) * 2px);
    padding-bottom: 0;
}

.fluent-messagebar.intent-warning {
    background-color: var(--messagebar-warning-background-color) !important;
    border: 1px solid var(--messagebar-warning-border-color) !important;
}

/* The fluent dialog's default fill color is too dark in our current dark theme.
   Setting it to the floating layer allows it to stand out more and doesn't impact light theme. */
fluent-dialog::part(control) {
    background: var(--neutral-layer-floating);
}

fluent-dialog fluent-toolbar {
    background-color: var(--neutral-layer-floating);
}

/* Changing the dialog's fill color means stealth buttons on the dialog have the wrong background,
   so change it to match */
fluent-dialog fluent-button[appearance=stealth]:not(:hover)::part(control),
fluent-dialog fluent-button[appearance=lightweight]:not(:hover)::part(control),
fluent-dialog fluent-anchor[appearance=stealth]:not(:hover)::part(control),
fluent-dialog fluent-anchor[appearance=lightweight]:not(:hover)::part(control) {
    background: var(--neutral-layer-floating);
}

/* But changing the stealth button's background in dialogs means the stealth buttons used as headers for grid cells
   now have the wrong background. So change that back */
fluent-dialog fluent-data-grid-cell[cell-type=columnheader] fluent-button[appearance=stealth]:not(:hover)::part(control) {
    background: var(--fill-layer);
}

.content-layout-with-toolbar {
    height: 100%;
    width: 100%;
    display: grid;
    grid-template-rows: auto 1fr;
    grid-template-areas:
        "toolbar"
        "main";
}

.content-layout-with-toolbar > fluent-toolbar {
    grid-area: toolbar;
}

.content-layout-with-toolbar > .datagrid-overflow-area,
.content-layout-with-toolbar > .parent-details-container {
    grid-area: main;
}

.pane-details-subtext {
    color: var(--foreground-subtext-rest);
    padding-left: 0.5rem;
    font-size: 12px;
}

fluent-data-grid-row {
    align-items: center;
}

fluent-data-grid-cell .long-inner-content {
    width: inherit;
    overflow: hidden;
    text-overflow: ellipsis;
}

.parent-details-container {
    display: grid;
    grid-template-rows: 1fr;
    gap: calc(var(--design-unit) * 2px);
}

.version {
    text-align: end;
    font-size: small;
}

.anchor-no-padding::part(control) {
    padding: 0;
    flex-grow: 0;
}

.ellipsis-overflow {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.fluent-popover-header,
.fluent-popover-body {
    color: var(--neutral-foreground-rest);
}

.subtext {
    color: var(--foreground-subtext-rest);
}

.selected-row .subtext {
    color: var(--neutral-foreground-rest);
}

.validation-message {
    color: var(--error);
}

.page-header {
    padding: calc(var(--design-unit) * 1.5px) calc(var(--design-unit) * 2.5px);
}

.selected-row,
.selected-row fluent-button[appearance=lightweight]:not(:hover)::part(control),
.selected-row fluent-anchor[appearance=lightweight]:not(:hover)::part(control) {
    background-color: var(--neutral-fill-secondary-rest); /* Same color as the menu hover */
}

.selected-row fluent-button[appearance=lightweight]:hover::part(control),
.selected-row fluent-anchor[appearance=lightweight]:hover::part(control){
    background-color: var(--neutral-fill-stealth-rest); /* Essentially inverts the hover compared to an unselected row */
}

.severity-icon {
    vertical-align: text-bottom;
    margin-right: 3px;
}

.align-text-bottom {
    vertical-align: text-bottom;
}

 .visually-hidden {
     top: 0;
     left: -2px;
     width: 1px;
     height: 1px;
     position: absolute;
     overflow: hidden;
 }

split-panels::part(handle) {
    display: none;
}

div.error-counter-badge {
    padding: 3px 3px;
    color: var(--error-counter-badge-foreground-color) !important; /* color is applied directly to div style, so !important to override since we can't use a more specific selector */
}

.layout >.header > .header-gutters {
    margin: 0 1.5rem 0 0;
}

layout > .header {
    font-size: var(--type-ramp-base-font-size);
}

.flex-filler {
    flex-grow: 1;
}


kbd {
    color: unset;
    background-color: var(--kbd-background-color);
}

fluent-switch.table-switch::part(label) {
     width: 160px;
}

.property-grid-container {
    grid-area: main;
    overflow: auto;
    width: 100%;
    height: 100%;
    padding: calc(var(--design-unit) * 1px);
    padding-top: 0;
}

.property-grid-container fluent-accordion {
    gap: calc(var(--design-unit) * 2px);
    --fill-color: var(--neutral-layer-1);
}

/* Under the current light theme, --neutral-layer-1 is too white, so we'll
   use something that's halfway between --neutral-layer-2 and --neutral-layer1.
*/
[data-theme="light"] .property-grid-container fluent-accordion {
    --fill-color: var(--neutral-fill-rest);
}

.property-grid-container fluent-accordion-item,
.property-grid-container fluent-accordion-item::part(region) {
    background-color: var(--fill-color);
}

/* This is a hack because we can't do a selector that selects inside of a ::part,
   which is what we'd need to do to access `::part(heading):not(:hover) .icon`.
   So instead we just change the color token the non-hovered state uses.
*/
[data-theme="light"] .property-grid-container fluent-accordion-item::part(icon) {
    --neutral-fill-stealth-rest-on-neutral-fill-layer-rest: var(--fill-color);
}

.property-grid-container fluent-accordion-item::part(region) {
    padding-bottom: 0;
}

.property-grid-container fluent-accordion-item::part(heading-content) {
    font-weight: 600;
    font-size: var(--type-ramp-plus-1-font-size);
}

.property-grid-container fluent-accordion fluent-data-grid-row:last-of-type {
    border-bottom: none;
}

.property-grid-container fluent-accordion fluent-data-grid fluent-button[appearance=stealth]:not(:hover)::part(control),
.property-grid-container fluent-accordion fluent-data-grid fluent-button[appearance=lightweight]:not(:hover)::part(control) {
    background-color: var(--fill-color);
}

.property-grid-container fluent-accordion fluent-data-grid fluent-button[appearance=stealth]:hover::part(control),
.property-grid-container fluent-accordion fluent-data-grid fluent-button[appearance=lightweight]:hover::part(control) {
    background-color: var(--neutral-fill-stealth-hover-on-neutral-fill-layer-rest);
}

/* Under the current dark theme, the fluent-badge background color was too dark on --neutral-layer-1 */
[data-theme="dark"] .property-grid-container fluent-accordion-item fluent-badge::part(control) {
    background-color: var(--neutral-fill-active);
}

.total-items-footer {
    padding-left: calc(var(--design-unit) * 2.5px);
    padding-bottom: calc(var(--design-unit) * 2.5px);
}

/* Align the toast with the top of the body/bottom of the header
   and the right edge of the filter box
*/
.layout .fluent-toast-provider.position-topright {
    top: 50px;
    right: calc(var(--design-unit) * 1.5px);
}


/* Some of the data-columns (e.g. logs and details in the resource page)
   should not have ellipsis as this is unnecessary and a bit distracting.
   !important is required to override the fluentui-blazor styling.
*/
fluent-data-grid-cell.no-ellipsis {
    text-overflow: unset !important;
}

.endpoint-overflow {
    overflow-x: visible !important;
}

.endpoint-overflow .fluent-overflow-more {
    display: flex;
}

.endpoint-button {
    height: unset;
    font-size: var(--type-ramp-minus-1-font-size);
    line-height: var(--type-ramp-minus-1-line-height);
}

.endpoint-button::part(control) {
    padding: calc(((var(--design-unit) * 0.5) - var(--stroke-width)) * 1px) calc((var(--design-unit) - var(--stroke-width)) * 1px);
}

.column-header {
    /*
        fluent-data-grid-cells have a height of 100%, which should correspond to
        the height of their parent fluent-data-grid-row.
        On Safari only, this is not the case; height actually computes to the grid height.
        We can force column headers to take the height of their parent by inheriting height
        of their row.
     */
    height: inherit !important;
}</con:responseContent>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1daa1768b87eb11"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 08 May 2024 18:35:48 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:34 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="Response 2" id="141bf8b1-07ef-48c3-8537-fd845b99f21e" httpResponseStatus="304" mediaType="text/css">
        <con:settings/>
        <con:responseContent/>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1daa1768b87eb11"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 08 May 2024 18:35:48 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:29 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/js/plotly-2.26.0.min.js" method="GET" resourcePath="/js/plotly-2.26.0.min.js" id="db5ea705-88be-4a10-849b-717cab6905cf">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="Response 1" id="bd0ad3a4-ef55-4cc6-a228-406d7fd84d65" httpResponseStatus="200" mediaType="text/javascript" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:responseContent compression="gzip"></con:responseContent>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1daa17c0ca285ae"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 08 May 2024 19:15:12 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:35 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="Response 2" id="6db74e94-0497-46c2-8bb7-169064e32ce5" httpResponseStatus="304" mediaType="text/javascript">
        <con:settings/>
        <con:responseContent/>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1daa17c0ca285ae"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 08 May 2024 19:15:12 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:29 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/js/theme.js" method="GET" resourcePath="/js/theme.js" id="ece34a4d-ae02-4600-9b52-4b926a1eb970">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="Response 1" id="3e129aeb-20d9-4417-8b92-67d19bc55ea1" httpResponseStatus="200" mediaType="text/javascript" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:responseContent>import {
    accentBaseColor,
    baseLayerLuminance,
    SwatchRGB,
    fillColor,
    neutralLayerL2
} from "/_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js";

const currentThemeCookieName = "currentTheme";
const themeSettingSystem = "System";
const themeSettingDark = "Dark";
const themeSettingLight = "Light";
const darkThemeLuminance = 0.19;
const lightThemeLuminance = 1.0;

/**
 * Updates the current theme on the site based on the specified theme
 * @param {string} specifiedTheme
 */
export function updateTheme(specifiedTheme) {
    const effectiveTheme = getEffectiveTheme(specifiedTheme);

    applyTheme(effectiveTheme);
    setThemeCookie(specifiedTheme);
}

/**
 * Returns the value of the currentTheme cookie, or System if the cookie is not set.
 * @returns {string}
 */
export function getThemeCookieValue() {
    return getCookieValue(currentThemeCookieName) ?? themeSettingSystem;
}

/**
 * Returns the current system theme (Light or Dark)
 * @returns {string}
 */
function getSystemTheme() {
    let matched = window.matchMedia('(prefers-color-scheme: dark)').matches;

    if (matched) {
        return themeSettingDark;
    } else {
        return themeSettingLight;
    }
}

/**
 * Sets the currentTheme cookie to the specified value.
 * @param {string} theme
 */
function setThemeCookie(theme) {
    document.cookie = `${currentThemeCookieName}=${theme}`;
}

/**
 * Sets the document data-theme attribute to the specified value.
 * @param {string} theme The theme to set. Should be Light or Dark.
 */
function setThemeOnDocument(theme) {

    if (theme === themeSettingDark) {
        document.documentElement.setAttribute('data-theme', 'dark');
    } else /* Light */ {
        document.documentElement.setAttribute('data-theme', 'light');
    }
}

/**
 * 
 * @param {string} theme The theme to use. Should be Light or Dark.
 */
function setBaseLayerLuminance(theme) {
    const baseLayerLuminanceValue = getBaseLayerLuminanceForTheme(theme);
    baseLayerLuminance.withDefault(baseLayerLuminanceValue);
}

/**
 * Returns the value of the specified cookie, or the empty string if the cookie is not present
 * @param {string} cookieName
 * @returns {string}
 */
function getCookieValue(cookieName) {
    const cookiePieces = document.cookie.split(';');
    for (let index = 0; index &lt; cookiePieces.length; index++) {
        if (cookiePieces[index].trim().startsWith(cookieName)) {
            const cookieKeyValue = cookiePieces[index].split('=');
            if (cookieKeyValue.length > 1) {
                return cookieKeyValue[1];
            }
        }
    }

    return "";
}

/**
 * Converts a setting value for the theme (Light, Dark, System or null/empty) into the effective theme that should be applied
 * @param {string} specifiedTheme The setting value to use to determine the effective theme. Anything other than Light or Dark will be treated as System
 * @returns {string} The actual theme to use based on the supplied setting. Will be either Light or Dark.
 */
function getEffectiveTheme(specifiedTheme) {
    if (specifiedTheme === themeSettingLight ||
        specifiedTheme === themeSettingDark) {
        return specifiedTheme;
    } else {
        return getSystemTheme();
    }
}

/**
 * 
 * @param {string} theme The theme to use. Should be Light or Dark
 * @returns {string}
 */
function getBaseLayerLuminanceForTheme(theme) {
    if (theme === themeSettingDark) {
        return darkThemeLuminance;
    } else /* Light */ {
        return lightThemeLuminance;
    }
}

/**
 * Configures the accent color palette based on the .NET purple
 */
function setAccentColor() {
    // Convert the base color ourselves to avoid pulling in the
    // @microsoft/fast-colors library just for one call to parseColorHexRGB
    const baseColor = { // #512BD4
        r: 0x51 / 255.0,
        g: 0x2B / 255.0,
        b: 0xD4 / 255.0
    };

    const accentBase = SwatchRGB.create(baseColor.r, baseColor.g, baseColor.b);
    accentBaseColor.withDefault(accentBase);
}

/**
 * Configures the default background color to use for the body
 */
function setFillColor() {
    // Design specs say we should use --neutral-layer-2 as the fill color
    // for the body. Most of the web components use --fill-color as their
    // background color, so we need to make sure they get --neutral-layer-2
    // when they request --fill-color.
    fillColor.setValueFor(document.body, neutralLayerL2);
}

/**
 * Applies the Light or Dark theme to the entire site
 * @param {string} theme The theme to use. Should be Light or Dark
 */
function applyTheme(theme) {
    setBaseLayerLuminance(theme);
    setAccentColor();
    setFillColor();
    setThemeOnDocument(theme);
}

function initializeTheme() {
    const themeCookieValue = getThemeCookieValue();
    const effectiveTheme = getEffectiveTheme(themeCookieValue);

    applyTheme(effectiveTheme);
}

initializeTheme();

// SIG // Begin signature block
// SIG // MIInzAYJKoZIhvcNAQcCoIInvTCCJ7kCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // oPII5bbu2R/7zDLxVnFCNLHREsqKUWJzVwPpFQqDtGGg
// SIG // gg2FMIIGAzCCA+ugAwIBAgITMwAAA64tNVHIU49VHQAA
// SIG // AAADrjANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDg1OVoX
// SIG // DTI0MTExNDE5MDg1OVowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // 9CD8pjY3wxCoPmMhOkow7ycCltfqYnqk4wGNApzh2dTY
// SIG // +YqxozWTzJUOB38VxsgFQmXBFhOMdrGYGpvO9kdbNPkw
// SIG // HpTrW6hZqFuLLiRwGKEx4ZM5zVSqbHJuX2fPfUJ0Xmb+
// SIG // VrVsGw/BwBV2zz0rVtiSgqj3GeeGOsG7llfWyrSjyJqm
// SIG // 5DHE3o04BAI/NuhkHOv04euiqJGvHFCL8+fXvyD9OAxq
// SIG // 4fcJKtoyBb0PBA3oMNQeCsiUyLO+voZqVTOUsAWY0bN5
// SIG // YjkK4nq5DVaNdVrrowd5AX9gmz6D/TJTssns6pDCG00Y
// SIG // +Dh3ipWpnVmkhYcByyUSEKX3PLC8DkiAQQIDAQABo4IB
// SIG // gjCCAX4wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFIcf73Spl4cHOFoll27H9COd
// SIG // 4fE/MFQGA1UdEQRNMEukSTBHMS0wKwYDVQQLEyRNaWNy
// SIG // b3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQx
// SIG // FjAUBgNVBAUTDTIzMDAxMis1MDE4MzYwHwYDVR0jBBgw
// SIG // FoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0w
// SIG // SzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
// SIG // L3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDEx
// SIG // LTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYB
// SIG // BQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDEx
// SIG // LTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQBqyWA1Eu7PKNMjaaxl0V7gJ0XBysUo
// SIG // xZluMHJXFE2LEGZIZ2zMLYVjOnAGG/4dluRjSrZZo/8v
// SIG // wk4Xt8v6NBB9ofo8H1P/XidHytWTv9lg9MYu++6lPmu5
// SIG // fCozD3cI2NLZPW2BBhGX2D0R8tQBj0FbmZRuIucpiQ7D
// SIG // K3CHKlfKcc7MP8pPzuMv55Tox8+KFQD1NG6+bfbYA/BN
// SIG // PBkg4tyOh+exbaHfcNuodDJUIjq9dF6oa+Yjy0u0pUMI
// SIG // /B1t+8m6rJo0KSoZlrpesYl0jRhpt+hmqx8uENXoGJcY
// SIG // ZVJ5N2Skq90LViKNRhi9N4U+e8c4y9uXyomUF/6viCPJ
// SIG // 7huTNEJo75ehIJba+IWd3txUEc0R3y6DT6txC6cW1nR/
// SIG // LTbo9I/8fQq538G5IvJ+e5iSiOSVVkVk0i5m03Awy5E2
// SIG // ZSS4PVdQSCcFxmN4tpEfYuR7AAy/GJVtIDFlUpSgdXok
// SIG // pSui5hYtK1R9enXXvo+U/xGkLRc+qp4De3dZbzu7pOq7
// SIG // V/jCyhuCw0bEIAU4urCGIip7TI6GBRzD7yPzjFIqeZY7
// SIG // S4rVW5BRn2oEqpm8Su6yTIQvMIk8x2pwYNUa2339Z4gW
// SIG // 5xW21eFA5mLpo7NRSKRQms5OgAA18aCgqOU7Ds0h6q/Y
// SIG // B4BmEAtoTMl/TBiyKaMGAlEcdy+5FIhmzojMGjCCB3ow
// SIG // ggVioAMCAQICCmEOkNIAAAAAAAMwDQYJKoZIhvcNAQEL
// SIG // BQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMT
// SIG // KU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhv
// SIG // cml0eSAyMDExMB4XDTExMDcwODIwNTkwOVoXDTI2MDcw
// SIG // ODIxMDkwOVowfjELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYG
// SIG // A1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmluZyBQQ0Eg
// SIG // MjAxMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoC
// SIG // ggIBAKvw+nIQHC6t2G6qghBNNLrytlghn0IbKmvpWlCq
// SIG // uAY4GgRJun/DDB7dN2vGEtgL8DjCmQawyDnVARQxQtOJ
// SIG // DXlkh36UYCRsr55JnOloXtLfm1OyCizDr9mpK656Ca/X
// SIG // llnKYBoF6WZ26DJSJhIv56sIUM+zRLdd2MQuA3WraPPL
// SIG // bfM6XKEW9Ea64DhkrG5kNXimoGMPLdNAk/jj3gcN1Vx5
// SIG // pUkp5w2+oBN3vpQ97/vjK1oQH01WKKJ6cuASOrdJXtjt
// SIG // 7UORg9l7snuGG9k+sYxd6IlPhBryoS9Z5JA7La4zWMW3
// SIG // Pv4y07MDPbGyr5I4ftKdgCz1TlaRITUlwzluZH9TupwP
// SIG // rRkjhMv0ugOGjfdf8NBSv4yUh7zAIXQlXxgotswnKDgl
// SIG // mDlKNs98sZKuHCOnqWbsYR9q4ShJnV+I4iVd0yFLPlLE
// SIG // tVc/JAPw0XpbL9Uj43BdD1FGd7P4AOG8rAKCX9vAFbO9
// SIG // G9RVS+c5oQ/pI0m8GLhEfEXkwcNyeuBy5yTfv0aZxe/C
// SIG // HFfbg43sTUkwp6uO3+xbn6/83bBm4sGXgXvt1u1L50kp
// SIG // pxMopqd9Z4DmimJ4X7IvhNdXnFy/dygo8e1twyiPLI9A
// SIG // N0/B4YVEicQJTMXUpUMvdJX3bvh4IFgsE11glZo+TzOE
// SIG // 2rCIF96eTvSWsLxGoGyY0uDWiIwLAgMBAAGjggHtMIIB
// SIG // 6TAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4EFgQUSG5k
// SIG // 5VAF04KqFzc3IrVtqMp1ApUwGQYJKwYBBAGCNxQCBAwe
// SIG // CgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB
// SIG // /wQFMAMBAf8wHwYDVR0jBBgwFoAUci06AjGQQ7kUBU7h
// SIG // 6qfHMdEjiTQwWgYDVR0fBFMwUTBPoE2gS4ZJaHR0cDov
// SIG // L2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVj
// SIG // dHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIyLmNy
// SIG // bDBeBggrBgEFBQcBAQRSMFAwTgYIKwYBBQUHMAKGQmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMv
// SIG // TWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIyLmNydDCB
// SIG // nwYDVR0gBIGXMIGUMIGRBgkrBgEEAYI3LgMwgYMwPwYI
// SIG // KwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2lvcHMvZG9jcy9wcmltYXJ5Y3BzLmh0bTBABggr
// SIG // BgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBwAG8AbABp
// SIG // AGMAeQBfAHMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkq
// SIG // hkiG9w0BAQsFAAOCAgEAZ/KGpZjgVHkaLtPYdGcimwuW
// SIG // EeFjkplCln3SeQyQwWVfLiw++MNy0W2D/r4/6ArKO79H
// SIG // qaPzadtjvyI1pZddZYSQfYtGUFXYDJJ80hpLHPM8QotS
// SIG // 0LD9a+M+By4pm+Y9G6XUtR13lDni6WTJRD14eiPzE32m
// SIG // kHSDjfTLJgJGKsKKELukqQUMm+1o+mgulaAqPyprWElj
// SIG // HwlpblqYluSD9MCP80Yr3vw70L01724lruWvJ+3Q3fMO
// SIG // r5kol5hNDj0L8giJ1h/DMhji8MUtzluetEk5CsYKwsat
// SIG // ruWy2dsViFFFWDgycScaf7H0J/jeLDogaZiyWYlobm+n
// SIG // t3TDQAUGpgEqKD6CPxNNZgvAs0314Y9/HG8VfUWnduVA
// SIG // KmWjw11SYobDHWM2l4bf2vP48hahmifhzaWX0O5dY0Hj
// SIG // Wwechz4GdwbRBrF1HxS+YWG18NzGGwS+30HHDiju3mUv
// SIG // 7Jf2oVyW2ADWoUa9WfOXpQlLSBCZgB/QACnFsZulP0V3
// SIG // HjXG0qKin3p6IvpIlR+r+0cjgPWe+L9rt0uX4ut1eBrs
// SIG // 6jeZeRhL/9azI2h15q/6/IvrC4DqaTuv/DDtBEyO3991
// SIG // bWORPdGdVk5Pv4BXIqF4ETIheu9BCrE/+6jMpF3BoYib
// SIG // V3FWTkhFwELJm3ZbCoBIa/15n8G9bW1qyVJzEw16UM0x
// SIG // ghmfMIIZmwIBATCBlTB+MQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5n
// SIG // IFBDQSAyMDExAhMzAAADri01UchTj1UdAAAAAAOuMA0G
// SIG // CWCGSAFlAwQCAQUAoIGuMBkGCSqGSIb3DQEJAzEMBgor
// SIG // BgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAMBgorBgEE
// SIG // AYI3AgEVMC8GCSqGSIb3DQEJBDEiBCC5C4nrnPBSgUTp
// SIG // BwqFWrZEPsqS7O1j6KLpQJQrwDnXZzBCBgorBgEEAYI3
// SIG // AgEMMTQwMqAUgBIATQBpAGMAcgBvAHMAbwBmAHShGoAY
// SIG // aHR0cDovL3d3dy5taWNyb3NvZnQuY29tMA0GCSqGSIb3
// SIG // DQEBAQUABIIBAFV5yRFSxwKieORw1RKtzgdZbHg5lMuv
// SIG // IvSGPYJN+isSOAwKoRMJ8V11TVNVytMUfROvDU12JORn
// SIG // DfjoVfWW9Tga/FGtiiBoZfufL0HJDiaH9xsOmjtNdlJ1
// SIG // jOSHzVTxa7VRwxjB+Fw7jrHekmGaYe9fFiaCCcI78ftX
// SIG // IBujBeKCXgCAB+pTHC461/Jn58iAIW4/AfkiL2EfEY2y
// SIG // TjEhEClj8jXMJysHP9fcLCKOlWdrdPK/mwEg+1VkKp0e
// SIG // 6vTHiZJnWQwWuy/ddjmaWQrIwEcjQo6PhvbyPW23d7g0
// SIG // YyMWeguXcvowa+WfR8mbCHONuOaKWLQU36O1gIgSR9v9
// SIG // clGhghcpMIIXJQYKKwYBBAGCNwMDATGCFxUwghcRBgkq
// SIG // hkiG9w0BBwKgghcCMIIW/gIBAzEPMA0GCWCGSAFlAwQC
// SIG // AQUAMIIBWQYLKoZIhvcNAQkQAQSgggFIBIIBRDCCAUAC
// SIG // AQEGCisGAQQBhFkKAwEwMTANBglghkgBZQMEAgEFAAQg
// SIG // MF69V7X1luULZFCJN8dh8Zn/n3pKkJhwAIEAdr8YxpoC
// SIG // BmYzojLRARgTMjAyNDA1MDgyMTE0MTUuODk2WjAEgAIB
// SIG // 9KCB2KSB1TCB0jELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEtMCsG
// SIG // A1UECxMkTWljcm9zb2Z0IElyZWxhbmQgT3BlcmF0aW9u
// SIG // cyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVT
// SIG // TjoyQUQ0LTRCOTItRkEwMTElMCMGA1UEAxMcTWljcm9z
// SIG // b2Z0IFRpbWUtU3RhbXAgU2VydmljZaCCEXgwggcnMIIF
// SIG // D6ADAgECAhMzAAAB3p5InpafKEQ9AAEAAAHeMA0GCSqG
// SIG // SIb3DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwMB4XDTIzMTAxMjE5MDcxMloXDTI1MDExMDE5MDcx
// SIG // MlowgdIxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsT
// SIG // JE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGlt
// SIG // aXRlZDEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046MkFE
// SIG // NC00QjkyLUZBMDExJTAjBgNVBAMTHE1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFNlcnZpY2UwggIiMA0GCSqGSIb3DQEB
// SIG // AQUAA4ICDwAwggIKAoICAQC0gfQchfVCA4QOsRazp4sP
// SIG // 8bA5fLEovazgjl0kjuFTEI5zRgKOVR8dIoozBDB/S2Nk
// SIG // lCAZFUEtDJepEfk2oJFD22hKcI4UNZqa4UYCU/45Up4n
// SIG // ONlQwKNHp+CSOsZ16AKFqCskmPP0TiCnaaYYCOziW+Fx
// SIG // 5NT97F9qTWd9iw2NZLXIStf4Vsj5W5WlwB0btBN8p78K
// SIG // 0vP23KKwDTug47srMkvc1Jq/sNx9wBL0oLNkXri49qZA
// SIG // XH1tVDwhbnS3eyD2dkQuKHUHBD52Ndo8qWD50usmQLNK
// SIG // S6atCkRVMgdcesejlO97LnYhzjdephNJeiy0/TphqNEv
// SIG // eAcYNzf92hOn1G51aHplXOxZBS7pvCpGXG0O3Dh0gFhi
// SIG // cXQr6OTrVLUXUqn/ORZJQlyCJIOLJu5zPU5LVFXztJKe
// SIG // pMe5srIA9EK8cev+aGqp8Dk1izcyvgQotRu51A9abXrl
// SIG // 70KfHxNSqU45xv9TiXnocCjTT4xrffFdAZqIGU3t0sQZ
// SIG // DnjkMiwPvuR8oPy+vKXvg62aGT1yWhlP4gYhZi/rpfzo
// SIG // t3fN8ywB5R0Jh/1RjQX0cD/osb6ocpPxHm8Ll1SWPq08
// SIG // n20X7ofZ9AGjIYTccYOrRismUuBABIg8axfZgGRMvHvK
// SIG // 3+nZSiF+Xd2kC6PXw3WtWUzsPlwHAL49vzdwy1RmZR5x
// SIG // 5QIDAQABo4IBSTCCAUUwHQYDVR0OBBYEFGswJm8bHmmq
// SIG // YHccyvDrPp2j0BLIMB8GA1UdIwQYMBaAFJ+nFV0AXmJd
// SIG // g/Tl0mWnG1M1GelyMF8GA1UdHwRYMFYwVKBSoFCGTmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY3Js
// SIG // L01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAy
// SIG // MDEwKDEpLmNybDBsBggrBgEFBQcBAQRgMF4wXAYIKwYB
// SIG // BQUHMAKGUGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2lvcHMvY2VydHMvTWljcm9zb2Z0JTIwVGltZS1TdGFt
// SIG // cCUyMFBDQSUyMDIwMTAoMSkuY3J0MAwGA1UdEwEB/wQC
// SIG // MAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwDgYDVR0P
// SIG // AQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4ICAQDilMB7
// SIG // Fw2nBjr1CILORw4D7NC2dash0ugusHypS2g9+rWX21rd
// SIG // cfhjIms0rsvhrMYlR85ITFvhaivIK7i0Fjf7Dgl/nxlI
// SIG // E/S09tXESKXGY+P2RSL8LZAXLAs9VxFLF2DkiVD4rWOx
// SIG // PG25XZpoWGdvafl0KSHLBv6vmI5KgVvZsNK7tTH8TE0L
// SIG // PTEw4g9vIAFRqzwNzcpIkgob3aku1V/vy3BM/VG87aP8
// SIG // NvFgPBzgh6gU2w0R5oj+zCI/kkJiPVSGsmLCBkY73pZj
// SIG // WtDr21PQiUs/zXzBIH9jRzGVGFvCqlhIyIz3xyCsVpTT
// SIG // GIbln1kUh2QisiADQNGiS+LKB0Lc82djJzX42GPOdcB2
// SIG // IxoMFI/4ZS0YEDuUt9Gce/BqgSn8paduWjlif6j4Qvg1
// SIG // zNoF2oyF25fo6RnFQDcLRRbowiUXWW3h9UfkONRY4AYO
// SIG // JtzkxQxqLeQ0rlZEII5Lu6TlT7ZXROOkJQ4P9loT6U0M
// SIG // Vx+uLD9Rn5AMFLbeq62TPzwsERuoIq2Jp00Sy7InAYaG
// SIG // C4fhBBY1b4lwBk5OqZ7vI8f+Fj1rtI7M+8hc4PNvxTKg
// SIG // pPcCty78iwMgxzfhcWxwMbYMGne6C0DzNFhhEXQdbpjw
// SIG // iImLEn/4+/RKh3aDcEGETlZvmV9dEV95+m0ZgJ7JHjYY
// SIG // tMJ1WnlaICzHRg/p6jCCB3EwggVZoAMCAQICEzMAAAAV
// SIG // xedrngKbSZkAAAAAABUwDQYJKoZIhvcNAQELBQAwgYgx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jv
// SIG // c29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAy
// SIG // MDEwMB4XDTIxMDkzMDE4MjIyNVoXDTMwMDkzMDE4MzIy
// SIG // NVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
// SIG // bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
// SIG // FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMd
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwggIi
// SIG // MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDk4aZM
// SIG // 57RyIQt5osvXJHm9DtWC0/3unAcH0qlsTnXIyjVX9gF/
// SIG // bErg4r25PhdgM/9cT8dm95VTcVrifkpa/rg2Z4VGIwy1
// SIG // jRPPdzLAEBjoYH1qUoNEt6aORmsHFPPFdvWGUNzBRMhx
// SIG // XFExN6AKOG6N7dcP2CZTfDlhAnrEqv1yaa8dq6z2Nr41
// SIG // JmTamDu6GnszrYBbfowQHJ1S/rboYiXcag/PXfT+jlPP
// SIG // 1uyFVk3v3byNpOORj7I5LFGc6XBpDco2LXCOMcg1KL3j
// SIG // tIckw+DJj361VI/c+gVVmG1oO5pGve2krnopN6zL64NF
// SIG // 50ZuyjLVwIYwXE8s4mKyzbnijYjklqwBSru+cakXW2dg
// SIG // 3viSkR4dPf0gz3N9QZpGdc3EXzTdEonW/aUgfX782Z5F
// SIG // 37ZyL9t9X4C626p+Nuw2TPYrbqgSUei/BQOj0XOmTTd0
// SIG // lBw0gg/wEPK3Rxjtp+iZfD9M269ewvPV2HM9Q07BMzlM
// SIG // jgK8QmguEOqEUUbi0b1qGFphAXPKZ6Je1yh2AuIzGHLX
// SIG // pyDwwvoSCtdjbwzJNmSLW6CmgyFdXzB0kZSU2LlQ+QuJ
// SIG // YfM2BjUYhEfb3BvR/bLUHMVr9lxSUV0S2yW6r1AFemzF
// SIG // ER1y7435UsSFF5PAPBXbGjfHCBUYP3irRbb1Hode2o+e
// SIG // FnJpxq57t7c+auIurQIDAQABo4IB3TCCAdkwEgYJKwYB
// SIG // BAGCNxUBBAUCAwEAATAjBgkrBgEEAYI3FQIEFgQUKqdS
// SIG // /mTEmr6CkTxGNSnPEP8vBO4wHQYDVR0OBBYEFJ+nFV0A
// SIG // XmJdg/Tl0mWnG1M1GelyMFwGA1UdIARVMFMwUQYMKwYB
// SIG // BAGCN0yDfQEBMEEwPwYIKwYBBQUHAgEWM2h0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvRG9jcy9SZXBv
// SIG // c2l0b3J5Lmh0bTATBgNVHSUEDDAKBggrBgEFBQcDCDAZ
// SIG // BgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8E
// SIG // BAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAW
// SIG // gBTV9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBN
// SIG // MEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20v
// SIG // cGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAx
// SIG // MC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsG
// SIG // AQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20v
// SIG // cGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIz
// SIG // LmNydDANBgkqhkiG9w0BAQsFAAOCAgEAnVV9/Cqt4Swf
// SIG // ZwExJFvhnnJL/Klv6lwUtj5OR2R4sQaTlz0xM7U518Jx
// SIG // Nj/aZGx80HU5bbsPMeTCj/ts0aGUGCLu6WZnOlNN3Zi6
// SIG // th542DYunKmCVgADsAW+iehp4LoJ7nvfam++Kctu2D9I
// SIG // dQHZGN5tggz1bSNU5HhTdSRXud2f8449xvNo32X2pFaq
// SIG // 95W2KFUn0CS9QKC/GbYSEhFdPSfgQJY4rPf5KYnDvBew
// SIG // VIVCs/wMnosZiefwC2qBwoEZQhlSdYo2wh3DYXMuLGt7
// SIG // bj8sCXgU6ZGyqVvfSaN0DLzskYDSPeZKPmY7T7uG+jIa
// SIG // 2Zb0j/aRAfbOxnT99kxybxCrdTDFNLB62FD+CljdQDzH
// SIG // VG2dY3RILLFORy3BFARxv2T5JL5zbcqOCb2zAVdJVGTZ
// SIG // c9d/HltEAY5aGZFrDZ+kKNxnGSgkujhLmm77IVRrakUR
// SIG // R6nxt67I6IleT53S0Ex2tVdUCbFpAUR+fKFhbHP+Crvs
// SIG // QWY9af3LwUFJfn6Tvsv4O+S3Fb+0zj6lMVGEvL8CwYKi
// SIG // excdFYmNcP7ntdAoGokLjzbaukz5m/8K6TT4JDVnK+AN
// SIG // uOaMmdbhIurwJ0I9JZTmdHRbatGePu1+oDEzfbzL6Xu/
// SIG // OHBE0ZDxyKs6ijoIYn/ZcGNTTY3ugm2lBRDBcQZqELQd
// SIG // VTNYs6FwZvKhggLUMIICPQIBATCCAQChgdikgdUwgdIx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsTJE1pY3Jv
// SIG // c29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGltaXRlZDEm
// SIG // MCQGA1UECxMdVGhhbGVzIFRTUyBFU046MkFENC00Qjky
// SIG // LUZBMDExJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0
// SIG // YW1wIFNlcnZpY2WiIwoBATAHBgUrDgMCGgMVAGigUorM
// SIG // uMvOqZfF8ttgiWRMRNrzoIGDMIGApH4wfDELMAkGA1UE
// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
// SIG // b3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRp
// SIG // bWUtU3RhbXAgUENBIDIwMTAwDQYJKoZIhvcNAQEFBQAC
// SIG // BQDp5gjkMCIYDzIwMjQwNTA4MjIyMTI0WhgPMjAyNDA1
// SIG // MDkyMjIxMjRaMHQwOgYKKwYBBAGEWQoEATEsMCowCgIF
// SIG // AOnmCOQCAQAwBwIBAAICD9IwBwIBAAICEYcwCgIFAOnn
// SIG // WmQCAQAwNgYKKwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGE
// SIG // WQoDAqAKMAgCAQACAwehIKEKMAgCAQACAwGGoDANBgkq
// SIG // hkiG9w0BAQUFAAOBgQAlyNudZyNOOliWCIBziAuheWwq
// SIG // g/A1fa9AWKMH2x3gd2wHfPXkIxcb/iCfkUCG44y822Oq
// SIG // q/lKO14P36Pfv7W7sCiyVLNItnEQXhYqH8GTSLwnhELk
// SIG // EWydY5eq6rFw9GnOukX7ho40lhQprO1k3XpcbApjVUL/
// SIG // fdfLWDjwnJJSSTGCBA0wggQJAgEBMIGTMHwxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB3p5InpafKEQ9
// SIG // AAEAAAHeMA0GCWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG
// SIG // 9w0BCQMxDQYLKoZIhvcNAQkQAQQwLwYJKoZIhvcNAQkE
// SIG // MSIEIEqFjYg1DlbRkOqamQE32TdFron+gB1+W7sWQ5DJ
// SIG // mvQNMIH6BgsqhkiG9w0BCRACLzGB6jCB5zCB5DCBvQQg
// SIG // jj4jnw3BXhAQSQJ/5gtzIK0+cP1Ns/NS2A+OB3N+HXsw
// SIG // gZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MAITMwAAAd6eSJ6WnyhEPQABAAAB3jAiBCCa/cfGLhVX
// SIG // 4GOlOsgg+RycaiV3/F1wDeAu1ExMv42tIDANBgkqhkiG
// SIG // 9w0BAQsFAASCAgAlQYt6bUUwPZsEqUOjzc2M9Er6IYOD
// SIG // dwUAfKL+SqSsf1TC+ZbCz+59GUv1LoUgZc+NGPfgYST9
// SIG // dXn1ovfR6NHu3VZ0o1qf4Tsg+t8VVT3OYshA90ziyS75
// SIG // 9LxH2H9xFC9YwmX0jtCXRAeyjfJVK43DdcXnbgUZVf/R
// SIG // pRiFtWPi/R+aT19TCYiuV2hkWgPrXRUiLY3EdxKDkl7d
// SIG // OzC4eewwRdqg8oEge7No5iBhvtBTrEeGd1IJZbDGzKGR
// SIG // 7ptAxhHcYY16+tlqfXKskisUd4Yjgi2BWY6cFwEcNQ7n
// SIG // +LSejuRaNegkvdQFkcWKBrbTeGGTFO81jA4qvjiEkjJi
// SIG // Sm1Gm0Kdl9hhBPNAoBEhLz4n9mAKnTttUmDwLzBI0Bmr
// SIG // tPLweF++cx2J82/bTIICeCY/L9pLy8GJJF9+lwu50KmW
// SIG // PNOgqvuYLl8Tb33/h8BabGJr8nAqtDZ5YFKpJcmbMANR
// SIG // l4dxc9fIUztII9h6M8HdAiULDxc/nHku+Dap+QTwRUo+
// SIG // JxSFrf3Rqrk382G4Og+Rx13T9xvohdoYhjyP1wX1+eSd
// SIG // 13JE2s9YdBBOxgvzq0JdMmuyjxBDVQqtXoOWCrbaIeAn
// SIG // +lxTp7lnZApj2ZMlScWLRgJBAi84C1pCZVKPVS6YWIx9
// SIG // pcb+ZLFGYQ/6EKzKvbPRyIe+Dq9VW3gSoSvzkQ==
// SIG // End signature block</con:responseContent>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1daa17c0c95f7d7"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 08 May 2024 19:15:12 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:36 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="Response 2" id="9be6308f-dcde-4bc4-b856-b1304e66fe13" httpResponseStatus="304" mediaType="text/javascript">
        <con:settings/>
        <con:responseContent/>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1daa17c0c95f7d7"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 08 May 2024 19:15:12 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:29 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js" method="GET" resourcePath="/_content/Microsoft.FluentUI.AspNetCore.Components/Microsoft.FluentUI.AspNetCore.Components.lib.module.js" id="9eecaf87-f8d2-49f5-b6a2-ec8075d25a91">
      <con:settings/>
      <con:dispatchStyle>SEQUENCE</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="Response 1" id="3fe04c13-34e5-4cf1-bcbd-3c2cb7436afd" httpResponseStatus="200" mediaType="text/javascript" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:responseContent><![CDATA[var le=function(){if(typeof globalThis<"u")return globalThis;if(typeof global<"u")return global;if(typeof self<"u")return self;if(typeof window<"u")return window;try{return new Function("return this")()}catch{return{}}}();le.trustedTypes===void 0&&(le.trustedTypes={createPolicy:(i,t)=>t});var Ka={configurable:!1,enumerable:!1,writable:!1};le.FAST===void 0&&Reflect.defineProperty(le,"FAST",Object.assign({value:Object.create(null)},Ka));var Bi=le.FAST;if(Bi.getById===void 0){let i=Object.create(null);Reflect.defineProperty(Bi,"getById",Object.assign({value(t,e){let o=i[t];return o===void 0&&(o=e?i[t]=e():null),o}},Ka))}var Ve=Object.freeze([]);function tl(){let i=new WeakMap;return function(t){let e=i.get(t);if(e===void 0){let o=Reflect.getPrototypeOf(t);for(;e===void 0&&o!==null;)e=i.get(o),o=Reflect.getPrototypeOf(o);e=e===void 0?[]:e.slice(0),i.set(t,e)}return e}}var Ms=le.FAST.getById(1,()=>{let i=[],t=[];function e(){if(t.length)throw t.shift()}function o(r){try{r.call()}catch(a){t.push(a),setTimeout(e,0)}}function s(){let a=0;for(;a<i.length;)if(o(i[a]),a++,a>1024){for(let d=0,u=i.length-a;d<u;d++)i[d]=i[d+a];i.length-=a,a=0}i.length=0}function n(r){i.length<1&&le.requestAnimationFrame(s),i.push(r)}return Object.freeze({enqueue:n,process:s})}),el=le.trustedTypes.createPolicy("fast-html",{createHTML:i=>i}),Ns=el,Hi=`fast-${Math.random().toString(36).substring(2,8)}`,il=`${Hi}{`,wr=`}${Hi}`,D=Object.freeze({supportsAdoptedStyleSheets:Array.isArray(document.adoptedStyleSheets)&&"replace"in CSSStyleSheet.prototype,setHTMLPolicy(i){if(Ns!==el)throw new Error("The HTML policy can only be set once.");Ns=i},createHTML(i){return Ns.createHTML(i)},isMarker(i){return i&&i.nodeType===8&&i.data.startsWith(Hi)},extractDirectiveIndexFromMarker(i){return parseInt(i.data.replace(`${Hi}:`,""))},createInterpolationPlaceholder(i){return`${il}${i}${wr}`},createCustomAttributePlaceholder(i,t){return`${i}="${this.createInterpolationPlaceholder(t)}"`},createBlockPlaceholder(i){return`<!--${Hi}:${i}-->`},queueUpdate:Ms.enqueue,processUpdates:Ms.process,nextUpdate(){return new Promise(Ms.enqueue)},setAttribute(i,t,e){e==null?i.removeAttribute(t):i.setAttribute(t,e)},setBooleanAttribute(i,t,e){e?i.setAttribute(t,""):i.removeAttribute(t)},removeChildNodes(i){for(let t=i.firstChild;t!==null;t=i.firstChild)i.removeChild(t)},createTemplateWalker(i){return document.createTreeWalker(i,133,null,!1)}}),si=class{constructor(t,e){this.sub1=void 0,this.sub2=void 0,this.spillover=void 0,this.source=t,this.sub1=e}has(t){return this.spillover===void 0?this.sub1===t||this.sub2===t:this.spillover.indexOf(t)!==-1}subscribe(t){let e=this.spillover;if(e===void 0){if(this.has(t))return;if(this.sub1===void 0){this.sub1=t;return}if(this.sub2===void 0){this.sub2=t;return}this.spillover=[this.sub1,this.sub2,t],this.sub1=void 0,this.sub2=void 0}else e.indexOf(t)===-1&&e.push(t)}unsubscribe(t){let e=this.spillover;if(e===void 0)this.sub1===t?this.sub1=void 0:this.sub2===t&&(this.sub2=void 0);else{let o=e.indexOf(t);o!==-1&&e.splice(o,1)}}notify(t){let e=this.spillover,o=this.source;if(e===void 0){let s=this.sub1,n=this.sub2;s!==void 0&&s.handleChange(o,t),n!==void 0&&n.handleChange(o,t)}else for(let s=0,n=e.length;s<n;++s)e[s].handleChange(o,t)}},Ao=class{constructor(t){this.subscribers={},this.sourceSubscribers=null,this.source=t}notify(t){var e;let o=this.subscribers[t];o!==void 0&&o.notify(t),(e=this.sourceSubscribers)===null||e===void 0||e.notify(t)}subscribe(t,e){var o;if(e){let s=this.subscribers[e];s===void 0&&(this.subscribers[e]=s=new si(this.source)),s.subscribe(t)}else this.sourceSubscribers=(o=this.sourceSubscribers)!==null&&o!==void 0?o:new si(this.source),this.sourceSubscribers.subscribe(t)}unsubscribe(t,e){var o;if(e){let s=this.subscribers[e];s!==void 0&&s.unsubscribe(t)}else(o=this.sourceSubscribers)===null||o===void 0||o.unsubscribe(t)}},S=Bi.getById(2,()=>{let i=/(:|&&|\|\||if)/,t=new WeakMap,e=D.queueUpdate,o,s=u=>{throw new Error("Must call enableArrayObservation before observing arrays.")};function n(u){let p=u.$fastController||t.get(u);return p===void 0&&(Array.isArray(u)?p=s(u):t.set(u,p=new Ao(u))),p}let r=tl();class a{constructor(p){this.name=p,this.field=`_${p}`,this.callback=`${p}Changed`}getValue(p){return o!==void 0&&o.watch(p,this.name),p[this.field]}setValue(p,f){let v=this.field,T=p[v];if(T!==f){p[v]=f;let A=p[this.callback];typeof A=="function"&&A.call(p,T,f),n(p).notify(this.name)}}}class d extends si{constructor(p,f,v=!1){super(p,f),this.binding=p,this.isVolatileBinding=v,this.needsRefresh=!0,this.needsQueue=!0,this.first=this,this.last=null,this.propertySource=void 0,this.propertyName=void 0,this.notifier=void 0,this.next=void 0}observe(p,f){this.needsRefresh&&this.last!==null&&this.disconnect();let v=o;o=this.needsRefresh?this:void 0,this.needsRefresh=this.isVolatileBinding;let T=this.binding(p,f);return o=v,T}disconnect(){if(this.last!==null){let p=this.first;for(;p!==void 0;)p.notifier.unsubscribe(this,p.propertyName),p=p.next;this.last=null,this.needsRefresh=this.needsQueue=!0}}watch(p,f){let v=this.last,T=n(p),A=v===null?this.first:{};if(A.propertySource=p,A.propertyName=f,A.notifier=T,T.subscribe(this,f),v!==null){if(!this.needsRefresh){let N;o=void 0,N=v.propertySource[v.propertyName],o=this,p===N&&(this.needsRefresh=!0)}v.next=A}this.last=A}handleChange(){this.needsQueue&&(this.needsQueue=!1,e(this))}call(){this.last!==null&&(this.needsQueue=!0,this.notify(this))}records(){let p=this.first;return{next:()=>{let f=p;return f===void 0?{value:void 0,done:!0}:(p=p.next,{value:f,done:!1})},[Symbol.iterator]:function(){return this}}}}return Object.freeze({setArrayObserverFactory(u){s=u},getNotifier:n,track(u,p){o!==void 0&&o.watch(u,p)},trackVolatile(){o!==void 0&&(o.needsRefresh=!0)},notify(u,p){n(u).notify(p)},defineProperty(u,p){typeof p=="string"&&(p=new a(p)),r(u).push(p),Reflect.defineProperty(u,p.name,{enumerable:!0,get:function(){return p.getValue(this)},set:function(f){p.setValue(this,f)}})},getAccessors:r,binding(u,p,f=this.isVolatileBinding(u)){return new d(u,p,f)},isVolatileBinding(u){return i.test(u.toString())}})});function m(i,t){S.defineProperty(i,t)}function Sd(i,t,e){return Object.assign({},e,{get:function(){return S.trackVolatile(),e.get.apply(this)}})}var oa=Bi.getById(3,()=>{let i=null;return{get(){return i},set(t){i=t}}}),He=class{constructor(){this.index=0,this.length=0,this.parent=null,this.parentContext=null}get event(){return oa.get()}get isEven(){return this.index%2===0}get isOdd(){return this.index%2!==0}get isFirst(){return this.index===0}get isInMiddle(){return!this.isFirst&&!this.isLast}get isLast(){return this.index===this.length-1}static setEvent(t){oa.set(t)}};S.defineProperty(He.prototype,"index");S.defineProperty(He.prototype,"length");var Pi=Object.seal(new He),ni=class{constructor(){this.targetIndex=0}},Lo=class extends ni{constructor(){super(...arguments),this.createPlaceholder=D.createInterpolationPlaceholder}},_i=class extends ni{constructor(t,e,o){super(),this.name=t,this.behavior=e,this.options=o}createPlaceholder(t){return D.createCustomAttributePlaceholder(this.name,t)}createBehavior(t){return new this.behavior(t,this.options)}};function Td(i,t){this.source=i,this.context=t,this.bindingObserver===null&&(this.bindingObserver=S.binding(this.binding,this,this.isBindingVolatile)),this.updateTarget(this.bindingObserver.observe(i,t))}function Dd(i,t){this.source=i,this.context=t,this.target.addEventListener(this.targetName,this)}function Rd(){this.bindingObserver.disconnect(),this.source=null,this.context=null}function Ed(){this.bindingObserver.disconnect(),this.source=null,this.context=null;let i=this.target.$fastView;i!==void 0&&i.isComposed&&(i.unbind(),i.needsBindOnly=!0)}function Od(){this.target.removeEventListener(this.targetName,this),this.source=null,this.context=null}function Ad(i){D.setAttribute(this.target,this.targetName,i)}function Ld(i){D.setBooleanAttribute(this.target,this.targetName,i)}function Vd(i){if(i==null&&(i=""),i.create){this.target.textContent="";let t=this.target.$fastView;t===void 0?t=i.create():this.target.$fastTemplate!==i&&(t.isComposed&&(t.remove(),t.unbind()),t=i.create()),t.isComposed?t.needsBindOnly&&(t.needsBindOnly=!1,t.bind(this.source,this.context)):(t.isComposed=!0,t.bind(this.source,this.context),t.insertBefore(this.target),this.target.$fastView=t,this.target.$fastTemplate=i)}else{let t=this.target.$fastView;t!==void 0&&t.isComposed&&(t.isComposed=!1,t.remove(),t.needsBindOnly?t.needsBindOnly=!1:t.unbind()),this.target.textContent=i}}function zd(i){this.target[this.targetName]=i}function Hd(i){let t=this.classVersions||Object.create(null),e=this.target,o=this.version||0;if(i!=null&&i.length){let s=i.split(/\s+/);for(let n=0,r=s.length;n<r;++n){let a=s[n];a!==""&&(t[a]=o,e.classList.add(a))}}if(this.classVersions=t,this.version=o+1,o!==0){o-=1;for(let s in t)t[s]===o&&e.classList.remove(s)}}var ji=class extends Lo{constructor(t){super(),this.binding=t,this.bind=Td,this.unbind=Rd,this.updateTarget=Ad,this.isBindingVolatile=S.isVolatileBinding(this.binding)}get targetName(){return this.originalTargetName}set targetName(t){if(this.originalTargetName=t,t!==void 0)switch(t[0]){case":":if(this.cleanedTargetName=t.substr(1),this.updateTarget=zd,this.cleanedTargetName==="innerHTML"){let e=this.binding;this.binding=(o,s)=>D.createHTML(e(o,s))}break;case"?":this.cleanedTargetName=t.substr(1),this.updateTarget=Ld;break;case"@":this.cleanedTargetName=t.substr(1),this.bind=Dd,this.unbind=Od;break;default:this.cleanedTargetName=t,t==="class"&&(this.updateTarget=Hd);break}}targetAtContent(){this.updateTarget=Vd,this.unbind=Ed}createBehavior(t){return new rn(t,this.binding,this.isBindingVolatile,this.bind,this.unbind,this.updateTarget,this.cleanedTargetName)}},rn=class{constructor(t,e,o,s,n,r,a){this.source=null,this.context=null,this.bindingObserver=null,this.target=t,this.binding=e,this.isBindingVolatile=o,this.bind=s,this.unbind=n,this.updateTarget=r,this.targetName=a}handleChange(){this.updateTarget(this.bindingObserver.observe(this.source,this.context))}handleEvent(t){He.setEvent(t);let e=this.binding(this.source,this.context);He.setEvent(null),e!==!0&&t.preventDefault()}},Bs=null,an=class i{addFactory(t){t.targetIndex=this.targetIndex,this.behaviorFactories.push(t)}captureContentBinding(t){t.targetAtContent(),this.addFactory(t)}reset(){this.behaviorFactories=[],this.targetIndex=-1}release(){Bs=this}static borrow(t){let e=Bs||new i;return e.directives=t,e.reset(),Bs=null,e}};function Pd(i){if(i.length===1)return i[0];let t,e=i.length,o=i.map(r=>typeof r=="string"?()=>r:(t=r.targetName||t,r.binding)),s=(r,a)=>{let d="";for(let u=0;u<e;++u)d+=o[u](r,a);return d},n=new ji(s);return n.targetName=t,n}var Md=wr.length;function ol(i,t){let e=t.split(il);if(e.length===1)return null;let o=[];for(let s=0,n=e.length;s<n;++s){let r=e[s],a=r.indexOf(wr),d;if(a===-1)d=r;else{let u=parseInt(r.substring(0,a));o.push(i.directives[u]),d=r.substring(a+Md)}d!==""&&o.push(d)}return o}function sa(i,t,e=!1){let o=t.attributes;for(let s=0,n=o.length;s<n;++s){let r=o[s],a=r.value,d=ol(i,a),u=null;d===null?e&&(u=new ji(()=>a),u.targetName=r.name):u=Pd(d),u!==null&&(t.removeAttributeNode(r),s--,n--,i.addFactory(u))}}function Nd(i,t,e){let o=ol(i,t.textContent);if(o!==null){let s=t;for(let n=0,r=o.length;n<r;++n){let a=o[n],d=n===0?t:s.parentNode.insertBefore(document.createTextNode(""),s.nextSibling);typeof a=="string"?d.textContent=a:(d.textContent=" ",i.captureContentBinding(a)),s=d,i.targetIndex++,d!==t&&e.nextNode()}i.targetIndex--}}function Bd(i,t){let e=i.content;document.adoptNode(e);let o=an.borrow(t);sa(o,i,!0);let s=o.behaviorFactories;o.reset();let n=D.createTemplateWalker(e),r;for(;r=n.nextNode();)switch(o.targetIndex++,r.nodeType){case 1:sa(o,r);break;case 3:Nd(o,r,n);break;case 8:D.isMarker(r)&&o.addFactory(t[D.extractDirectiveIndexFromMarker(r)])}let a=0;(D.isMarker(e.firstChild)||e.childNodes.length===1&&t.length)&&(e.insertBefore(document.createComment(""),e.firstChild),a=-1);let d=o.behaviorFactories;return o.release(),{fragment:e,viewBehaviorFactories:d,hostBehaviorFactories:s,targetOffset:a}}var _s=document.createRange(),Vo=class{constructor(t,e){this.fragment=t,this.behaviors=e,this.source=null,this.context=null,this.firstChild=t.firstChild,this.lastChild=t.lastChild}appendTo(t){t.appendChild(this.fragment)}insertBefore(t){if(this.fragment.hasChildNodes())t.parentNode.insertBefore(this.fragment,t);else{let e=this.lastChild;if(t.previousSibling===e)return;let o=t.parentNode,s=this.firstChild,n;for(;s!==e;)n=s.nextSibling,o.insertBefore(s,t),s=n;o.insertBefore(e,t)}}remove(){let t=this.fragment,e=this.lastChild,o=this.firstChild,s;for(;o!==e;)s=o.nextSibling,t.appendChild(o),o=s;t.appendChild(e)}dispose(){let t=this.firstChild.parentNode,e=this.lastChild,o=this.firstChild,s;for(;o!==e;)s=o.nextSibling,t.removeChild(o),o=s;t.removeChild(e);let n=this.behaviors,r=this.source;for(let a=0,d=n.length;a<d;++a)n[a].unbind(r)}bind(t,e){let o=this.behaviors;if(this.source!==t)if(this.source!==null){let s=this.source;this.source=t,this.context=e;for(let n=0,r=o.length;n<r;++n){let a=o[n];a.unbind(s),a.bind(t,e)}}else{this.source=t,this.context=e;for(let s=0,n=o.length;s<n;++s)o[s].bind(t,e)}}unbind(){if(this.source===null)return;let t=this.behaviors,e=this.source;for(let o=0,s=t.length;o<s;++o)t[o].unbind(e);this.source=null}static disposeContiguousBatch(t){if(t.length!==0){_s.setStartBefore(t[0].firstChild),_s.setEndAfter(t[t.length-1].lastChild),_s.deleteContents();for(let e=0,o=t.length;e<o;++e){let s=t[e],n=s.behaviors,r=s.source;for(let a=0,d=n.length;a<d;++a)n[a].unbind(r)}}}},zo=class{constructor(t,e){this.behaviorCount=0,this.hasHostBehaviors=!1,this.fragment=null,this.targetOffset=0,this.viewBehaviorFactories=null,this.hostBehaviorFactories=null,this.html=t,this.directives=e}create(t){if(this.fragment===null){let u,p=this.html;if(typeof p=="string"){u=document.createElement("template"),u.innerHTML=D.createHTML(p);let v=u.content.firstElementChild;v!==null&&v.tagName==="TEMPLATE"&&(u=v)}else u=p;let f=Bd(u,this.directives);this.fragment=f.fragment,this.viewBehaviorFactories=f.viewBehaviorFactories,this.hostBehaviorFactories=f.hostBehaviorFactories,this.targetOffset=f.targetOffset,this.behaviorCount=this.viewBehaviorFactories.length+this.hostBehaviorFactories.length,this.hasHostBehaviors=this.hostBehaviorFactories.length>0}let e=this.fragment.cloneNode(!0),o=this.viewBehaviorFactories,s=new Array(this.behaviorCount),n=D.createTemplateWalker(e),r=0,a=this.targetOffset,d=n.nextNode();for(let u=o.length;r<u;++r){let p=o[r],f=p.targetIndex;for(;d!==null;)if(a===f){s[r]=p.createBehavior(d);break}else d=n.nextNode(),a++}if(this.hasHostBehaviors){let u=this.hostBehaviorFactories;for(let p=0,f=u.length;p<f;++p,++r)s[r]=u[p].createBehavior(t)}return new Vo(e,s)}render(t,e,o){typeof e=="string"&&(e=document.getElementById(e)),o===void 0&&(o=e);let s=this.create(o);return s.bind(t,Pi),s.appendTo(e),s}},_d=/([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;function y(i,...t){let e=[],o="";for(let s=0,n=i.length-1;s<n;++s){let r=i[s],a=t[s];if(o+=r,a instanceof zo){let d=a;a=()=>d}if(typeof a=="function"&&(a=new ji(a)),a instanceof Lo){let d=_d.exec(r);d!==null&&(a.targetName=d[2])}a instanceof ni?(o+=a.createPlaceholder(e.length),e.push(a)):o+=a}return o+=i[i.length-1],new zo(o,e)}var dt=class{constructor(){this.targets=new WeakSet}addStylesTo(t){this.targets.add(t)}removeStylesFrom(t){this.targets.delete(t)}isAttachedTo(t){return this.targets.has(t)}withBehaviors(...t){return this.behaviors=this.behaviors===null?t:this.behaviors.concat(t),this}};dt.create=(()=>{if(D.supportsAdoptedStyleSheets){let i=new Map;return t=>new ln(t,i)}return i=>new cn(i)})();function $r(i){return i.map(t=>t instanceof dt?$r(t.styles):[t]).reduce((t,e)=>t.concat(e),[])}function sl(i){return i.map(t=>t instanceof dt?t.behaviors:null).reduce((t,e)=>e===null?t:(t===null&&(t=[]),t.concat(e)),null)}var nl=Symbol("prependToAdoptedStyleSheets");function rl(i){let t=[],e=[];return i.forEach(o=>(o[nl]?t:e).push(o)),{prepend:t,append:e}}var al=(i,t)=>{let{prepend:e,append:o}=rl(t);i.adoptedStyleSheets=[...e,...i.adoptedStyleSheets,...o]},ll=(i,t)=>{i.adoptedStyleSheets=i.adoptedStyleSheets.filter(e=>t.indexOf(e)===-1)};if(D.supportsAdoptedStyleSheets)try{document.adoptedStyleSheets.push(),document.adoptedStyleSheets.splice(),al=(i,t)=>{let{prepend:e,append:o}=rl(t);i.adoptedStyleSheets.splice(0,0,...e),i.adoptedStyleSheets.push(...o)},ll=(i,t)=>{for(let e of t){let o=i.adoptedStyleSheets.indexOf(e);o!==-1&&i.adoptedStyleSheets.splice(o,1)}}}catch{}var ln=class extends dt{constructor(t,e){super(),this.styles=t,this.styleSheetCache=e,this._styleSheets=void 0,this.behaviors=sl(t)}get styleSheets(){if(this._styleSheets===void 0){let t=this.styles,e=this.styleSheetCache;this._styleSheets=$r(t).map(o=>{if(o instanceof CSSStyleSheet)return o;let s=e.get(o);return s===void 0&&(s=new CSSStyleSheet,s.replaceSync(o),e.set(o,s)),s})}return this._styleSheets}addStylesTo(t){al(t,this.styleSheets),super.addStylesTo(t)}removeStylesFrom(t){ll(t,this.styleSheets),super.removeStylesFrom(t)}},jd=0;function Ud(){return`fast-style-class-${++jd}`}var cn=class extends dt{constructor(t){super(),this.styles=t,this.behaviors=null,this.behaviors=sl(t),this.styleSheets=$r(t),this.styleClass=Ud()}addStylesTo(t){let e=this.styleSheets,o=this.styleClass;t=this.normalizeTarget(t);for(let s=0;s<e.length;s++){let n=document.createElement("style");n.innerHTML=e[s],n.className=o,t.append(n)}super.addStylesTo(t)}removeStylesFrom(t){t=this.normalizeTarget(t);let e=t.querySelectorAll(`.${this.styleClass}`);for(let o=0,s=e.length;o<s;++o)t.removeChild(e[o]);super.removeStylesFrom(t)}isAttachedTo(t){return super.isAttachedTo(this.normalizeTarget(t))}normalizeTarget(t){return t===document?document.body:t}},Ho=Object.freeze({locate:tl()}),io={toView(i){return i?"true":"false"},fromView(i){return!(i==null||i==="false"||i===!1||i===0)}},k={toView(i){if(i==null)return null;let t=i*1;return isNaN(t)?null:t.toString()},fromView(i){if(i==null)return null;let t=i*1;return isNaN(t)?null:t}},dn=class i{constructor(t,e,o=e.toLowerCase(),s="reflect",n){this.guards=new Set,this.Owner=t,this.name=e,this.attribute=o,this.mode=s,this.converter=n,this.fieldName=`_${e}`,this.callbackName=`${e}Changed`,this.hasCallback=this.callbackName in t.prototype,s==="boolean"&&n===void 0&&(this.converter=io)}setValue(t,e){let o=t[this.fieldName],s=this.converter;s!==void 0&&(e=s.fromView(e)),o!==e&&(t[this.fieldName]=e,this.tryReflectToAttribute(t),this.hasCallback&&t[this.callbackName](o,e),t.$fastController.notify(this.name))}getValue(t){return S.track(t,this.name),t[this.fieldName]}onAttributeChangedCallback(t,e){this.guards.has(t)||(this.guards.add(t),this.setValue(t,e),this.guards.delete(t))}tryReflectToAttribute(t){let e=this.mode,o=this.guards;o.has(t)||e==="fromView"||D.queueUpdate(()=>{o.add(t);let s=t[this.fieldName];switch(e){case"reflect":let n=this.converter;D.setAttribute(t,this.attribute,n!==void 0?n.toView(s):s);break;case"boolean":D.setBooleanAttribute(t,this.attribute,s);break}o.delete(t)})}static collect(t,...e){let o=[];e.push(Ho.locate(t));for(let s=0,n=e.length;s<n;++s){let r=e[s];if(r!==void 0)for(let a=0,d=r.length;a<d;++a){let u=r[a];typeof u=="string"?o.push(new i(t,u)):o.push(new i(t,u.property,u.attribute,u.mode,u.converter))}}return o}};function c(i,t){let e;function o(s,n){arguments.length>1&&(e.property=n),Ho.locate(s.constructor).push(e)}if(arguments.length>1){e={},o(i,t);return}return e=i===void 0?{}:i,o}var na={mode:"open"},ra={},hn=Bi.getById(4,()=>{let i=new Map;return Object.freeze({register(t){return i.has(t.type)?!1:(i.set(t.type,t),!0)},getByType(t){return i.get(t)}})}),ri=class{constructor(t,e=t.definition){typeof e=="string"&&(e={name:e}),this.type=t,this.name=e.name,this.template=e.template;let o=dn.collect(t,e.attributes),s=new Array(o.length),n={},r={};for(let a=0,d=o.length;a<d;++a){let u=o[a];s[a]=u.attribute,n[u.name]=u,r[u.attribute]=u}this.attributes=o,this.observedAttributes=s,this.propertyLookup=n,this.attributeLookup=r,this.shadowOptions=e.shadowOptions===void 0?na:e.shadowOptions===null?void 0:Object.assign(Object.assign({},na),e.shadowOptions),this.elementOptions=e.elementOptions===void 0?ra:Object.assign(Object.assign({},ra),e.elementOptions),this.styles=e.styles===void 0?void 0:Array.isArray(e.styles)?dt.create(e.styles):e.styles instanceof dt?e.styles:dt.create([e.styles])}get isDefined(){return!!hn.getByType(this.type)}define(t=customElements){let e=this.type;if(hn.register(this)){let o=this.attributes,s=e.prototype;for(let n=0,r=o.length;n<r;++n)S.defineProperty(s,o[n]);Reflect.defineProperty(e,"observedAttributes",{value:this.observedAttributes,enumerable:!0})}return t.get(this.name)||t.define(this.name,e,this.elementOptions),this}};ri.forType=hn.getByType;var cl=new WeakMap,qd={bubbles:!0,composed:!0,cancelable:!0};function js(i){return i.shadowRoot||cl.get(i)||null}var un=class i extends Ao{constructor(t,e){super(t),this.boundObservables=null,this.behaviors=null,this.needsInitialization=!0,this._template=null,this._styles=null,this._isConnected=!1,this.$fastController=this,this.view=null,this.element=t,this.definition=e;let o=e.shadowOptions;if(o!==void 0){let n=t.attachShadow(o);o.mode==="closed"&&cl.set(t,n)}let s=S.getAccessors(t);if(s.length>0){let n=this.boundObservables=Object.create(null);for(let r=0,a=s.length;r<a;++r){let d=s[r].name,u=t[d];u!==void 0&&(delete t[d],n[d]=u)}}}get isConnected(){return S.track(this,"isConnected"),this._isConnected}setIsConnected(t){this._isConnected=t,S.notify(this,"isConnected")}get template(){return this._template}set template(t){this._template!==t&&(this._template=t,this.needsInitialization||this.renderTemplate(t))}get styles(){return this._styles}set styles(t){this._styles!==t&&(this._styles!==null&&this.removeStyles(this._styles),this._styles=t,!this.needsInitialization&&t!==null&&this.addStyles(t))}addStyles(t){let e=js(this.element)||this.element.getRootNode();if(t instanceof HTMLStyleElement)e.append(t);else if(!t.isAttachedTo(e)){let o=t.behaviors;t.addStylesTo(e),o!==null&&this.addBehaviors(o)}}removeStyles(t){let e=js(this.element)||this.element.getRootNode();if(t instanceof HTMLStyleElement)e.removeChild(t);else if(t.isAttachedTo(e)){let o=t.behaviors;t.removeStylesFrom(e),o!==null&&this.removeBehaviors(o)}}addBehaviors(t){let e=this.behaviors||(this.behaviors=new Map),o=t.length,s=[];for(let n=0;n<o;++n){let r=t[n];e.has(r)?e.set(r,e.get(r)+1):(e.set(r,1),s.push(r))}if(this._isConnected){let n=this.element;for(let r=0;r<s.length;++r)s[r].bind(n,Pi)}}removeBehaviors(t,e=!1){let o=this.behaviors;if(o===null)return;let s=t.length,n=[];for(let r=0;r<s;++r){let a=t[r];if(o.has(a)){let d=o.get(a)-1;d===0||e?o.delete(a)&&n.push(a):o.set(a,d)}}if(this._isConnected){let r=this.element;for(let a=0;a<n.length;++a)n[a].unbind(r)}}onConnectedCallback(){if(this._isConnected)return;let t=this.element;this.needsInitialization?this.finishInitialization():this.view!==null&&this.view.bind(t,Pi);let e=this.behaviors;if(e!==null)for(let[o]of e)o.bind(t,Pi);this.setIsConnected(!0)}onDisconnectedCallback(){if(!this._isConnected)return;this.setIsConnected(!1);let t=this.view;t!==null&&t.unbind();let e=this.behaviors;if(e!==null){let o=this.element;for(let[s]of e)s.unbind(o)}}onAttributeChangedCallback(t,e,o){let s=this.definition.attributeLookup[t];s!==void 0&&s.onAttributeChangedCallback(this.element,o)}emit(t,e,o){return this._isConnected?this.element.dispatchEvent(new CustomEvent(t,Object.assign(Object.assign({detail:e},qd),o))):!1}finishInitialization(){let t=this.element,e=this.boundObservables;if(e!==null){let s=Object.keys(e);for(let n=0,r=s.length;n<r;++n){let a=s[n];t[a]=e[a]}this.boundObservables=null}let o=this.definition;this._template===null&&(this.element.resolveTemplate?this._template=this.element.resolveTemplate():o.template&&(this._template=o.template||null)),this._template!==null&&this.renderTemplate(this._template),this._styles===null&&(this.element.resolveStyles?this._styles=this.element.resolveStyles():o.styles&&(this._styles=o.styles||null)),this._styles!==null&&this.addStyles(this._styles),this.needsInitialization=!1}renderTemplate(t){let e=this.element,o=js(e)||e;this.view!==null?(this.view.dispose(),this.view=null):this.needsInitialization||D.removeChildNodes(o),t&&(this.view=t.render(e,o,e))}static forCustomElement(t){let e=t.$fastController;if(e!==void 0)return e;let o=ri.forType(t.constructor);if(o===void 0)throw new Error("Missing FASTElement definition.");return t.$fastController=new i(t,o)}};function aa(i){return class extends i{constructor(){super(),un.forCustomElement(this)}$emit(t,e,o){return this.$fastController.emit(t,e,o)}connectedCallback(){this.$fastController.onConnectedCallback()}disconnectedCallback(){this.$fastController.onDisconnectedCallback()}attributeChangedCallback(t,e,o){this.$fastController.onAttributeChangedCallback(t,e,o)}}}var ds=Object.assign(aa(HTMLElement),{from(i){return aa(i)},define(i,t){return new ri(i,t).define().type}}),Ui=class{createCSS(){return""}createBehavior(){}};function dl(i,t){let e=[],o="",s=[];for(let n=0,r=i.length-1;n<r;++n){o+=i[n];let a=t[n];if(a instanceof Ui){let d=a.createBehavior();a=a.createCSS(),d&&s.push(d)}a instanceof dt||a instanceof CSSStyleSheet?(o.trim()!==""&&(e.push(o),o=""),e.push(a)):o+=a}return o+=i[i.length-1],o.trim()!==""&&e.push(o),{styles:e,behaviors:s}}function b(i,...t){let{styles:e,behaviors:o}=dl(i,t),s=dt.create(e);return o.length&&s.withBehaviors(...o),s}var pn=class extends Ui{constructor(t,e){super(),this.behaviors=e,this.css="";let o=t.reduce((s,n)=>(typeof n=="string"?this.css+=n:s.push(n),s),[]);o.length&&(this.styles=dt.create(o))}createBehavior(){return this}createCSS(){return this.css}bind(t){this.styles&&t.$fastController.addStyles(this.styles),this.behaviors.length&&t.$fastController.addBehaviors(this.behaviors)}unbind(t){this.styles&&t.$fastController.removeStyles(this.styles),this.behaviors.length&&t.$fastController.removeBehaviors(this.behaviors)}};function Rt(i,...t){let{styles:e,behaviors:o}=dl(i,t);return new pn(e,o)}function Ut(i,t,e){return{index:i,removed:t,addedCount:e}}var hl=0,ul=1,fn=2,gn=3;function Gd(i,t,e,o,s,n){let r=n-s+1,a=e-t+1,d=new Array(r),u,p;for(let f=0;f<r;++f)d[f]=new Array(a),d[f][0]=f;for(let f=0;f<a;++f)d[0][f]=f;for(let f=1;f<r;++f)for(let v=1;v<a;++v)i[t+v-1]===o[s+f-1]?d[f][v]=d[f-1][v-1]:(u=d[f-1][v]+1,p=d[f][v-1]+1,d[f][v]=u<p?u:p);return d}function Wd(i){let t=i.length-1,e=i[0].length-1,o=i[t][e],s=[];for(;t>0||e>0;){if(t===0){s.push(fn),e--;continue}if(e===0){s.push(gn),t--;continue}let n=i[t-1][e-1],r=i[t-1][e],a=i[t][e-1],d;r<a?d=r<n?r:n:d=a<n?a:n,d===n?(n===o?s.push(hl):(s.push(ul),o=n),t--,e--):d===r?(s.push(gn),t--,o=r):(s.push(fn),e--,o=a)}return s.reverse(),s}function Xd(i,t,e){for(let o=0;o<e;++o)if(i[o]!==t[o])return o;return e}function Yd(i,t,e){let o=i.length,s=t.length,n=0;for(;n<e&&i[--o]===t[--s];)n++;return n}function Qd(i,t,e,o){return t<e||o<i?-1:t===e||o===i?0:i<e?t<o?t-e:o-e:o<t?o-i:t-i}function pl(i,t,e,o,s,n){let r=0,a=0,d=Math.min(e-t,n-s);if(t===0&&s===0&&(r=Xd(i,o,d)),e===i.length&&n===o.length&&(a=Yd(i,o,d-r)),t+=r,s+=r,e-=a,n-=a,e-t===0&&n-s===0)return Ve;if(t===e){let A=Ut(t,[],0);for(;s<n;)A.removed.push(o[s++]);return[A]}else if(s===n)return[Ut(t,[],e-t)];let u=Wd(Gd(i,t,e,o,s,n)),p=[],f,v=t,T=s;for(let A=0;A<u.length;++A)switch(u[A]){case hl:f!==void 0&&(p.push(f),f=void 0),v++,T++;break;case ul:f===void 0&&(f=Ut(v,[],0)),f.addedCount++,v++,f.removed.push(o[T]),T++;break;case fn:f===void 0&&(f=Ut(v,[],0)),f.addedCount++,v++;break;case gn:f===void 0&&(f=Ut(v,[],0)),f.removed.push(o[T]),T++;break}return f!==void 0&&p.push(f),p}var la=Array.prototype.push;function Zd(i,t,e,o){let s=Ut(t,e,o),n=!1,r=0;for(let a=0;a<i.length;a++){let d=i[a];if(d.index+=r,n)continue;let u=Qd(s.index,s.index+s.removed.length,d.index,d.index+d.addedCount);if(u>=0){i.splice(a,1),a--,r-=d.addedCount-d.removed.length,s.addedCount+=d.addedCount-u;let p=s.removed.length+d.removed.length-u;if(!s.addedCount&&!p)n=!0;else{let f=d.removed;if(s.index<d.index){let v=s.removed.slice(0,d.index-s.index);la.apply(v,f),f=v}if(s.index+s.removed.length>d.index+d.addedCount){let v=s.removed.slice(d.index+d.addedCount-s.index);la.apply(f,v)}s.removed=f,d.index<s.index&&(s.index=d.index)}}else if(s.index<d.index){n=!0,i.splice(a,0,s),a++;let p=s.addedCount-s.removed.length;d.index+=p,r+=p}}n||i.push(s)}function Jd(i){let t=[];for(let e=0,o=i.length;e<o;e++){let s=i[e];Zd(t,s.index,s.removed,s.addedCount)}return t}function Kd(i,t){let e=[],o=Jd(t);for(let s=0,n=o.length;s<n;++s){let r=o[s];if(r.addedCount===1&&r.removed.length===1){r.removed[0]!==i[r.index]&&e.push(r);continue}e=e.concat(pl(i,r.index,r.index+r.addedCount,r.removed,0,r.removed.length))}return e}var ca=!1;function Us(i,t){let e=i.index,o=t.length;return e>o?e=o-i.addedCount:e<0&&(e=o+i.removed.length+e-i.addedCount),e<0&&(e=0),i.index=e,i}var mn=class extends si{constructor(t){super(t),this.oldCollection=void 0,this.splices=void 0,this.needsQueue=!0,this.call=this.flush,Reflect.defineProperty(t,"$fastController",{value:this,enumerable:!1})}subscribe(t){this.flush(),super.subscribe(t)}addSplice(t){this.splices===void 0?this.splices=[t]:this.splices.push(t),this.needsQueue&&(this.needsQueue=!1,D.queueUpdate(this))}reset(t){this.oldCollection=t,this.needsQueue&&(this.needsQueue=!1,D.queueUpdate(this))}flush(){let t=this.splices,e=this.oldCollection;if(t===void 0&&e===void 0)return;this.needsQueue=!0,this.splices=void 0,this.oldCollection=void 0;let o=e===void 0?Kd(this.source,t):pl(this.source,0,this.source.length,e,0,e.length);this.notify(o)}};function th(){if(ca)return;ca=!0,S.setArrayObserverFactory(d=>new mn(d));let i=Array.prototype;if(i.$fastPatch)return;Reflect.defineProperty(i,"$fastPatch",{value:1,enumerable:!1});let t=i.pop,e=i.push,o=i.reverse,s=i.shift,n=i.sort,r=i.splice,a=i.unshift;i.pop=function(){let d=this.length>0,u=t.apply(this,arguments),p=this.$fastController;return p!==void 0&&d&&p.addSplice(Ut(this.length,[u],0)),u},i.push=function(){let d=e.apply(this,arguments),u=this.$fastController;return u!==void 0&&u.addSplice(Us(Ut(this.length-arguments.length,[],arguments.length),this)),d},i.reverse=function(){let d,u=this.$fastController;u!==void 0&&(u.flush(),d=this.slice());let p=o.apply(this,arguments);return u!==void 0&&u.reset(d),p},i.shift=function(){let d=this.length>0,u=s.apply(this,arguments),p=this.$fastController;return p!==void 0&&d&&p.addSplice(Ut(0,[u],0)),u},i.sort=function(){let d,u=this.$fastController;u!==void 0&&(u.flush(),d=this.slice());let p=n.apply(this,arguments);return u!==void 0&&u.reset(d),p},i.splice=function(){let d=r.apply(this,arguments),u=this.$fastController;return u!==void 0&&u.addSplice(Us(Ut(+arguments[0],d,arguments.length>2?arguments.length-2:0),this)),d},i.unshift=function(){let d=a.apply(this,arguments),u=this.$fastController;return u!==void 0&&u.addSplice(Us(Ut(0,[],arguments.length),this)),d}}var bn=class{constructor(t,e){this.target=t,this.propertyName=e}bind(t){t[this.propertyName]=this.target}unbind(){}};function P(i){return new _i("fast-ref",bn,i)}var fl=i=>typeof i=="function",eh=()=>null;function da(i){return i===void 0?eh:fl(i)?i:()=>i}function J(i,t,e){let o=fl(i)?i:()=>i,s=da(t),n=da(e);return(r,a)=>o(r,a)?s(r,a):n(r,a)}var ha=Object.freeze({positioning:!1,recycle:!0});function ih(i,t,e,o){i.bind(t[e],o)}function oh(i,t,e,o){let s=Object.create(o);s.index=e,s.length=t.length,i.bind(t[e],s)}var vn=class{constructor(t,e,o,s,n,r){this.location=t,this.itemsBinding=e,this.templateBinding=s,this.options=r,this.source=null,this.views=[],this.items=null,this.itemsObserver=null,this.originalContext=void 0,this.childContext=void 0,this.bindView=ih,this.itemsBindingObserver=S.binding(e,this,o),this.templateBindingObserver=S.binding(s,this,n),r.positioning&&(this.bindView=oh)}bind(t,e){this.source=t,this.originalContext=e,this.childContext=Object.create(e),this.childContext.parent=t,this.childContext.parentContext=this.originalContext,this.items=this.itemsBindingObserver.observe(t,this.originalContext),this.template=this.templateBindingObserver.observe(t,this.originalContext),this.observeItems(!0),this.refreshAllViews()}unbind(){this.source=null,this.items=null,this.itemsObserver!==null&&this.itemsObserver.unsubscribe(this),this.unbindAllViews(),this.itemsBindingObserver.disconnect(),this.templateBindingObserver.disconnect()}handleChange(t,e){t===this.itemsBinding?(this.items=this.itemsBindingObserver.observe(this.source,this.originalContext),this.observeItems(),this.refreshAllViews()):t===this.templateBinding?(this.template=this.templateBindingObserver.observe(this.source,this.originalContext),this.refreshAllViews(!0)):this.updateViews(e)}observeItems(t=!1){if(!this.items){this.items=Ve;return}let e=this.itemsObserver,o=this.itemsObserver=S.getNotifier(this.items),s=e!==o;s&&e!==null&&e.unsubscribe(this),(s||t)&&o.subscribe(this)}updateViews(t){let e=this.childContext,o=this.views,s=this.bindView,n=this.items,r=this.template,a=this.options.recycle,d=[],u=0,p=0;for(let f=0,v=t.length;f<v;++f){let T=t[f],A=T.removed,N=0,U=T.index,Ot=U+T.addedCount,lt=o.splice(T.index,A.length),Bt=p=d.length+lt.length;for(;U<Ot;++U){let be=o[U],Re=be?be.firstChild:this.location,_t;a&&p>0?(N<=Bt&&lt.length>0?(_t=lt[N],N++):(_t=d[u],u++),p--):_t=r.create(),o.splice(U,0,_t),s(_t,n,U,e),_t.insertBefore(Re)}lt[N]&&d.push(...lt.slice(N))}for(let f=u,v=d.length;f<v;++f)d[f].dispose();if(this.options.positioning)for(let f=0,v=o.length;f<v;++f){let T=o[f].context;T.length=v,T.index=f}}refreshAllViews(t=!1){let e=this.items,o=this.childContext,s=this.template,n=this.location,r=this.bindView,a=e.length,d=this.views,u=d.length;if((a===0||t||!this.options.recycle)&&(Vo.disposeContiguousBatch(d),u=0),u===0){this.views=d=new Array(a);for(let p=0;p<a;++p){let f=s.create();r(f,e,p,o),d[p]=f,f.insertBefore(n)}}else{let p=0;for(;p<a;++p)if(p<u){let v=d[p];r(v,e,p,o)}else{let v=s.create();r(v,e,p,o),d.push(v),v.insertBefore(n)}let f=d.splice(p,u-p);for(p=0,a=f.length;p<a;++p)f[p].dispose()}}unbindAllViews(){let t=this.views;for(let e=0,o=t.length;e<o;++e)t[e].unbind()}},qi=class extends ni{constructor(t,e,o){super(),this.itemsBinding=t,this.templateBinding=e,this.options=o,this.createPlaceholder=D.createBlockPlaceholder,th(),this.isItemsBindingVolatile=S.isVolatileBinding(t),this.isTemplateBindingVolatile=S.isVolatileBinding(e)}createBehavior(t){return new vn(t,this.itemsBinding,this.isItemsBindingVolatile,this.templateBinding,this.isTemplateBindingVolatile,this.options)}};function ti(i,t,e=ha){let o=typeof t=="function"?t:()=>t;return new qi(i,o,Object.assign(Object.assign({},ha),e))}function ce(i){return i?function(t,e,o){return t.nodeType===1&&t.matches(i)}:function(t,e,o){return t.nodeType===1}}var Po=class{constructor(t,e){this.target=t,this.options=e,this.source=null}bind(t){let e=this.options.property;this.shouldUpdate=S.getAccessors(t).some(o=>o.name===e),this.source=t,this.updateTarget(this.computeNodes()),this.shouldUpdate&&this.observe()}unbind(){this.updateTarget(Ve),this.source=null,this.shouldUpdate&&this.disconnect()}handleEvent(){this.updateTarget(this.computeNodes())}computeNodes(){let t=this.getNodes();return this.options.filter!==void 0&&(t=t.filter(this.options.filter)),t}updateTarget(t){this.source[this.options.property]=t}},yn=class extends Po{constructor(t,e){super(t,e)}observe(){this.target.addEventListener("slotchange",this)}disconnect(){this.target.removeEventListener("slotchange",this)}getNodes(){return this.target.assignedNodes(this.options)}};function X(i){return typeof i=="string"&&(i={property:i}),new _i("fast-slotted",yn,i)}var xn=class extends Po{constructor(t,e){super(t,e),this.observer=null,e.childList=!0}observe(){this.observer===null&&(this.observer=new MutationObserver(this.handleEvent.bind(this))),this.observer.observe(this.target,this.options)}disconnect(){this.observer.disconnect()}getNodes(){return"subtree"in this.options?Array.from(this.target.querySelectorAll(this.options.selector)):Array.from(this.target.childNodes)}};function hs(i){return typeof i=="string"&&(i={property:i}),new _i("fast-children",xn,i)}var pt=class{handleStartContentChange(){this.startContainer.classList.toggle("start",this.start.assignedNodes().length>0)}handleEndContentChange(){this.endContainer.classList.toggle("end",this.end.assignedNodes().length>0)}},kt=(i,t)=>y`<span part="end" ${P("endContainer")} class=${e=>t.end?"end":void 0}><slot name="end" ${P("end")} @slotchange="${e=>e.handleEndContentChange()}">${t.end||""}</slot></span>`,Ct=(i,t)=>y`<span part="start" ${P("startContainer")} class="${e=>t.start?"start":void 0}"><slot name="start" ${P("start")} @slotchange="${e=>e.handleStartContentChange()}">${t.start||""}</slot></span>`,sh=y`<span part="end" ${P("endContainer")}><slot name="end" ${P("end")} @slotchange="${i=>i.handleEndContentChange()}"></slot></span>`,nh=y`<span part="start" ${P("startContainer")}><slot name="start" ${P("start")} @slotchange="${i=>i.handleStartContentChange()}"></slot></span>`,rh=(i,t)=>y`<template class="${e=>e.expanded?"expanded":""}"><div class="heading" part="heading" role="heading" aria-level="${e=>e.headinglevel}"><button class="button" part="button" ${P("expandbutton")} aria-expanded="${e=>e.expanded}" aria-controls="${e=>e.id}-panel" id="${e=>e.id}" @click="${(e,o)=>e.clickHandler(o.event)}"><span class="heading-content" part="heading-content"><slot name="heading"></slot></span></button>${Ct(i,t)} ${kt(i,t)}<span class="icon" part="icon" aria-hidden="true"><slot name="expanded-icon" part="expanded-icon">${t.expandedIcon||""}</slot><slot name="collapsed-icon" part="collapsed-icon">${t.collapsedIcon||""}</slot><span></div><div class="region" part="region" id="${e=>e.id}-panel" role="region" aria-labelledby="${e=>e.id}"><slot></slot></div></template>`;function l(i,t,e,o){var s=arguments.length,n=s<3?t:o===null?o=Object.getOwnPropertyDescriptor(t,e):o,r;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")n=Reflect.decorate(i,t,e,o);else for(var a=i.length-1;a>=0;a--)(r=i[a])&&(n=(s<3?r(n):s>3?r(t,e,n):r(t,e))||n);return s>3&&n&&Object.defineProperty(t,e,n),n}var qs=new Map;"metadata"in Reflect||(Reflect.metadata=function(i,t){return function(e){Reflect.defineMetadata(i,t,e)}},Reflect.defineMetadata=function(i,t,e){let o=qs.get(e);o===void 0&&qs.set(e,o=new Map),o.set(i,t)},Reflect.getOwnMetadata=function(i,t){let e=qs.get(t);if(e!==void 0)return e.get(i)});var wn=class{constructor(t,e){this.container=t,this.key=e}instance(t){return this.registerResolver(0,t)}singleton(t){return this.registerResolver(1,t)}transient(t){return this.registerResolver(2,t)}callback(t){return this.registerResolver(3,t)}cachedCallback(t){return this.registerResolver(3,ml(t))}aliasTo(t){return this.registerResolver(5,t)}registerResolver(t,e){let{container:o,key:s}=this;return this.container=this.key=void 0,o.registerResolver(s,new It(s,t,e))}};function Oi(i){let t=i.slice(),e=Object.keys(i),o=e.length,s;for(let n=0;n<o;++n)s=e[n],bl(s)||(t[s]=i[s]);return t}var ah=Object.freeze({none(i){throw Error(`${i.toString()} not registered, did you forget to add @singleton()?`)},singleton(i){return new It(i,1,i)},transient(i){return new It(i,2,i)}}),Gs=Object.freeze({default:Object.freeze({parentLocator:()=>null,responsibleForOwnerRequests:!1,defaultResolver:ah.singleton})}),ua=new Map;function pa(i){return t=>Reflect.getOwnMetadata(i,t)}var fa=null,Z=Object.freeze({createContainer(i){return new Mi(null,Object.assign({},Gs.default,i))},findResponsibleContainer(i){let t=i.$$container$$;return t&&t.responsibleForOwnerRequests?t:Z.findParentContainer(i)},findParentContainer(i){let t=new CustomEvent(gl,{bubbles:!0,composed:!0,cancelable:!0,detail:{container:void 0}});return i.dispatchEvent(t),t.detail.container||Z.getOrCreateDOMContainer()},getOrCreateDOMContainer(i,t){return i?i.$$container$$||new Mi(i,Object.assign({},Gs.default,t,{parentLocator:Z.findParentContainer})):fa||(fa=new Mi(null,Object.assign({},Gs.default,t,{parentLocator:()=>null})))},getDesignParamtypes:pa("design:paramtypes"),getAnnotationParamtypes:pa("di:paramtypes"),getOrCreateAnnotationParamTypes(i){let t=this.getAnnotationParamtypes(i);return t===void 0&&Reflect.defineMetadata("di:paramtypes",t=[],i),t},getDependencies(i){let t=ua.get(i);if(t===void 0){let e=i.inject;if(e===void 0){let o=Z.getDesignParamtypes(i),s=Z.getAnnotationParamtypes(i);if(o===void 0)if(s===void 0){let n=Object.getPrototypeOf(i);typeof n=="function"&&n!==Function.prototype?t=Oi(Z.getDependencies(n)):t=[]}else t=Oi(s);else if(s===void 0)t=Oi(o);else{t=Oi(o);let n=s.length,r;for(let u=0;u<n;++u)r=s[u],r!==void 0&&(t[u]=r);let a=Object.keys(s);n=a.length;let d;for(let u=0;u<n;++u)d=a[u],bl(d)||(t[d]=s[d])}}else t=Oi(e);ua.set(i,t)}return t},defineProperty(i,t,e,o=!1){let s=`$di_${t}`;Reflect.defineProperty(i,t,{get:function(){let n=this[s];if(n===void 0&&(n=(this instanceof HTMLElement?Z.findResponsibleContainer(this):Z.getOrCreateDOMContainer()).get(e),this[s]=n,o&&this instanceof ds)){let a=this.$fastController,d=()=>{let p=Z.findResponsibleContainer(this).get(e),f=this[s];p!==f&&(this[s]=n,a.notify(t))};a.subscribe({handleChange:d},"isConnected")}return n}})},createInterface(i,t){let e=typeof i=="function"?i:t,o=typeof i=="string"?i:i&&"friendlyName"in i&&i.friendlyName||va,s=typeof i=="string"?!1:i&&"respectConnection"in i&&i.respectConnection||!1,n=function(r,a,d){if(r==null||new.target!==void 0)throw new Error(`No registration for interface: '${n.friendlyName}'`);if(a)Z.defineProperty(r,a,n,s);else{let u=Z.getOrCreateAnnotationParamTypes(r);u[d]=n}};return n.$isInterface=!0,n.friendlyName=o??"(anonymous)",e!=null&&(n.register=function(r,a){return e(new wn(r,a??n))}),n.toString=function(){return`InterfaceSymbol<${n.friendlyName}>`},n},inject(...i){return function(t,e,o){if(typeof o=="number"){let s=Z.getOrCreateAnnotationParamTypes(t),n=i[0];n!==void 0&&(s[o]=n)}else if(e)Z.defineProperty(t,e,i[0]);else{let s=o?Z.getOrCreateAnnotationParamTypes(o.value):Z.getOrCreateAnnotationParamTypes(t),n;for(let r=0;r<i.length;++r)n=i[r],n!==void 0&&(s[r]=n)}}},transient(i){return i.register=function(e){return Gi.transient(i,i).register(e)},i.registerInRequestor=!1,i},singleton(i,t=ch){return i.register=function(o){return Gi.singleton(i,i).register(o)},i.registerInRequestor=t.scoped,i}}),lh=Z.createInterface("Container");Z.inject;var ch={scoped:!1},It=class{constructor(t,e,o){this.key=t,this.strategy=e,this.state=o,this.resolving=!1}get $isResolver(){return!0}register(t){return t.registerResolver(this.key,this)}resolve(t,e){switch(this.strategy){case 0:return this.state;case 1:{if(this.resolving)throw new Error(`Cyclic dependency found: ${this.state.name}`);return this.resolving=!0,this.state=t.getFactory(this.state).construct(e),this.strategy=0,this.resolving=!1,this.state}case 2:{let o=t.getFactory(this.state);if(o===null)throw new Error(`Resolver for ${String(this.key)} returned a null factory`);return o.construct(e)}case 3:return this.state(t,e,this);case 4:return this.state[0].resolve(t,e);case 5:return e.get(this.state);default:throw new Error(`Invalid resolver strategy specified: ${this.strategy}.`)}}getFactory(t){var e,o,s;switch(this.strategy){case 1:case 2:return t.getFactory(this.state);case 5:return(s=(o=(e=t.getResolver(this.state))===null||e===void 0?void 0:e.getFactory)===null||o===void 0?void 0:o.call(e,t))!==null&&s!==void 0?s:null;default:return null}}};function ga(i){return this.get(i)}function dh(i,t){return t(i)}var $n=class{constructor(t,e){this.Type=t,this.dependencies=e,this.transformers=null}construct(t,e){let o;return e===void 0?o=new this.Type(...this.dependencies.map(ga,t)):o=new this.Type(...this.dependencies.map(ga,t),...e),this.transformers==null?o:this.transformers.reduce(dh,o)}registerTransformer(t){(this.transformers||(this.transformers=[])).push(t)}},hh={$isResolver:!0,resolve(i,t){return t}};function Ro(i){return typeof i.register=="function"}function uh(i){return Ro(i)&&typeof i.registerInRequestor=="boolean"}function ma(i){return uh(i)&&i.registerInRequestor}function ph(i){return i.prototype!==void 0}var fh=new Set(["Array","ArrayBuffer","Boolean","DataView","Date","Error","EvalError","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Number","Object","Promise","RangeError","ReferenceError","RegExp","Set","SharedArrayBuffer","String","SyntaxError","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","URIError","WeakMap","WeakSet"]),gl="__DI_LOCATE_PARENT__",Ws=new Map,Mi=class i{constructor(t,e){this.owner=t,this.config=e,this._parent=void 0,this.registerDepth=0,this.context=null,t!==null&&(t.$$container$$=this),this.resolvers=new Map,this.resolvers.set(lh,hh),t instanceof Node&&t.addEventListener(gl,o=>{o.composedPath()[0]!==this.owner&&(o.detail.container=this,o.stopImmediatePropagation())})}get parent(){return this._parent===void 0&&(this._parent=this.config.parentLocator(this.owner)),this._parent}get depth(){return this.parent===null?0:this.parent.depth+1}get responsibleForOwnerRequests(){return this.config.responsibleForOwnerRequests}registerWithContext(t,...e){return this.context=t,this.register(...e),this.context=null,this}register(...t){if(++this.registerDepth===100)throw new Error("Unable to autoregister dependency");let e,o,s,n,r,a=this.context;for(let d=0,u=t.length;d<u;++d)if(e=t[d],!!ya(e))if(Ro(e))e.register(this,a);else if(ph(e))Gi.singleton(e,e).register(this);else for(o=Object.keys(e),n=0,r=o.length;n<r;++n)s=e[o[n]],ya(s)&&(Ro(s)?s.register(this,a):this.register(s));return--this.registerDepth,this}registerResolver(t,e){po(t);let o=this.resolvers,s=o.get(t);return s==null?o.set(t,e):s instanceof It&&s.strategy===4?s.state.push(e):o.set(t,new It(t,4,[s,e])),e}registerTransformer(t,e){let o=this.getResolver(t);if(o==null)return!1;if(o.getFactory){let s=o.getFactory(this);return s==null?!1:(s.registerTransformer(e),!0)}return!1}getResolver(t,e=!0){if(po(t),t.resolve!==void 0)return t;let o=this,s;for(;o!=null;)if(s=o.resolvers.get(t),s==null){if(o.parent==null){let n=ma(t)?this:o;return e?this.jitRegister(t,n):null}o=o.parent}else return s;return null}has(t,e=!1){return this.resolvers.has(t)?!0:e&&this.parent!=null?this.parent.has(t,!0):!1}get(t){if(po(t),t.$isResolver)return t.resolve(this,this);let e=this,o;for(;e!=null;)if(o=e.resolvers.get(t),o==null){if(e.parent==null){let s=ma(t)?this:e;return o=this.jitRegister(t,s),o.resolve(e,this)}e=e.parent}else return o.resolve(e,this);throw new Error(`Unable to resolve key: ${String(t)}`)}getAll(t,e=!1){po(t);let o=this,s=o,n;if(e){let r=Ve;for(;s!=null;)n=s.resolvers.get(t),n!=null&&(r=r.concat(ba(n,s,o))),s=s.parent;return r}else for(;s!=null;)if(n=s.resolvers.get(t),n==null){if(s=s.parent,s==null)return Ve}else return ba(n,s,o);return Ve}getFactory(t){let e=Ws.get(t);if(e===void 0){if(gh(t))throw new Error(`${t.name} is a native function and therefore cannot be safely constructed by DI. If this is intentional, please use a callback or cachedCallback resolver.`);Ws.set(t,e=new $n(t,Z.getDependencies(t)))}return e}registerFactory(t,e){Ws.set(t,e)}createChild(t){return new i(null,Object.assign({},this.config,t,{parentLocator:()=>this}))}jitRegister(t,e){if(typeof t!="function")throw new Error(`Attempted to jitRegister something that is not a constructor: '${t}'. Did you forget to register this dependency?`);if(fh.has(t.name))throw new Error(`Attempted to jitRegister an intrinsic type: ${t.name}. Did you forget to add @inject(Key)`);if(Ro(t)){let o=t.register(e);if(!(o instanceof Object)||o.resolve==null){let s=e.resolvers.get(t);if(s!=null)return s;throw new Error("A valid resolver was not returned from the static register method")}return o}else{if(t.$isInterface)throw new Error(`Attempted to jitRegister an interface: ${t.friendlyName}`);{let o=this.config.defaultResolver(t,e);return e.resolvers.set(t,o),o}}}},Xs=new WeakMap;function ml(i){return function(t,e,o){if(Xs.has(o))return Xs.get(o);let s=i(t,e,o);return Xs.set(o,s),s}}var Gi=Object.freeze({instance(i,t){return new It(i,0,t)},singleton(i,t){return new It(i,1,t)},transient(i,t){return new It(i,2,t)},callback(i,t){return new It(i,3,t)},cachedCallback(i,t){return new It(i,3,ml(t))},aliasTo(i,t){return new It(t,5,i)}});function po(i){if(i==null)throw new Error("key/value cannot be null or undefined. Are you trying to inject/register something that doesn't exist with DI?")}function ba(i,t,e){if(i instanceof It&&i.strategy===4){let o=i.state,s=o.length,n=new Array(s);for(;s--;)n[s]=o[s].resolve(t,e);return n}return[i.resolve(t,e)]}var va="(anonymous)";function ya(i){return typeof i=="object"&&i!==null||typeof i=="function"}var gh=function(){let i=new WeakMap,t=!1,e="",o=0;return function(s){return t=i.get(s),t===void 0&&(e=s.toString(),o=e.length,t=o>=29&&o<=100&&e.charCodeAt(o-1)===125&&e.charCodeAt(o-2)<=32&&e.charCodeAt(o-3)===93&&e.charCodeAt(o-4)===101&&e.charCodeAt(o-5)===100&&e.charCodeAt(o-6)===111&&e.charCodeAt(o-7)===99&&e.charCodeAt(o-8)===32&&e.charCodeAt(o-9)===101&&e.charCodeAt(o-10)===118&&e.charCodeAt(o-11)===105&&e.charCodeAt(o-12)===116&&e.charCodeAt(o-13)===97&&e.charCodeAt(o-14)===110&&e.charCodeAt(o-15)===88,i.set(s,t)),t}}(),fo={};function bl(i){switch(typeof i){case"number":return i>=0&&(i|0)===i;case"string":{let t=fo[i];if(t!==void 0)return t;let e=i.length;if(e===0)return fo[i]=!1;let o=0;for(let s=0;s<e;++s)if(o=i.charCodeAt(s),s===0&&o===48&&e>1||o<48||o>57)return fo[i]=!1;return fo[i]=!0}default:return!1}}function xa(i){return`${i.toLowerCase()}:presentation`}var go=new Map,vl=Object.freeze({define(i,t,e){let o=xa(i);go.get(o)===void 0?go.set(o,t):go.set(o,!1),e.register(Gi.instance(o,t))},forTag(i,t){let e=xa(i),o=go.get(e);return o===!1?Z.findResponsibleContainer(t).get(e):o||null}}),kn=class{constructor(t,e){this.template=t||null,this.styles=e===void 0?null:Array.isArray(e)?dt.create(e):e instanceof dt?e:dt.create([e])}applyTo(t){let e=t.$fastController;e.template===null&&(e.template=this.template),e.styles===null&&(e.styles=this.styles)}},O=class i extends ds{constructor(){super(...arguments),this._presentation=void 0}get $presentation(){return this._presentation===void 0&&(this._presentation=vl.forTag(this.tagName,this)),this._presentation}templateChanged(){this.template!==void 0&&(this.$fastController.template=this.template)}stylesChanged(){this.styles!==void 0&&(this.$fastController.styles=this.styles)}connectedCallback(){this.$presentation!==null&&this.$presentation.applyTo(this),super.connectedCallback()}static compose(t){return(e={})=>new Cn(this===i?class extends i{}:this,t,e)}};l([m],O.prototype,"template",void 0);l([m],O.prototype,"styles",void 0);function Ai(i,t,e){return typeof i=="function"?i(t,e):i}var Cn=class{constructor(t,e,o){this.type=t,this.elementDefinition=e,this.overrideDefinition=o,this.definition=Object.assign(Object.assign({},this.elementDefinition),this.overrideDefinition)}register(t,e){let o=this.definition,s=this.overrideDefinition,r=`${o.prefix||e.elementPrefix}-${o.baseName}`;e.tryDefineElement({name:r,type:this.type,baseClass:this.elementDefinition.baseClass,callback:a=>{let d=new kn(Ai(o.template,a,o),Ai(o.styles,a,o));a.definePresentation(d);let u=Ai(o.shadowOptions,a,o);a.shadowRootMode&&(u?s.shadowOptions||(u.mode=a.shadowRootMode):u!==null&&(u={mode:a.shadowRootMode})),a.defineElement({elementOptions:Ai(o.elementOptions,a,o),shadowOptions:u,attributes:Ai(o.attributes,a,o)})}})}};function Y(i,...t){let e=Ho.locate(i);t.forEach(o=>{Object.getOwnPropertyNames(o.prototype).forEach(n=>{n!=="constructor"&&Object.defineProperty(i.prototype,n,Object.getOwnPropertyDescriptor(o.prototype,n))}),Ho.locate(o).forEach(n=>e.push(n))})}var de=class extends O{constructor(){super(...arguments),this.headinglevel=2,this.expanded=!1,this.clickHandler=t=>{this.expanded=!this.expanded,this.change()},this.change=()=>{this.$emit("change")}}};l([c({attribute:"heading-level",mode:"fromView",converter:k})],de.prototype,"headinglevel",void 0);l([c({mode:"boolean"})],de.prototype,"expanded",void 0);l([c],de.prototype,"id",void 0);Y(de,pt);var mh=(i,t)=>y`<template><slot ${X({property:"accordionItems",filter:ce()})}></slot><slot name="item" part="item" ${X("accordionItems")}></slot></template>`,it={horizontal:"horizontal",vertical:"vertical"};function bh(i,t){let e=i.length;for(;e--;)if(t(i[e],e,i))return e;return-1}function vh(){return!!(typeof window<"u"&&window.document&&window.document.createElement)}function ai(...i){return i.every(t=>t instanceof HTMLElement)}function yh(i,t){return!i||!t||!ai(i)?void 0:Array.from(i.querySelectorAll(t)).filter(o=>o.offsetParent!==null)}function xh(){let i=document.querySelector('meta[property="csp-nonce"]');return i?i.getAttribute("content"):null}var Ee;function wh(){if(typeof Ee=="boolean")return Ee;if(!vh())return Ee=!1,Ee;let i=document.createElement("style"),t=xh();t!==null&&i.setAttribute("nonce",t),document.head.appendChild(i);try{i.sheet.insertRule("foo:focus-visible {color:inherit}",0),Ee=!0}catch{Ee=!1}finally{document.head.removeChild(i)}return Ee}var wa="focus",$a="focusin",li="focusout",ci="keydown",ka="resize",Ca="scroll",Fa;(function(i){i[i.alt=18]="alt",i[i.arrowDown=40]="arrowDown",i[i.arrowLeft=37]="arrowLeft",i[i.arrowRight=39]="arrowRight",i[i.arrowUp=38]="arrowUp",i[i.back=8]="back",i[i.backSlash=220]="backSlash",i[i.break=19]="break",i[i.capsLock=20]="capsLock",i[i.closeBracket=221]="closeBracket",i[i.colon=186]="colon",i[i.colon2=59]="colon2",i[i.comma=188]="comma",i[i.ctrl=17]="ctrl",i[i.delete=46]="delete",i[i.end=35]="end",i[i.enter=13]="enter",i[i.equals=187]="equals",i[i.equals2=61]="equals2",i[i.equals3=107]="equals3",i[i.escape=27]="escape",i[i.forwardSlash=191]="forwardSlash",i[i.function1=112]="function1",i[i.function10=121]="function10",i[i.function11=122]="function11",i[i.function12=123]="function12",i[i.function2=113]="function2",i[i.function3=114]="function3",i[i.function4=115]="function4",i[i.function5=116]="function5",i[i.function6=117]="function6",i[i.function7=118]="function7",i[i.function8=119]="function8",i[i.function9=120]="function9",i[i.home=36]="home",i[i.insert=45]="insert",i[i.menu=93]="menu",i[i.minus=189]="minus",i[i.minus2=109]="minus2",i[i.numLock=144]="numLock",i[i.numPad0=96]="numPad0",i[i.numPad1=97]="numPad1",i[i.numPad2=98]="numPad2",i[i.numPad3=99]="numPad3",i[i.numPad4=100]="numPad4",i[i.numPad5=101]="numPad5",i[i.numPad6=102]="numPad6",i[i.numPad7=103]="numPad7",i[i.numPad8=104]="numPad8",i[i.numPad9=105]="numPad9",i[i.numPadDivide=111]="numPadDivide",i[i.numPadDot=110]="numPadDot",i[i.numPadMinus=109]="numPadMinus",i[i.numPadMultiply=106]="numPadMultiply",i[i.numPadPlus=107]="numPadPlus",i[i.openBracket=219]="openBracket",i[i.pageDown=34]="pageDown",i[i.pageUp=33]="pageUp",i[i.period=190]="period",i[i.print=44]="print",i[i.quote=222]="quote",i[i.scrollLock=145]="scrollLock",i[i.shift=16]="shift",i[i.space=32]="space",i[i.tab=9]="tab",i[i.tilde=192]="tilde",i[i.windowsLeft=91]="windowsLeft",i[i.windowsOpera=219]="windowsOpera",i[i.windowsRight=92]="windowsRight"})(Fa||(Fa={}));var zt="ArrowDown",we="ArrowLeft",$e="ArrowRight",Ht="ArrowUp",fe="Enter",Si="Escape",ne="Home",re="End",$h="F2",kh="PageDown",Ch="PageUp",qe=" ",us="Tab",Je={ArrowDown:zt,ArrowLeft:we,ArrowRight:$e,ArrowUp:Ht},G;(function(i){i.ltr="ltr",i.rtl="rtl"})(G||(G={}));function Fh(i,t,e){return e<i?t:e>t?i:e}function ps(i,t,e){return Math.min(Math.max(e,i),t)}function mo(i,t,e=0){return[t,e]=[t,e].sort((o,s)=>o-s),t<=i&&i<e}var Ih=0;function Wi(i=""){return`${i}${Ih++}`}var h;(function(i){i.Canvas="Canvas",i.CanvasText="CanvasText",i.LinkText="LinkText",i.VisitedText="VisitedText",i.ActiveText="ActiveText",i.ButtonFace="ButtonFace",i.ButtonText="ButtonText",i.Field="Field",i.FieldText="FieldText",i.Highlight="Highlight",i.HighlightText="HighlightText",i.GrayText="GrayText"})(h||(h={}));var Ia={single:"single",multi:"multi"},Xi=class extends O{constructor(){super(...arguments),this.expandmode=Ia.multi,this.activeItemIndex=0,this.change=()=>{this.$emit("change",this.activeid)},this.setItems=()=>{var t;this.accordionItems.length!==0&&(this.accordionIds=this.getItemIds(),this.accordionItems.forEach((e,o)=>{e instanceof de&&(e.addEventListener("change",this.activeItemChange),this.isSingleExpandMode()&&(this.activeItemIndex!==o?e.expanded=!1:e.expanded=!0));let s=this.accordionIds[o];e.setAttribute("id",typeof s!="string"?`accordion-${o+1}`:s),this.activeid=this.accordionIds[this.activeItemIndex],e.addEventListener("keydown",this.handleItemKeyDown),e.addEventListener("focus",this.handleItemFocus)}),this.isSingleExpandMode()&&((t=this.findExpandedItem())!==null&&t!==void 0?t:this.accordionItems[0]).setAttribute("aria-disabled","true"))},this.removeItemListeners=t=>{t.forEach((e,o)=>{e.removeEventListener("change",this.activeItemChange),e.removeEventListener("keydown",this.handleItemKeyDown),e.removeEventListener("focus",this.handleItemFocus)})},this.activeItemChange=t=>{if(t.defaultPrevented||t.target!==t.currentTarget)return;t.preventDefault();let e=t.target;this.activeid=e.getAttribute("id"),this.isSingleExpandMode()&&(this.resetItems(),e.expanded=!0,e.setAttribute("aria-disabled","true"),this.accordionItems.forEach(o=>{!o.hasAttribute("disabled")&&o.id!==this.activeid&&o.removeAttribute("aria-disabled")})),this.activeItemIndex=Array.from(this.accordionItems).indexOf(e),this.change()},this.handleItemKeyDown=t=>{if(t.target===t.currentTarget)switch(this.accordionIds=this.getItemIds(),t.key){case Ht:t.preventDefault(),this.adjust(-1);break;case zt:t.preventDefault(),this.adjust(1);break;case ne:this.activeItemIndex=0,this.focusItem();break;case re:this.activeItemIndex=this.accordionItems.length-1,this.focusItem();break}},this.handleItemFocus=t=>{if(t.target===t.currentTarget){let e=t.target,o=this.activeItemIndex=Array.from(this.accordionItems).indexOf(e);this.activeItemIndex!==o&&o!==-1&&(this.activeItemIndex=o,this.activeid=this.accordionIds[this.activeItemIndex])}}}accordionItemsChanged(t,e){this.$fastController.isConnected&&(this.removeItemListeners(t),this.setItems())}findExpandedItem(){for(let t=0;t<this.accordionItems.length;t++)if(this.accordionItems[t].getAttribute("expanded")==="true")return this.accordionItems[t];return null}resetItems(){this.accordionItems.forEach((t,e)=>{t.expanded=!1})}getItemIds(){return this.accordionItems.map(t=>t.getAttribute("id"))}isSingleExpandMode(){return this.expandmode===Ia.single}adjust(t){this.activeItemIndex=Fh(0,this.accordionItems.length-1,this.activeItemIndex+t),this.focusItem()}focusItem(){let t=this.accordionItems[this.activeItemIndex];t instanceof de&&t.expandbutton.focus()}};l([c({attribute:"expand-mode"})],Xi.prototype,"expandmode",void 0);l([m],Xi.prototype,"accordionItems",void 0);var yl=(i,t)=>y`<a class="control" part="control" download="${e=>e.download}" href="${e=>e.href}" hreflang="${e=>e.hreflang}" ping="${e=>e.ping}" referrerpolicy="${e=>e.referrerpolicy}" rel="${e=>e.rel}" target="${e=>e.target}" type="${e=>e.type}" aria-atomic="${e=>e.ariaAtomic}" aria-busy="${e=>e.ariaBusy}" aria-controls="${e=>e.ariaControls}" aria-current="${e=>e.ariaCurrent}" aria-describedby="${e=>e.ariaDescribedby}" aria-details="${e=>e.ariaDetails}" aria-disabled="${e=>e.ariaDisabled}" aria-errormessage="${e=>e.ariaErrormessage}" aria-expanded="${e=>e.ariaExpanded}" aria-flowto="${e=>e.ariaFlowto}" aria-haspopup="${e=>e.ariaHaspopup}" aria-hidden="${e=>e.ariaHidden}" aria-invalid="${e=>e.ariaInvalid}" aria-keyshortcuts="${e=>e.ariaKeyshortcuts}" aria-label="${e=>e.ariaLabel}" aria-labelledby="${e=>e.ariaLabelledby}" aria-live="${e=>e.ariaLive}" aria-owns="${e=>e.ariaOwns}" aria-relevant="${e=>e.ariaRelevant}" aria-roledescription="${e=>e.ariaRoledescription}" ${P("control")}>${Ct(i,t)}<span class="content" part="content"><slot ${X("defaultSlottedContent")}></slot></span>${kt(i,t)}</a>`,j=class{};l([c({attribute:"aria-atomic"})],j.prototype,"ariaAtomic",void 0);l([c({attribute:"aria-busy"})],j.prototype,"ariaBusy",void 0);l([c({attribute:"aria-controls"})],j.prototype,"ariaControls",void 0);l([c({attribute:"aria-current"})],j.prototype,"ariaCurrent",void 0);l([c({attribute:"aria-describedby"})],j.prototype,"ariaDescribedby",void 0);l([c({attribute:"aria-details"})],j.prototype,"ariaDetails",void 0);l([c({attribute:"aria-disabled"})],j.prototype,"ariaDisabled",void 0);l([c({attribute:"aria-errormessage"})],j.prototype,"ariaErrormessage",void 0);l([c({attribute:"aria-flowto"})],j.prototype,"ariaFlowto",void 0);l([c({attribute:"aria-haspopup"})],j.prototype,"ariaHaspopup",void 0);l([c({attribute:"aria-hidden"})],j.prototype,"ariaHidden",void 0);l([c({attribute:"aria-invalid"})],j.prototype,"ariaInvalid",void 0);l([c({attribute:"aria-keyshortcuts"})],j.prototype,"ariaKeyshortcuts",void 0);l([c({attribute:"aria-label"})],j.prototype,"ariaLabel",void 0);l([c({attribute:"aria-labelledby"})],j.prototype,"ariaLabelledby",void 0);l([c({attribute:"aria-live"})],j.prototype,"ariaLive",void 0);l([c({attribute:"aria-owns"})],j.prototype,"ariaOwns",void 0);l([c({attribute:"aria-relevant"})],j.prototype,"ariaRelevant",void 0);l([c({attribute:"aria-roledescription"})],j.prototype,"ariaRoledescription",void 0);var yt=class extends O{constructor(){super(...arguments),this.handleUnsupportedDelegatesFocus=()=>{var t;window.ShadowRoot&&!window.ShadowRoot.prototype.hasOwnProperty("delegatesFocus")&&(!((t=this.$fastController.definition.shadowOptions)===null||t===void 0)&&t.delegatesFocus)&&(this.focus=()=>{var e;(e=this.control)===null||e===void 0||e.focus()})}}connectedCallback(){super.connectedCallback(),this.handleUnsupportedDelegatesFocus()}};l([c],yt.prototype,"download",void 0);l([c],yt.prototype,"href",void 0);l([c],yt.prototype,"hreflang",void 0);l([c],yt.prototype,"ping",void 0);l([c],yt.prototype,"referrerpolicy",void 0);l([c],yt.prototype,"rel",void 0);l([c],yt.prototype,"target",void 0);l([c],yt.prototype,"type",void 0);l([m],yt.prototype,"defaultSlottedContent",void 0);var di=class{};l([c({attribute:"aria-expanded"})],di.prototype,"ariaExpanded",void 0);Y(di,j);Y(yt,pt,di);var Sh=(i,t)=>y`<template class="${e=>e.initialLayoutComplete?"loaded":""}">${J(e=>e.initialLayoutComplete,y`<slot></slot>`)}</template>`,Pe=i=>{let t=i.closest("[dir]");return t!==null&&t.dir==="rtl"?G.rtl:G.ltr},Fn=class{constructor(){this.intersectionDetector=null,this.observedElements=new Map,this.requestPosition=(t,e)=>{var o;if(this.intersectionDetector!==null){if(this.observedElements.has(t)){(o=this.observedElements.get(t))===null||o===void 0||o.push(e);return}this.observedElements.set(t,[e]),this.intersectionDetector.observe(t)}},this.cancelRequestPosition=(t,e)=>{let o=this.observedElements.get(t);if(o!==void 0){let s=o.indexOf(e);s!==-1&&o.splice(s,1)}},this.initializeIntersectionDetector=()=>{le.IntersectionObserver&&(this.intersectionDetector=new IntersectionObserver(this.handleIntersection,{root:null,rootMargin:"0px",threshold:[0,1]}))},this.handleIntersection=t=>{if(this.intersectionDetector===null)return;let e=[],o=[];t.forEach(s=>{var n;(n=this.intersectionDetector)===null||n===void 0||n.unobserve(s.target);let r=this.observedElements.get(s.target);r!==void 0&&(r.forEach(a=>{let d=e.indexOf(a);d===-1&&(d=e.length,e.push(a),o.push([])),o[d].push(s)}),this.observedElements.delete(s.target))}),e.forEach((s,n)=>{s(o[n])})},this.initializeIntersectionDetector()}},R=class i extends O{constructor(){super(...arguments),this.anchor="",this.viewport="",this.horizontalPositioningMode="uncontrolled",this.horizontalDefaultPosition="unset",this.horizontalViewportLock=!1,this.horizontalInset=!1,this.horizontalScaling="content",this.verticalPositioningMode="uncontrolled",this.verticalDefaultPosition="unset",this.verticalViewportLock=!1,this.verticalInset=!1,this.verticalScaling="content",this.fixedPlacement=!1,this.autoUpdateMode="anchor",this.anchorElement=null,this.viewportElement=null,this.initialLayoutComplete=!1,this.resizeDetector=null,this.baseHorizontalOffset=0,this.baseVerticalOffset=0,this.pendingPositioningUpdate=!1,this.pendingReset=!1,this.currentDirection=G.ltr,this.regionVisible=!1,this.forceUpdate=!1,this.updateThreshold=.5,this.update=()=>{this.pendingPositioningUpdate||this.requestPositionUpdates()},this.startObservers=()=>{this.stopObservers(),this.anchorElement!==null&&(this.requestPositionUpdates(),this.resizeDetector!==null&&(this.resizeDetector.observe(this.anchorElement),this.resizeDetector.observe(this)))},this.requestPositionUpdates=()=>{this.anchorElement===null||this.pendingPositioningUpdate||(i.intersectionService.requestPosition(this,this.handleIntersection),i.intersectionService.requestPosition(this.anchorElement,this.handleIntersection),this.viewportElement!==null&&i.intersectionService.requestPosition(this.viewportElement,this.handleIntersection),this.pendingPositioningUpdate=!0)},this.stopObservers=()=>{this.pendingPositioningUpdate&&(this.pendingPositioningUpdate=!1,i.intersectionService.cancelRequestPosition(this,this.handleIntersection),this.anchorElement!==null&&i.intersectionService.cancelRequestPosition(this.anchorElement,this.handleIntersection),this.viewportElement!==null&&i.intersectionService.cancelRequestPosition(this.viewportElement,this.handleIntersection)),this.resizeDetector!==null&&this.resizeDetector.disconnect()},this.getViewport=()=>typeof this.viewport!="string"||this.viewport===""?document.documentElement:document.getElementById(this.viewport),this.getAnchor=()=>document.getElementById(this.anchor),this.handleIntersection=t=>{this.pendingPositioningUpdate&&(this.pendingPositioningUpdate=!1,this.applyIntersectionEntries(t)&&this.updateLayout())},this.applyIntersectionEntries=t=>{let e=t.find(n=>n.target===this),o=t.find(n=>n.target===this.anchorElement),s=t.find(n=>n.target===this.viewportElement);return e===void 0||s===void 0||o===void 0?!1:!this.regionVisible||this.forceUpdate||this.regionRect===void 0||this.anchorRect===void 0||this.viewportRect===void 0||this.isRectDifferent(this.anchorRect,o.boundingClientRect)||this.isRectDifferent(this.viewportRect,s.boundingClientRect)||this.isRectDifferent(this.regionRect,e.boundingClientRect)?(this.regionRect=e.boundingClientRect,this.anchorRect=o.boundingClientRect,this.viewportElement===document.documentElement?this.viewportRect=new DOMRectReadOnly(s.boundingClientRect.x+document.documentElement.scrollLeft,s.boundingClientRect.y+document.documentElement.scrollTop,s.boundingClientRect.width,s.boundingClientRect.height):this.viewportRect=s.boundingClientRect,this.updateRegionOffset(),this.forceUpdate=!1,!0):!1},this.updateRegionOffset=()=>{this.anchorRect&&this.regionRect&&(this.baseHorizontalOffset=this.baseHorizontalOffset+(this.anchorRect.left-this.regionRect.left)+(this.translateX-this.baseHorizontalOffset),this.baseVerticalOffset=this.baseVerticalOffset+(this.anchorRect.top-this.regionRect.top)+(this.translateY-this.baseVerticalOffset))},this.isRectDifferent=(t,e)=>Math.abs(t.top-e.top)>this.updateThreshold||Math.abs(t.right-e.right)>this.updateThreshold||Math.abs(t.bottom-e.bottom)>this.updateThreshold||Math.abs(t.left-e.left)>this.updateThreshold,this.handleResize=t=>{this.update()},this.reset=()=>{this.pendingReset&&(this.pendingReset=!1,this.anchorElement===null&&(this.anchorElement=this.getAnchor()),this.viewportElement===null&&(this.viewportElement=this.getViewport()),this.currentDirection=Pe(this),this.startObservers())},this.updateLayout=()=>{let t,e;if(this.horizontalPositioningMode!=="uncontrolled"){let n=this.getPositioningOptions(this.horizontalInset);if(this.horizontalDefaultPosition==="center")e="center";else if(this.horizontalDefaultPosition!=="unset"){let v=this.horizontalDefaultPosition;if(v==="start"||v==="end"){let T=Pe(this);if(T!==this.currentDirection){this.currentDirection=T,this.initialize();return}this.currentDirection===G.ltr?v=v==="start"?"left":"right":v=v==="start"?"right":"left"}switch(v){case"left":e=this.horizontalInset?"insetStart":"start";break;case"right":e=this.horizontalInset?"insetEnd":"end";break}}let r=this.horizontalThreshold!==void 0?this.horizontalThreshold:this.regionRect!==void 0?this.regionRect.width:0,a=this.anchorRect!==void 0?this.anchorRect.left:0,d=this.anchorRect!==void 0?this.anchorRect.right:0,u=this.anchorRect!==void 0?this.anchorRect.width:0,p=this.viewportRect!==void 0?this.viewportRect.left:0,f=this.viewportRect!==void 0?this.viewportRect.right:0;(e===void 0||this.horizontalPositioningMode!=="locktodefault"&&this.getAvailableSpace(e,a,d,u,p,f)<r)&&(e=this.getAvailableSpace(n[0],a,d,u,p,f)>this.getAvailableSpace(n[1],a,d,u,p,f)?n[0]:n[1])}if(this.verticalPositioningMode!=="uncontrolled"){let n=this.getPositioningOptions(this.verticalInset);if(this.verticalDefaultPosition==="center")t="center";else if(this.verticalDefaultPosition!=="unset")switch(this.verticalDefaultPosition){case"top":t=this.verticalInset?"insetStart":"start";break;case"bottom":t=this.verticalInset?"insetEnd":"end";break}let r=this.verticalThreshold!==void 0?this.verticalThreshold:this.regionRect!==void 0?this.regionRect.height:0,a=this.anchorRect!==void 0?this.anchorRect.top:0,d=this.anchorRect!==void 0?this.anchorRect.bottom:0,u=this.anchorRect!==void 0?this.anchorRect.height:0,p=this.viewportRect!==void 0?this.viewportRect.top:0,f=this.viewportRect!==void 0?this.viewportRect.bottom:0;(t===void 0||this.verticalPositioningMode!=="locktodefault"&&this.getAvailableSpace(t,a,d,u,p,f)<r)&&(t=this.getAvailableSpace(n[0],a,d,u,p,f)>this.getAvailableSpace(n[1],a,d,u,p,f)?n[0]:n[1])}let o=this.getNextRegionDimension(e,t),s=this.horizontalPosition!==e||this.verticalPosition!==t;if(this.setHorizontalPosition(e,o),this.setVerticalPosition(t,o),this.updateRegionStyle(),!this.initialLayoutComplete){this.initialLayoutComplete=!0,this.requestPositionUpdates();return}this.regionVisible||(this.regionVisible=!0,this.style.removeProperty("pointer-events"),this.style.removeProperty("opacity"),this.classList.toggle("loaded",!0),this.$emit("loaded",this,{bubbles:!1})),this.updatePositionClasses(),s&&this.$emit("positionchange",this,{bubbles:!1})},this.updateRegionStyle=()=>{this.style.width=this.regionWidth,this.style.height=this.regionHeight,this.style.transform=`translate(${this.translateX}px, ${this.translateY}px)`},this.updatePositionClasses=()=>{this.classList.toggle("top",this.verticalPosition==="start"),this.classList.toggle("bottom",this.verticalPosition==="end"),this.classList.toggle("inset-top",this.verticalPosition==="insetStart"),this.classList.toggle("inset-bottom",this.verticalPosition==="insetEnd"),this.classList.toggle("vertical-center",this.verticalPosition==="center"),this.classList.toggle("left",this.horizontalPosition==="start"),this.classList.toggle("right",this.horizontalPosition==="end"),this.classList.toggle("inset-left",this.horizontalPosition==="insetStart"),this.classList.toggle("inset-right",this.horizontalPosition==="insetEnd"),this.classList.toggle("horizontal-center",this.horizontalPosition==="center")},this.setHorizontalPosition=(t,e)=>{if(t===void 0||this.regionRect===void 0||this.anchorRect===void 0||this.viewportRect===void 0)return;let o=0;switch(this.horizontalScaling){case"anchor":case"fill":o=this.horizontalViewportLock?this.viewportRect.width:e.width,this.regionWidth=`${o}px`;break;case"content":o=this.regionRect.width,this.regionWidth="unset";break}let s=0;switch(t){case"start":this.translateX=this.baseHorizontalOffset-o,this.horizontalViewportLock&&this.anchorRect.left>this.viewportRect.right&&(this.translateX=this.translateX-(this.anchorRect.left-this.viewportRect.right));break;case"insetStart":this.translateX=this.baseHorizontalOffset-o+this.anchorRect.width,this.horizontalViewportLock&&this.anchorRect.right>this.viewportRect.right&&(this.translateX=this.translateX-(this.anchorRect.right-this.viewportRect.right));break;case"insetEnd":this.translateX=this.baseHorizontalOffset,this.horizontalViewportLock&&this.anchorRect.left<this.viewportRect.left&&(this.translateX=this.translateX-(this.anchorRect.left-this.viewportRect.left));break;case"end":this.translateX=this.baseHorizontalOffset+this.anchorRect.width,this.horizontalViewportLock&&this.anchorRect.right<this.viewportRect.left&&(this.translateX=this.translateX-(this.anchorRect.right-this.viewportRect.left));break;case"center":if(s=(this.anchorRect.width-o)/2,this.translateX=this.baseHorizontalOffset+s,this.horizontalViewportLock){let n=this.anchorRect.left+s,r=this.anchorRect.right-s;n<this.viewportRect.left&&!(r>this.viewportRect.right)?this.translateX=this.translateX-(n-this.viewportRect.left):r>this.viewportRect.right&&!(n<this.viewportRect.left)&&(this.translateX=this.translateX-(r-this.viewportRect.right))}break}this.horizontalPosition=t},this.setVerticalPosition=(t,e)=>{if(t===void 0||this.regionRect===void 0||this.anchorRect===void 0||this.viewportRect===void 0)return;let o=0;switch(this.verticalScaling){case"anchor":case"fill":o=this.verticalViewportLock?this.viewportRect.height:e.height,this.regionHeight=`${o}px`;break;case"content":o=this.regionRect.height,this.regionHeight="unset";break}let s=0;switch(t){case"start":this.translateY=this.baseVerticalOffset-o,this.verticalViewportLock&&this.anchorRect.top>this.viewportRect.bottom&&(this.translateY=this.translateY-(this.anchorRect.top-this.viewportRect.bottom));break;case"insetStart":this.translateY=this.baseVerticalOffset-o+this.anchorRect.height,this.verticalViewportLock&&this.anchorRect.bottom>this.viewportRect.bottom&&(this.translateY=this.translateY-(this.anchorRect.bottom-this.viewportRect.bottom));break;case"insetEnd":this.translateY=this.baseVerticalOffset,this.verticalViewportLock&&this.anchorRect.top<this.viewportRect.top&&(this.translateY=this.translateY-(this.anchorRect.top-this.viewportRect.top));break;case"end":this.translateY=this.baseVerticalOffset+this.anchorRect.height,this.verticalViewportLock&&this.anchorRect.bottom<this.viewportRect.top&&(this.translateY=this.translateY-(this.anchorRect.bottom-this.viewportRect.top));break;case"center":if(s=(this.anchorRect.height-o)/2,this.translateY=this.baseVerticalOffset+s,this.verticalViewportLock){let n=this.anchorRect.top+s,r=this.anchorRect.bottom-s;n<this.viewportRect.top&&!(r>this.viewportRect.bottom)?this.translateY=this.translateY-(n-this.viewportRect.top):r>this.viewportRect.bottom&&!(n<this.viewportRect.top)&&(this.translateY=this.translateY-(r-this.viewportRect.bottom))}}this.verticalPosition=t},this.getPositioningOptions=t=>t?["insetStart","insetEnd"]:["start","end"],this.getAvailableSpace=(t,e,o,s,n,r)=>{let a=e-n,d=r-(e+s);switch(t){case"start":return a;case"insetStart":return a+s;case"insetEnd":return d+s;case"end":return d;case"center":return Math.min(a,d)*2+s}},this.getNextRegionDimension=(t,e)=>{let o={height:this.regionRect!==void 0?this.regionRect.height:0,width:this.regionRect!==void 0?this.regionRect.width:0};return t!==void 0&&this.horizontalScaling==="fill"?o.width=this.getAvailableSpace(t,this.anchorRect!==void 0?this.anchorRect.left:0,this.anchorRect!==void 0?this.anchorRect.right:0,this.anchorRect!==void 0?this.anchorRect.width:0,this.viewportRect!==void 0?this.viewportRect.left:0,this.viewportRect!==void 0?this.viewportRect.right:0):this.horizontalScaling==="anchor"&&(o.width=this.anchorRect!==void 0?this.anchorRect.width:0),e!==void 0&&this.verticalScaling==="fill"?o.height=this.getAvailableSpace(e,this.anchorRect!==void 0?this.anchorRect.top:0,this.anchorRect!==void 0?this.anchorRect.bottom:0,this.anchorRect!==void 0?this.anchorRect.height:0,this.viewportRect!==void 0?this.viewportRect.top:0,this.viewportRect!==void 0?this.viewportRect.bottom:0):this.verticalScaling==="anchor"&&(o.height=this.anchorRect!==void 0?this.anchorRect.height:0),o},this.startAutoUpdateEventListeners=()=>{window.addEventListener(ka,this.update,{passive:!0}),window.addEventListener(Ca,this.update,{passive:!0,capture:!0}),this.resizeDetector!==null&&this.viewportElement!==null&&this.resizeDetector.observe(this.viewportElement)},this.stopAutoUpdateEventListeners=()=>{window.removeEventListener(ka,this.update),window.removeEventListener(Ca,this.update),this.resizeDetector!==null&&this.viewportElement!==null&&this.resizeDetector.unobserve(this.viewportElement)}}anchorChanged(){this.initialLayoutComplete&&(this.anchorElement=this.getAnchor())}viewportChanged(){this.initialLayoutComplete&&(this.viewportElement=this.getViewport())}horizontalPositioningModeChanged(){this.requestReset()}horizontalDefaultPositionChanged(){this.updateForAttributeChange()}horizontalViewportLockChanged(){this.updateForAttributeChange()}horizontalInsetChanged(){this.updateForAttributeChange()}horizontalThresholdChanged(){this.updateForAttributeChange()}horizontalScalingChanged(){this.updateForAttributeChange()}verticalPositioningModeChanged(){this.requestReset()}verticalDefaultPositionChanged(){this.updateForAttributeChange()}verticalViewportLockChanged(){this.updateForAttributeChange()}verticalInsetChanged(){this.updateForAttributeChange()}verticalThresholdChanged(){this.updateForAttributeChange()}verticalScalingChanged(){this.updateForAttributeChange()}fixedPlacementChanged(){this.$fastController.isConnected&&this.initialLayoutComplete&&this.initialize()}autoUpdateModeChanged(t,e){this.$fastController.isConnected&&this.initialLayoutComplete&&(t==="auto"&&this.stopAutoUpdateEventListeners(),e==="auto"&&this.startAutoUpdateEventListeners())}anchorElementChanged(){this.requestReset()}viewportElementChanged(){this.$fastController.isConnected&&this.initialLayoutComplete&&this.initialize()}connectedCallback(){super.connectedCallback(),this.autoUpdateMode==="auto"&&this.startAutoUpdateEventListeners(),this.initialize()}disconnectedCallback(){super.disconnectedCallback(),this.autoUpdateMode==="auto"&&this.stopAutoUpdateEventListeners(),this.stopObservers(),this.disconnectResizeDetector()}adoptedCallback(){this.initialize()}disconnectResizeDetector(){this.resizeDetector!==null&&(this.resizeDetector.disconnect(),this.resizeDetector=null)}initializeResizeDetector(){this.disconnectResizeDetector(),this.resizeDetector=new window.ResizeObserver(this.handleResize)}updateForAttributeChange(){this.$fastController.isConnected&&this.initialLayoutComplete&&(this.forceUpdate=!0,this.update())}initialize(){this.initializeResizeDetector(),this.anchorElement===null&&(this.anchorElement=this.getAnchor()),this.requestReset()}requestReset(){this.$fastController.isConnected&&this.pendingReset===!1&&(this.setInitialState(),D.queueUpdate(()=>this.reset()),this.pendingReset=!0)}setInitialState(){this.initialLayoutComplete=!1,this.regionVisible=!1,this.translateX=0,this.translateY=0,this.baseHorizontalOffset=0,this.baseVerticalOffset=0,this.viewportRect=void 0,this.regionRect=void 0,this.anchorRect=void 0,this.verticalPosition=void 0,this.horizontalPosition=void 0,this.style.opacity="0",this.style.pointerEvents="none",this.forceUpdate=!1,this.style.position=this.fixedPlacement?"fixed":"absolute",this.updatePositionClasses(),this.updateRegionStyle()}};R.intersectionService=new Fn;l([c],R.prototype,"anchor",void 0);l([c],R.prototype,"viewport",void 0);l([c({attribute:"horizontal-positioning-mode"})],R.prototype,"horizontalPositioningMode",void 0);l([c({attribute:"horizontal-default-position"})],R.prototype,"horizontalDefaultPosition",void 0);l([c({attribute:"horizontal-viewport-lock",mode:"boolean"})],R.prototype,"horizontalViewportLock",void 0);l([c({attribute:"horizontal-inset",mode:"boolean"})],R.prototype,"horizontalInset",void 0);l([c({attribute:"horizontal-threshold"})],R.prototype,"horizontalThreshold",void 0);l([c({attribute:"horizontal-scaling"})],R.prototype,"horizontalScaling",void 0);l([c({attribute:"vertical-positioning-mode"})],R.prototype,"verticalPositioningMode",void 0);l([c({attribute:"vertical-default-position"})],R.prototype,"verticalDefaultPosition",void 0);l([c({attribute:"vertical-viewport-lock",mode:"boolean"})],R.prototype,"verticalViewportLock",void 0);l([c({attribute:"vertical-inset",mode:"boolean"})],R.prototype,"verticalInset",void 0);l([c({attribute:"vertical-threshold"})],R.prototype,"verticalThreshold",void 0);l([c({attribute:"vertical-scaling"})],R.prototype,"verticalScaling",void 0);l([c({attribute:"fixed-placement",mode:"boolean"})],R.prototype,"fixedPlacement",void 0);l([c({attribute:"auto-update-mode"})],R.prototype,"autoUpdateMode",void 0);l([m],R.prototype,"anchorElement",void 0);l([m],R.prototype,"viewportElement",void 0);l([m],R.prototype,"initialLayoutComplete",void 0);var Th=(i,t)=>y`<template class="${e=>e.circular?"circular":""}"><div class="control" part="control" style="${e=>e.generateBadgeStyle()}"><slot></slot></div></template>`,Me=class extends O{constructor(){super(...arguments),this.generateBadgeStyle=()=>{if(!this.fill&&!this.color)return;let t=`background-color: var(--badge-fill-${this.fill});`,e=`color: var(--badge-color-${this.color});`;return this.fill&&!this.color?t:this.color&&!this.fill?e:`${e} ${t}`}}};l([c({attribute:"fill"})],Me.prototype,"fill",void 0);l([c({attribute:"color"})],Me.prototype,"color",void 0);l([c({mode:"boolean"})],Me.prototype,"circular",void 0);var Dh=(i,t)=>y`<div role="listitem" class="listitem" part="listitem">${J(e=>e.href&&e.href.length>0,y` ${yl(i,t)} `)} ${J(e=>!e.href,y` ${Ct(i,t)}<slot></slot>${kt(i,t)} `)} ${J(e=>e.separator,y`<span class="separator" part="separator" aria-hidden="true"><slot name="separator">${t.separator||""}</slot></span>`)}</div>`,Ne=class extends yt{constructor(){super(...arguments),this.separator=!0}};l([m],Ne.prototype,"separator",void 0);Y(Ne,pt,di);var Rh=(i,t)=>y`<template role="navigation"><div role="list" class="list" part="list"><slot ${X({property:"slottedBreadcrumbItems",filter:ce()})}></slot></div></template>`,Mo=class extends O{slottedBreadcrumbItemsChanged(){if(this.$fastController.isConnected){if(this.slottedBreadcrumbItems===void 0||this.slottedBreadcrumbItems.length===0)return;let t=this.slottedBreadcrumbItems[this.slottedBreadcrumbItems.length-1];this.slottedBreadcrumbItems.forEach(e=>{let o=e===t;this.setItemSeparator(e,o),this.setAriaCurrent(e,o)})}}setItemSeparator(t,e){t instanceof Ne&&(t.separator=!e)}findChildWithHref(t){var e,o;return t.childElementCount>0?t.querySelector("a[href]"):!((e=t.shadowRoot)===null||e===void 0)&&e.childElementCount?(o=t.shadowRoot)===null||o===void 0?void 0:o.querySelector("a[href]"):null}setAriaCurrent(t,e){let o=this.findChildWithHref(t);o===null&&t.hasAttribute("href")&&t instanceof Ne?e?t.setAttribute("aria-current","page"):t.removeAttribute("aria-current"):o!==null&&(e?o.setAttribute("aria-current","page"):o.removeAttribute("aria-current"))}};l([m],Mo.prototype,"slottedBreadcrumbItems",void 0);var Eh=(i,t)=>y`<button class="control" part="control" ?autofocus="${e=>e.autofocus}" ?disabled="${e=>e.disabled}" form="${e=>e.formId}" formaction="${e=>e.formaction}" formenctype="${e=>e.formenctype}" formmethod="${e=>e.formmethod}" formnovalidate="${e=>e.formnovalidate}" formtarget="${e=>e.formtarget}" name="${e=>e.name}" type="${e=>e.type}" value="${e=>e.value}" aria-atomic="${e=>e.ariaAtomic}" aria-busy="${e=>e.ariaBusy}" aria-controls="${e=>e.ariaControls}" aria-current="${e=>e.ariaCurrent}" aria-describedby="${e=>e.ariaDescribedby}" aria-details="${e=>e.ariaDetails}" aria-disabled="${e=>e.ariaDisabled}" aria-errormessage="${e=>e.ariaErrormessage}" aria-expanded="${e=>e.ariaExpanded}" aria-flowto="${e=>e.ariaFlowto}" aria-haspopup="${e=>e.ariaHaspopup}" aria-hidden="${e=>e.ariaHidden}" aria-invalid="${e=>e.ariaInvalid}" aria-keyshortcuts="${e=>e.ariaKeyshortcuts}" aria-label="${e=>e.ariaLabel}" aria-labelledby="${e=>e.ariaLabelledby}" aria-live="${e=>e.ariaLive}" aria-owns="${e=>e.ariaOwns}" aria-pressed="${e=>e.ariaPressed}" aria-relevant="${e=>e.ariaRelevant}" aria-roledescription="${e=>e.ariaRoledescription}" ${P("control")}>${Ct(i,t)}<span class="content" part="content"><slot ${X("defaultSlottedContent")}></slot></span>${kt(i,t)}</button>`,Sa="form-associated-proxy",Ta="ElementInternals",Da=Ta in window&&"setFormValue"in window[Ta].prototype,Ra=new WeakMap;function ge(i){let t=class extends i{constructor(...e){super(...e),this.dirtyValue=!1,this.disabled=!1,this.proxyEventsToBlock=["change","click"],this.proxyInitialized=!1,this.required=!1,this.initialValue=this.initialValue||"",this.elementInternals||(this.formResetCallback=this.formResetCallback.bind(this))}static get formAssociated(){return Da}get validity(){return this.elementInternals?this.elementInternals.validity:this.proxy.validity}get form(){return this.elementInternals?this.elementInternals.form:this.proxy.form}get validationMessage(){return this.elementInternals?this.elementInternals.validationMessage:this.proxy.validationMessage}get willValidate(){return this.elementInternals?this.elementInternals.willValidate:this.proxy.willValidate}get labels(){if(this.elementInternals)return Object.freeze(Array.from(this.elementInternals.labels));if(this.proxy instanceof HTMLElement&&this.proxy.ownerDocument&&this.id){let e=this.proxy.labels,o=Array.from(this.proxy.getRootNode().querySelectorAll(`[for='${this.id}']`)),s=e?o.concat(Array.from(e)):o;return Object.freeze(s)}else return Ve}valueChanged(e,o){this.dirtyValue=!0,this.proxy instanceof HTMLElement&&(this.proxy.value=this.value),this.currentValue=this.value,this.setFormValue(this.value),this.validate()}currentValueChanged(){this.value=this.currentValue}initialValueChanged(e,o){this.dirtyValue||(this.value=this.initialValue,this.dirtyValue=!1)}disabledChanged(e,o){this.proxy instanceof HTMLElement&&(this.proxy.disabled=this.disabled),D.queueUpdate(()=>this.classList.toggle("disabled",this.disabled))}nameChanged(e,o){this.proxy instanceof HTMLElement&&(this.proxy.name=this.name)}requiredChanged(e,o){this.proxy instanceof HTMLElement&&(this.proxy.required=this.required),D.queueUpdate(()=>this.classList.toggle("required",this.required)),this.validate()}get elementInternals(){if(!Da)return null;let e=Ra.get(this);return e||(e=this.attachInternals(),Ra.set(this,e)),e}connectedCallback(){super.connectedCallback(),this.addEventListener("keypress",this._keypressHandler),this.value||(this.value=this.initialValue,this.dirtyValue=!1),this.elementInternals||(this.attachProxy(),this.form&&this.form.addEventListener("reset",this.formResetCallback))}disconnectedCallback(){super.disconnectedCallback(),this.proxyEventsToBlock.forEach(e=>this.proxy.removeEventListener(e,this.stopPropagation)),!this.elementInternals&&this.form&&this.form.removeEventListener("reset",this.formResetCallback)}checkValidity(){return this.elementInternals?this.elementInternals.checkValidity():this.proxy.checkValidity()}reportValidity(){return this.elementInternals?this.elementInternals.reportValidity():this.proxy.reportValidity()}setValidity(e,o,s){this.elementInternals?this.elementInternals.setValidity(e,o,s):typeof o=="string"&&this.proxy.setCustomValidity(o)}formDisabledCallback(e){this.disabled=e}formResetCallback(){this.value=this.initialValue,this.dirtyValue=!1}attachProxy(){var e;this.proxyInitialized||(this.proxyInitialized=!0,this.proxy.style.display="none",this.proxyEventsToBlock.forEach(o=>this.proxy.addEventListener(o,this.stopPropagation)),this.proxy.disabled=this.disabled,this.proxy.required=this.required,typeof this.name=="string"&&(this.proxy.name=this.name),typeof this.value=="string"&&(this.proxy.value=this.value),this.proxy.setAttribute("slot",Sa),this.proxySlot=document.createElement("slot"),this.proxySlot.setAttribute("name",Sa)),(e=this.shadowRoot)===null||e===void 0||e.appendChild(this.proxySlot),this.appendChild(this.proxy)}detachProxy(){var e;this.removeChild(this.proxy),(e=this.shadowRoot)===null||e===void 0||e.removeChild(this.proxySlot)}validate(e){this.proxy instanceof HTMLElement&&this.setValidity(this.proxy.validity,this.proxy.validationMessage,e)}setFormValue(e,o){this.elementInternals&&this.elementInternals.setFormValue(e,o||e)}_keypressHandler(e){switch(e.key){case fe:if(this.form instanceof HTMLFormElement){let o=this.form.querySelector("[type=submit]");o?.click()}break}}stopPropagation(e){e.stopPropagation()}};return c({mode:"boolean"})(t.prototype,"disabled"),c({mode:"fromView",attribute:"value"})(t.prototype,"initialValue"),c({attribute:"current-value"})(t.prototype,"currentValue"),c(t.prototype,"name"),c({mode:"boolean"})(t.prototype,"required"),m(t.prototype,"value"),t}function kr(i){class t extends ge(i){}class e extends t{constructor(...s){super(s),this.dirtyChecked=!1,this.checkedAttribute=!1,this.checked=!1,this.dirtyChecked=!1}checkedAttributeChanged(){this.defaultChecked=this.checkedAttribute}defaultCheckedChanged(){this.dirtyChecked||(this.checked=this.defaultChecked,this.dirtyChecked=!1)}checkedChanged(s,n){this.dirtyChecked||(this.dirtyChecked=!0),this.currentChecked=this.checked,this.updateForm(),this.proxy instanceof HTMLInputElement&&(this.proxy.checked=this.checked),s!==void 0&&this.$emit("change"),this.validate()}currentCheckedChanged(s,n){this.checked=this.currentChecked}updateForm(){let s=this.checked?this.value:null;this.setFormValue(s,s)}connectedCallback(){super.connectedCallback(),this.updateForm()}formResetCallback(){super.formResetCallback(),this.checked=!!this.checkedAttribute,this.dirtyChecked=!1}}return c({attribute:"checked",mode:"boolean"})(e.prototype,"checkedAttribute"),c({attribute:"current-checked",converter:io})(e.prototype,"currentChecked"),m(e.prototype,"defaultChecked"),m(e.prototype,"checked"),e}var In=class extends O{},Sn=class extends ge(In){constructor(){super(...arguments),this.proxy=document.createElement("input")}},xt=class extends Sn{constructor(){super(...arguments),this.handleClick=t=>{var e;this.disabled&&((e=this.defaultSlottedContent)===null||e===void 0?void 0:e.length)<=1&&t.stopPropagation()},this.handleSubmission=()=>{if(!this.form)return;let t=this.proxy.isConnected;t||this.attachProxy(),typeof this.form.requestSubmit=="function"?this.form.requestSubmit(this.proxy):this.proxy.click(),t||this.detachProxy()},this.handleFormReset=()=>{var t;(t=this.form)===null||t===void 0||t.reset()},this.handleUnsupportedDelegatesFocus=()=>{var t;window.ShadowRoot&&!window.ShadowRoot.prototype.hasOwnProperty("delegatesFocus")&&(!((t=this.$fastController.definition.shadowOptions)===null||t===void 0)&&t.delegatesFocus)&&(this.focus=()=>{this.control.focus()})}}formactionChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formAction=this.formaction)}formenctypeChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formEnctype=this.formenctype)}formmethodChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formMethod=this.formmethod)}formnovalidateChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formNoValidate=this.formnovalidate)}formtargetChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.formTarget=this.formtarget)}typeChanged(t,e){this.proxy instanceof HTMLInputElement&&(this.proxy.type=this.type),e==="submit"&&this.addEventListener("click",this.handleSubmission),t==="submit"&&this.removeEventListener("click",this.handleSubmission),e==="reset"&&this.addEventListener("click",this.handleFormReset),t==="reset"&&this.removeEventListener("click",this.handleFormReset)}validate(){super.validate(this.control)}connectedCallback(){var t;super.connectedCallback(),this.proxy.setAttribute("type",this.type),this.handleUnsupportedDelegatesFocus();let e=Array.from((t=this.control)===null||t===void 0?void 0:t.children);e&&e.forEach(o=>{o.addEventListener("click",this.handleClick)})}disconnectedCallback(){var t;super.disconnectedCallback();let e=Array.from((t=this.control)===null||t===void 0?void 0:t.children);e&&e.forEach(o=>{o.removeEventListener("click",this.handleClick)})}};l([c({mode:"boolean"})],xt.prototype,"autofocus",void 0);l([c({attribute:"form"})],xt.prototype,"formId",void 0);l([c],xt.prototype,"formaction",void 0);l([c],xt.prototype,"formenctype",void 0);l([c],xt.prototype,"formmethod",void 0);l([c({mode:"boolean"})],xt.prototype,"formnovalidate",void 0);l([c],xt.prototype,"formtarget",void 0);l([c],xt.prototype,"type",void 0);l([m],xt.prototype,"defaultSlottedContent",void 0);var hi=class{};l([c({attribute:"aria-expanded"})],hi.prototype,"ariaExpanded",void 0);l([c({attribute:"aria-pressed"})],hi.prototype,"ariaPressed",void 0);Y(hi,j);Y(xt,pt,hi);var Tn=class{constructor(t){if(this.dayFormat="numeric",this.weekdayFormat="long",this.monthFormat="long",this.yearFormat="numeric",this.date=new Date,t)for(let e in t){let o=t[e];e==="date"?this.date=this.getDateObject(o):this[e]=o}}getDateObject(t){if(typeof t=="string"){let e=t.split(/[/-]/);return e.length<3?new Date:new Date(parseInt(e[2],10),parseInt(e[0],10)-1,parseInt(e[1],10))}else if("day"in t&&"month"in t&&"year"in t){let{day:e,month:o,year:s}=t;return new Date(s,o-1,e)}return t}getDate(t=this.date,e={weekday:this.weekdayFormat,month:this.monthFormat,day:this.dayFormat,year:this.yearFormat},o=this.locale){let s=this.getDateObject(t);if(!s.getTime())return"";let n=Object.assign({timeZone:Intl.DateTimeFormat().resolvedOptions().timeZone},e);return new Intl.DateTimeFormat(o,n).format(s)}getDay(t=this.date.getDate(),e=this.dayFormat,o=this.locale){return this.getDate({month:1,day:t,year:2020},{day:e},o)}getMonth(t=this.date.getMonth()+1,e=this.monthFormat,o=this.locale){return this.getDate({month:t,day:2,year:2020},{month:e},o)}getYear(t=this.date.getFullYear(),e=this.yearFormat,o=this.locale){return this.getDate({month:2,day:2,year:t},{year:e},o)}getWeekday(t=0,e=this.weekdayFormat,o=this.locale){let s=`1-${t+1}-2017`;return this.getDate(s,{weekday:e},o)}getWeekdays(t=this.weekdayFormat,e=this.locale){return Array(7).fill(null).map((o,s)=>this.getWeekday(s,t,e))}},St=class extends O{constructor(){super(...arguments),this.dateFormatter=new Tn,this.readonly=!1,this.locale="en-US",this.month=new Date().getMonth()+1,this.year=new Date().getFullYear(),this.dayFormat="numeric",this.weekdayFormat="short",this.monthFormat="long",this.yearFormat="numeric",this.minWeeks=0,this.disabledDates="",this.selectedDates="",this.oneDayInMs=864e5}localeChanged(){this.dateFormatter.locale=this.locale}dayFormatChanged(){this.dateFormatter.dayFormat=this.dayFormat}weekdayFormatChanged(){this.dateFormatter.weekdayFormat=this.weekdayFormat}monthFormatChanged(){this.dateFormatter.monthFormat=this.monthFormat}yearFormatChanged(){this.dateFormatter.yearFormat=this.yearFormat}getMonthInfo(t=this.month,e=this.year){let o=d=>new Date(d.getFullYear(),d.getMonth(),1).getDay(),s=d=>{let u=new Date(d.getFullYear(),d.getMonth()+1,1);return new Date(u.getTime()-this.oneDayInMs).getDate()},n=new Date(e,t-1),r=new Date(e,t),a=new Date(e,t-2);return{length:s(n),month:t,start:o(n),year:e,previous:{length:s(a),month:a.getMonth()+1,start:o(a),year:a.getFullYear()},next:{length:s(r),month:r.getMonth()+1,start:o(r),year:r.getFullYear()}}}getDays(t=this.getMonthInfo(),e=this.minWeeks){e=e>10?10:e;let{start:o,length:s,previous:n,next:r}=t,a=[],d=1-o;for(;d<s+1||a.length<e||a[a.length-1].length%7!==0;){let{month:u,year:p}=d<1?n:d>s?r:t,f=d<1?n.length+d:d>s?d-s:d,v=`${u}-${f}-${p}`,T=this.dateInString(v,this.disabledDates),A=this.dateInString(v,this.selectedDates),N={day:f,month:u,year:p,disabled:T,selected:A},U=a[a.length-1];a.length===0||U.length%7===0?a.push([N]):U.push(N),d++}return a}dateInString(t,e){let o=e.split(",").map(s=>s.trim());return t=typeof t=="string"?t:`${t.getMonth()+1}-${t.getDate()}-${t.getFullYear()}`,o.some(s=>s===t)}getDayClassNames(t,e){let{day:o,month:s,year:n,disabled:r,selected:a}=t,d=e===`${s}-${o}-${n}`,u=this.month!==s;return["day",d&&"today",u&&"inactive",r&&"disabled",a&&"selected"].filter(Boolean).join(" ")}getWeekdayText(){let t=this.dateFormatter.getWeekdays().map(e=>({text:e}));if(this.weekdayFormat!=="long"){let e=this.dateFormatter.getWeekdays("long");t.forEach((o,s)=>{o.abbr=e[s]})}return t}handleDateSelect(t,e){t.preventDefault,this.$emit("dateselected",e)}handleKeydown(t,e){return t.key===fe&&this.handleDateSelect(t,e),!0}};l([c({mode:"boolean"})],St.prototype,"readonly",void 0);l([c],St.prototype,"locale",void 0);l([c({converter:k})],St.prototype,"month",void 0);l([c({converter:k})],St.prototype,"year",void 0);l([c({attribute:"day-format",mode:"fromView"})],St.prototype,"dayFormat",void 0);l([c({attribute:"weekday-format",mode:"fromView"})],St.prototype,"weekdayFormat",void 0);l([c({attribute:"month-format",mode:"fromView"})],St.prototype,"monthFormat",void 0);l([c({attribute:"year-format",mode:"fromView"})],St.prototype,"yearFormat",void 0);l([c({attribute:"min-weeks",converter:k})],St.prototype,"minWeeks",void 0);l([c({attribute:"disabled-dates"})],St.prototype,"disabledDates",void 0);l([c({attribute:"selected-dates"})],St.prototype,"selectedDates",void 0);var bo={none:"none",default:"default",sticky:"sticky"},ve={default:"default",columnHeader:"columnheader",rowHeader:"rowheader"},Ni={default:"default",header:"header",stickyHeader:"sticky-header"},st=class extends O{constructor(){super(...arguments),this.rowType=Ni.default,this.rowData=null,this.columnDefinitions=null,this.isActiveRow=!1,this.cellsRepeatBehavior=null,this.cellsPlaceholder=null,this.focusColumnIndex=0,this.refocusOnLoad=!1,this.updateRowStyle=()=>{this.style.gridTemplateColumns=this.gridTemplateColumns}}gridTemplateColumnsChanged(){this.$fastController.isConnected&&this.updateRowStyle()}rowTypeChanged(){this.$fastController.isConnected&&this.updateItemTemplate()}rowDataChanged(){if(this.rowData!==null&&this.isActiveRow){this.refocusOnLoad=!0;return}}cellItemTemplateChanged(){this.updateItemTemplate()}headerCellItemTemplateChanged(){this.updateItemTemplate()}connectedCallback(){super.connectedCallback(),this.cellsRepeatBehavior===null&&(this.cellsPlaceholder=document.createComment(""),this.appendChild(this.cellsPlaceholder),this.updateItemTemplate(),this.cellsRepeatBehavior=new qi(t=>t.columnDefinitions,t=>t.activeCellItemTemplate,{positioning:!0}).createBehavior(this.cellsPlaceholder),this.$fastController.addBehaviors([this.cellsRepeatBehavior])),this.addEventListener("cell-focused",this.handleCellFocus),this.addEventListener(li,this.handleFocusout),this.addEventListener(ci,this.handleKeydown),this.updateRowStyle(),this.refocusOnLoad&&(this.refocusOnLoad=!1,this.cellElements.length>this.focusColumnIndex&&this.cellElements[this.focusColumnIndex].focus())}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("cell-focused",this.handleCellFocus),this.removeEventListener(li,this.handleFocusout),this.removeEventListener(ci,this.handleKeydown)}handleFocusout(t){this.contains(t.target)||(this.isActiveRow=!1,this.focusColumnIndex=0)}handleCellFocus(t){this.isActiveRow=!0,this.focusColumnIndex=this.cellElements.indexOf(t.target),this.$emit("row-focused",this)}handleKeydown(t){if(t.defaultPrevented)return;let e=0;switch(t.key){case we:e=Math.max(0,this.focusColumnIndex-1),this.cellElements[e].focus(),t.preventDefault();break;case $e:e=Math.min(this.cellElements.length-1,this.focusColumnIndex+1),this.cellElements[e].focus(),t.preventDefault();break;case ne:t.ctrlKey||(this.cellElements[0].focus(),t.preventDefault());break;case re:t.ctrlKey||(this.cellElements[this.cellElements.length-1].focus(),t.preventDefault());break}}updateItemTemplate(){this.activeCellItemTemplate=this.rowType===Ni.default&&this.cellItemTemplate!==void 0?this.cellItemTemplate:this.rowType===Ni.default&&this.cellItemTemplate===void 0?this.defaultCellItemTemplate:this.headerCellItemTemplate!==void 0?this.headerCellItemTemplate:this.defaultHeaderCellItemTemplate}};l([c({attribute:"grid-template-columns"})],st.prototype,"gridTemplateColumns",void 0);l([c({attribute:"row-type"})],st.prototype,"rowType",void 0);l([m],st.prototype,"rowData",void 0);l([m],st.prototype,"columnDefinitions",void 0);l([m],st.prototype,"cellItemTemplate",void 0);l([m],st.prototype,"headerCellItemTemplate",void 0);l([m],st.prototype,"rowIndex",void 0);l([m],st.prototype,"isActiveRow",void 0);l([m],st.prototype,"activeCellItemTemplate",void 0);l([m],st.prototype,"defaultCellItemTemplate",void 0);l([m],st.prototype,"defaultHeaderCellItemTemplate",void 0);l([m],st.prototype,"cellElements",void 0);function Oh(i){let t=i.tagFor(st);return y`<${t} :rowData="${e=>e}" :cellItemTemplate="${(e,o)=>o.parent.cellItemTemplate}" :headerCellItemTemplate="${(e,o)=>o.parent.headerCellItemTemplate}"></${t}>`}var Ah=(i,t)=>{let e=Oh(i),o=i.tagFor(st);return y`<template role="grid" tabindex="0" :rowElementTag="${()=>o}" :defaultRowItemTemplate="${e}" ${hs({property:"rowElements",filter:ce("[role=row]")})}><slot></slot></template>`},nt=class i extends O{constructor(){super(),this.noTabbing=!1,this.generateHeader=bo.default,this.rowsData=[],this.columnDefinitions=null,this.focusRowIndex=0,this.focusColumnIndex=0,this.rowsPlaceholder=null,this.generatedHeader=null,this.isUpdatingFocus=!1,this.pendingFocusUpdate=!1,this.rowindexUpdateQueued=!1,this.columnDefinitionsStale=!0,this.generatedGridTemplateColumns="",this.focusOnCell=(t,e,o)=>{if(this.rowElements.length===0){this.focusRowIndex=0,this.focusColumnIndex=0;return}let s=Math.max(0,Math.min(this.rowElements.length-1,t)),r=this.rowElements[s].querySelectorAll('[role="cell"], [role="gridcell"], [role="columnheader"], [role="rowheader"]'),a=Math.max(0,Math.min(r.length-1,e)),d=r[a];o&&this.scrollHeight!==this.clientHeight&&(s<this.focusRowIndex&&this.scrollTop>0||s>this.focusRowIndex&&this.scrollTop<this.scrollHeight-this.clientHeight)&&d.scrollIntoView({block:"center",inline:"center"}),d.focus()},this.onChildListChange=(t,e)=>{t&&t.length&&(t.forEach(o=>{o.addedNodes.forEach(s=>{s.nodeType===1&&s.getAttribute("role")==="row"&&(s.columnDefinitions=this.columnDefinitions)})}),this.queueRowIndexUpdate())},this.queueRowIndexUpdate=()=>{this.rowindexUpdateQueued||(this.rowindexUpdateQueued=!0,D.queueUpdate(this.updateRowIndexes))},this.updateRowIndexes=()=>{let t=this.gridTemplateColumns;if(t===void 0){if(this.generatedGridTemplateColumns===""&&this.rowElements.length>0){let e=this.rowElements[0];this.generatedGridTemplateColumns=new Array(e.cellElements.length).fill("1fr").join(" ")}t=this.generatedGridTemplateColumns}this.rowElements.forEach((e,o)=>{let s=e;s.rowIndex=o,s.gridTemplateColumns=t,this.columnDefinitionsStale&&(s.columnDefinitions=this.columnDefinitions)}),this.rowindexUpdateQueued=!1,this.columnDefinitionsStale=!1}}static generateTemplateColumns(t){let e="";return t.forEach(o=>{e=`${e}${e===""?"":" "}1fr`}),e}noTabbingChanged(){this.$fastController.isConnected&&(this.noTabbing?this.setAttribute("tabIndex","-1"):this.setAttribute("tabIndex",this.contains(document.activeElement)||this===document.activeElement?"-1":"0"))}generateHeaderChanged(){this.$fastController.isConnected&&this.toggleGeneratedHeader()}gridTemplateColumnsChanged(){this.$fastController.isConnected&&this.updateRowIndexes()}rowsDataChanged(){this.columnDefinitions===null&&this.rowsData.length>0&&(this.columnDefinitions=i.generateColumns(this.rowsData[0])),this.$fastController.isConnected&&this.toggleGeneratedHeader()}columnDefinitionsChanged(){if(this.columnDefinitions===null){this.generatedGridTemplateColumns="";return}this.generatedGridTemplateColumns=i.generateTemplateColumns(this.columnDefinitions),this.$fastController.isConnected&&(this.columnDefinitionsStale=!0,this.queueRowIndexUpdate())}headerCellItemTemplateChanged(){this.$fastController.isConnected&&this.generatedHeader!==null&&(this.generatedHeader.headerCellItemTemplate=this.headerCellItemTemplate)}focusRowIndexChanged(){this.$fastController.isConnected&&this.queueFocusUpdate()}focusColumnIndexChanged(){this.$fastController.isConnected&&this.queueFocusUpdate()}connectedCallback(){super.connectedCallback(),this.rowItemTemplate===void 0&&(this.rowItemTemplate=this.defaultRowItemTemplate),this.rowsPlaceholder=document.createComment(""),this.appendChild(this.rowsPlaceholder),this.toggleGeneratedHeader(),this.rowsRepeatBehavior=new qi(t=>t.rowsData,t=>t.rowItemTemplate,{positioning:!0}).createBehavior(this.rowsPlaceholder),this.$fastController.addBehaviors([this.rowsRepeatBehavior]),this.addEventListener("row-focused",this.handleRowFocus),this.addEventListener(wa,this.handleFocus),this.addEventListener(ci,this.handleKeydown),this.addEventListener(li,this.handleFocusOut),this.observer=new MutationObserver(this.onChildListChange),this.observer.observe(this,{childList:!0}),this.noTabbing&&this.setAttribute("tabindex","-1"),D.queueUpdate(this.queueRowIndexUpdate)}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("row-focused",this.handleRowFocus),this.removeEventListener(wa,this.handleFocus),this.removeEventListener(ci,this.handleKeydown),this.removeEventListener(li,this.handleFocusOut),this.observer.disconnect(),this.rowsPlaceholder=null,this.generatedHeader=null}handleRowFocus(t){this.isUpdatingFocus=!0;let e=t.target;this.focusRowIndex=this.rowElements.indexOf(e),this.focusColumnIndex=e.focusColumnIndex,this.setAttribute("tabIndex","-1"),this.isUpdatingFocus=!1}handleFocus(t){this.focusOnCell(this.focusRowIndex,this.focusColumnIndex,!0)}handleFocusOut(t){(t.relatedTarget===null||!this.contains(t.relatedTarget))&&this.setAttribute("tabIndex",this.noTabbing?"-1":"0")}handleKeydown(t){if(t.defaultPrevented)return;let e,o=this.rowElements.length-1,s=this.offsetHeight+this.scrollTop,n=this.rowElements[o];switch(t.key){case Ht:t.preventDefault(),this.focusOnCell(this.focusRowIndex-1,this.focusColumnIndex,!0);break;case zt:t.preventDefault(),this.focusOnCell(this.focusRowIndex+1,this.focusColumnIndex,!0);break;case Ch:if(t.preventDefault(),this.rowElements.length===0){this.focusOnCell(0,0,!1);break}if(this.focusRowIndex===0){this.focusOnCell(0,this.focusColumnIndex,!1);return}for(e=this.focusRowIndex-1,e;e>=0;e--){let r=this.rowElements[e];if(r.offsetTop<this.scrollTop){this.scrollTop=r.offsetTop+r.clientHeight-this.clientHeight;break}}this.focusOnCell(e,this.focusColumnIndex,!1);break;case kh:if(t.preventDefault(),this.rowElements.length===0){this.focusOnCell(0,0,!1);break}if(this.focusRowIndex>=o||n.offsetTop+n.offsetHeight<=s){this.focusOnCell(o,this.focusColumnIndex,!1);return}for(e=this.focusRowIndex+1,e;e<=o;e++){let r=this.rowElements[e];if(r.offsetTop+r.offsetHeight>s){let a=0;this.generateHeader===bo.sticky&&this.generatedHeader!==null&&(a=this.generatedHeader.clientHeight),this.scrollTop=r.offsetTop-a;break}}this.focusOnCell(e,this.focusColumnIndex,!1);break;case ne:t.ctrlKey&&(t.preventDefault(),this.focusOnCell(0,0,!0));break;case re:t.ctrlKey&&this.columnDefinitions!==null&&(t.preventDefault(),this.focusOnCell(this.rowElements.length-1,this.columnDefinitions.length-1,!0));break}}queueFocusUpdate(){this.isUpdatingFocus&&(this.contains(document.activeElement)||this===document.activeElement)||this.pendingFocusUpdate===!1&&(this.pendingFocusUpdate=!0,D.queueUpdate(()=>this.updateFocus()))}updateFocus(){this.pendingFocusUpdate=!1,this.focusOnCell(this.focusRowIndex,this.focusColumnIndex,!0)}toggleGeneratedHeader(){if(this.generatedHeader!==null&&(this.removeChild(this.generatedHeader),this.generatedHeader=null),this.generateHeader!==bo.none&&this.rowsData.length>0){let t=document.createElement(this.rowElementTag);this.generatedHeader=t,this.generatedHeader.columnDefinitions=this.columnDefinitions,this.generatedHeader.gridTemplateColumns=this.gridTemplateColumns,this.generatedHeader.rowType=this.generateHeader===bo.sticky?Ni.stickyHeader:Ni.header,(this.firstChild!==null||this.rowsPlaceholder!==null)&&this.insertBefore(t,this.firstChild!==null?this.firstChild:this.rowsPlaceholder);return}}};nt.generateColumns=i=>Object.getOwnPropertyNames(i).map((t,e)=>({columnDataKey:t,gridColumn:`${e}`}));l([c({attribute:"no-tabbing",mode:"boolean"})],nt.prototype,"noTabbing",void 0);l([c({attribute:"generate-header"})],nt.prototype,"generateHeader",void 0);l([c({attribute:"grid-template-columns"})],nt.prototype,"gridTemplateColumns",void 0);l([m],nt.prototype,"rowsData",void 0);l([m],nt.prototype,"columnDefinitions",void 0);l([m],nt.prototype,"rowItemTemplate",void 0);l([m],nt.prototype,"cellItemTemplate",void 0);l([m],nt.prototype,"headerCellItemTemplate",void 0);l([m],nt.prototype,"focusRowIndex",void 0);l([m],nt.prototype,"focusColumnIndex",void 0);l([m],nt.prototype,"defaultRowItemTemplate",void 0);l([m],nt.prototype,"rowElementTag",void 0);l([m],nt.prototype,"rowElements",void 0);var Lh=y`<template>${i=>i.rowData===null||i.columnDefinition===null||i.columnDefinition.columnDataKey===null?null:i.rowData[i.columnDefinition.columnDataKey]}</template>`,Vh=y`<template>${i=>i.columnDefinition===null?null:i.columnDefinition.title===void 0?i.columnDefinition.columnDataKey:i.columnDefinition.title}</template>`,qt=class extends O{constructor(){super(...arguments),this.cellType=ve.default,this.rowData=null,this.columnDefinition=null,this.isActiveCell=!1,this.customCellView=null,this.updateCellStyle=()=>{this.style.gridColumn=this.gridColumn}}cellTypeChanged(){this.$fastController.isConnected&&this.updateCellView()}gridColumnChanged(){this.$fastController.isConnected&&this.updateCellStyle()}columnDefinitionChanged(t,e){this.$fastController.isConnected&&this.updateCellView()}connectedCallback(){var t;super.connectedCallback(),this.addEventListener($a,this.handleFocusin),this.addEventListener(li,this.handleFocusout),this.addEventListener(ci,this.handleKeydown),this.style.gridColumn=`${((t=this.columnDefinition)===null||t===void 0?void 0:t.gridColumn)===void 0?0:this.columnDefinition.gridColumn}`,this.updateCellView(),this.updateCellStyle()}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener($a,this.handleFocusin),this.removeEventListener(li,this.handleFocusout),this.removeEventListener(ci,this.handleKeydown),this.disconnectCellView()}handleFocusin(t){if(!this.isActiveCell){switch(this.isActiveCell=!0,this.cellType){case ve.columnHeader:if(this.columnDefinition!==null&&this.columnDefinition.headerCellInternalFocusQueue!==!0&&typeof this.columnDefinition.headerCellFocusTargetCallback=="function"){let e=this.columnDefinition.headerCellFocusTargetCallback(this);e!==null&&e.focus()}break;default:if(this.columnDefinition!==null&&this.columnDefinition.cellInternalFocusQueue!==!0&&typeof this.columnDefinition.cellFocusTargetCallback=="function"){let e=this.columnDefinition.cellFocusTargetCallback(this);e!==null&&e.focus()}break}this.$emit("cell-focused",this)}}handleFocusout(t){this!==document.activeElement&&!this.contains(document.activeElement)&&(this.isActiveCell=!1)}handleKeydown(t){if(!(t.defaultPrevented||this.columnDefinition===null||this.cellType===ve.default&&this.columnDefinition.cellInternalFocusQueue!==!0||this.cellType===ve.columnHeader&&this.columnDefinition.headerCellInternalFocusQueue!==!0))switch(t.key){case fe:case $h:if(this.contains(document.activeElement)&&document.activeElement!==this)return;switch(this.cellType){case ve.columnHeader:if(this.columnDefinition.headerCellFocusTargetCallback!==void 0){let e=this.columnDefinition.headerCellFocusTargetCallback(this);e!==null&&e.focus(),t.preventDefault()}break;default:if(this.columnDefinition.cellFocusTargetCallback!==void 0){let e=this.columnDefinition.cellFocusTargetCallback(this);e!==null&&e.focus(),t.preventDefault()}break}break;case Si:this.contains(document.activeElement)&&document.activeElement!==this&&(this.focus(),t.preventDefault());break}}updateCellView(){if(this.disconnectCellView(),this.columnDefinition!==null)switch(this.cellType){case ve.columnHeader:this.columnDefinition.headerCellTemplate!==void 0?this.customCellView=this.columnDefinition.headerCellTemplate.render(this,this):this.customCellView=Vh.render(this,this);break;case void 0:case ve.rowHeader:case ve.default:this.columnDefinition.cellTemplate!==void 0?this.customCellView=this.columnDefinition.cellTemplate.render(this,this):this.customCellView=Lh.render(this,this);break}}disconnectCellView(){this.customCellView!==null&&(this.customCellView.dispose(),this.customCellView=null)}};l([c({attribute:"cell-type"})],qt.prototype,"cellType",void 0);l([c({attribute:"grid-column"})],qt.prototype,"gridColumn",void 0);l([m],qt.prototype,"rowData",void 0);l([m],qt.prototype,"columnDefinition",void 0);function zh(i){let t=i.tagFor(qt);return y`<${t} cell-type="${e=>e.isRowHeader?"rowheader":void 0}" grid-column="${(e,o)=>o.index+1}" :rowData="${(e,o)=>o.parent.rowData}" :columnDefinition="${e=>e}"></${t}>`}function Hh(i){let t=i.tagFor(qt);return y`<${t} cell-type="columnheader" grid-column="${(e,o)=>o.index+1}" :columnDefinition="${e=>e}"></${t}>`}var Ph=(i,t)=>{let e=zh(i),o=Hh(i);return y`<template role="row" class="${s=>s.rowType!=="default"?s.rowType:""}" :defaultCellItemTemplate="${e}" :defaultHeaderCellItemTemplate="${o}" ${hs({property:"cellElements",filter:ce('[role="cell"],[role="gridcell"],[role="columnheader"],[role="rowheader"]')})}><slot ${X("slottedCellElements")}></slot></template>`},Mh=(i,t)=>y`<template tabindex="-1" role="${e=>!e.cellType||e.cellType==="default"?"gridcell":e.cellType}" class=" ${e=>e.cellType==="columnheader"?"column-header":e.cellType==="rowheader"?"row-header":""} "><slot></slot></template>`,Nh=y`<div class="title" part="title" aria-label="${i=>i.dateFormatter.getDate(`${i.month}-2-${i.year}`,{month:"long",year:"numeric"})}"><span part="month">${i=>i.dateFormatter.getMonth(i.month)}</span><span part="year">${i=>i.dateFormatter.getYear(i.year)}</span></div>`,Bh=i=>{let t=i.tagFor(qt);return y`<${t} class="week-day" part="week-day" tabindex="-1" grid-column="${(e,o)=>o.index+1}" abbr="${e=>e.abbr}">${e=>e.text}</${t}>`},_h=(i,t)=>{let e=i.tagFor(qt);return y`<${e} class="${(o,s)=>s.parentContext.parent.getDayClassNames(o,t)}" part="day" tabindex="-1" role="gridcell" grid-column="${(o,s)=>s.index+1}" @click="${(o,s)=>s.parentContext.parent.handleDateSelect(s.event,o)}" @keydown="${(o,s)=>s.parentContext.parent.handleKeydown(s.event,o)}" aria-label="${(o,s)=>s.parentContext.parent.dateFormatter.getDate(`${o.month}-${o.day}-${o.year}`,{month:"long",day:"numeric"})}"><div class="date" part="${o=>t===`${o.month}-${o.day}-${o.year}`?"today":"date"}">${(o,s)=>s.parentContext.parent.dateFormatter.getDay(o.day)}</div><slot name="${o=>o.month}-${o=>o.day}-${o=>o.year}"></slot></${e}>`},jh=(i,t)=>{let e=i.tagFor(st);return y`<${e} class="week" part="week" role="row" role-type="default" grid-template-columns="1fr 1fr 1fr 1fr 1fr 1fr 1fr">${ti(o=>o,_h(i,t),{positioning:!0})}</${e}>`},Uh=(i,t)=>{let e=i.tagFor(nt),o=i.tagFor(st);return y`<${e} class="days interact" part="days" generate-header="none"><${o} class="week-days" part="week-days" role="row" row-type="header" grid-template-columns="1fr 1fr 1fr 1fr 1fr 1fr 1fr">${ti(s=>s.getWeekdayText(),Bh(i),{positioning:!0})}</${o}>${ti(s=>s.getDays(),jh(i,t))}</${e}>`},qh=i=>y`<div class="days" part="days"><div class="week-days" part="week-days">${ti(t=>t.getWeekdayText(),y`<div class="week-day" part="week-day" abbr="${t=>t.abbr}">${t=>t.text}</div>`)}</div>${ti(t=>t.getDays(),y`<div class="week">${ti(t=>t,y`<div class="${(t,e)=>e.parentContext.parent.getDayClassNames(t,i)}" part="day" aria-label="${(t,e)=>e.parentContext.parent.dateFormatter.getDate(`${t.month}-${t.day}-${t.year}`,{month:"long",day:"numeric"})}"><div class="date" part="${t=>i===`${t.month}-${t.day}-${t.year}`?"today":"date"}">${(t,e)=>e.parentContext.parent.dateFormatter.getDay(t.day)}</div><slot name="${t=>t.month}-${t=>t.day}-${t=>t.year}"></slot></div>`)}</div>`)}</div>`,Gh=(i,t)=>{var e;let o=new Date,s=`${o.getMonth()+1}-${o.getDate()}-${o.getFullYear()}`;return y`<template>${nh} ${t.title instanceof Function?t.title(i,t):(e=t.title)!==null&&e!==void 0?e:""}<slot></slot>${J(n=>n.readonly,qh(s),Uh(i,s))} ${sh}</template>`},Wh=(i,t)=>y`<slot></slot>`,No=class extends O{},Xh=(i,t)=>y`<template role="checkbox" aria-checked="${e=>e.checked}" aria-required="${e=>e.required}" aria-disabled="${e=>e.disabled}" aria-readonly="${e=>e.readOnly}" tabindex="${e=>e.disabled?null:0}" @keypress="${(e,o)=>e.keypressHandler(o.event)}" @click="${(e,o)=>e.clickHandler(o.event)}" class="${e=>e.readOnly?"readonly":""} ${e=>e.checked?"checked":""} ${e=>e.indeterminate?"indeterminate":""}"><div part="control" class="control"><slot name="checked-indicator">${t.checkedIndicator||""}</slot><slot name="indeterminate-indicator">${t.indeterminateIndicator||""}</slot></div><label part="label" class="${e=>e.defaultSlottedNodes&&e.defaultSlottedNodes.length?"label":"label label__hidden"}"><slot ${X("defaultSlottedNodes")}></slot></label></template>`,Dn=class extends O{},Rn=class extends kr(Dn){constructor(){super(...arguments),this.proxy=document.createElement("input")}},ui=class extends Rn{constructor(){super(),this.initialValue="on",this.indeterminate=!1,this.keypressHandler=t=>{if(!this.readOnly)switch(t.key){case qe:this.indeterminate&&(this.indeterminate=!1),this.checked=!this.checked;break}},this.clickHandler=t=>{!this.disabled&&!this.readOnly&&(this.indeterminate&&(this.indeterminate=!1),this.checked=!this.checked)},this.proxy.setAttribute("type","checkbox")}readOnlyChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.readOnly=this.readOnly)}};l([c({attribute:"readonly",mode:"boolean"})],ui.prototype,"readOnly",void 0);l([m],ui.prototype,"defaultSlottedNodes",void 0);l([m],ui.prototype,"indeterminate",void 0);function xl(i){return ai(i)&&(i.getAttribute("role")==="option"||i instanceof HTMLOptionElement)}var Vt=class extends O{constructor(t,e,o,s){super(),this.defaultSelected=!1,this.dirtySelected=!1,this.selected=this.defaultSelected,this.dirtyValue=!1,t&&(this.textContent=t),e&&(this.initialValue=e),o&&(this.defaultSelected=o),s&&(this.selected=s),this.proxy=new Option(`${this.textContent}`,this.initialValue,this.defaultSelected,this.selected),this.proxy.disabled=this.disabled}checkedChanged(t,e){if(typeof e=="boolean"){this.ariaChecked=e?"true":"false";return}this.ariaChecked=null}contentChanged(t,e){this.proxy instanceof HTMLOptionElement&&(this.proxy.textContent=this.textContent),this.$emit("contentchange",null,{bubbles:!0})}defaultSelectedChanged(){this.dirtySelected||(this.selected=this.defaultSelected,this.proxy instanceof HTMLOptionElement&&(this.proxy.selected=this.defaultSelected))}disabledChanged(t,e){this.ariaDisabled=this.disabled?"true":"false",this.proxy instanceof HTMLOptionElement&&(this.proxy.disabled=this.disabled)}selectedAttributeChanged(){this.defaultSelected=this.selectedAttribute,this.proxy instanceof HTMLOptionElement&&(this.proxy.defaultSelected=this.defaultSelected)}selectedChanged(){this.ariaSelected=this.selected?"true":"false",this.dirtySelected||(this.dirtySelected=!0),this.proxy instanceof HTMLOptionElement&&(this.proxy.selected=this.selected)}initialValueChanged(t,e){this.dirtyValue||(this.value=this.initialValue,this.dirtyValue=!1)}get label(){var t;return(t=this.value)!==null&&t!==void 0?t:this.text}get text(){var t,e;return(e=(t=this.textContent)===null||t===void 0?void 0:t.replace(/\s+/g," ").trim())!==null&&e!==void 0?e:""}set value(t){let e=`${t??""}`;this._value=e,this.dirtyValue=!0,this.proxy instanceof HTMLOptionElement&&(this.proxy.value=e),S.notify(this,"value")}get value(){var t;return S.track(this,"value"),(t=this._value)!==null&&t!==void 0?t:this.text}get form(){return this.proxy?this.proxy.form:null}};l([m],Vt.prototype,"checked",void 0);l([m],Vt.prototype,"content",void 0);l([m],Vt.prototype,"defaultSelected",void 0);l([c({mode:"boolean"})],Vt.prototype,"disabled",void 0);l([c({attribute:"selected",mode:"boolean"})],Vt.prototype,"selectedAttribute",void 0);l([m],Vt.prototype,"selected",void 0);l([c({attribute:"value",mode:"fromView"})],Vt.prototype,"initialValue",void 0);var ke=class{};l([m],ke.prototype,"ariaChecked",void 0);l([m],ke.prototype,"ariaPosInSet",void 0);l([m],ke.prototype,"ariaSelected",void 0);l([m],ke.prototype,"ariaSetSize",void 0);Y(ke,j);Y(Vt,pt,ke);var ft=class i extends O{constructor(){super(...arguments),this._options=[],this.selectedIndex=-1,this.selectedOptions=[],this.shouldSkipFocus=!1,this.typeaheadBuffer="",this.typeaheadExpired=!0,this.typeaheadTimeout=-1}get firstSelectedOption(){var t;return(t=this.selectedOptions[0])!==null&&t!==void 0?t:null}get hasSelectableOptions(){return this.options.length>0&&!this.options.every(t=>t.disabled)}get length(){var t,e;return(e=(t=this.options)===null||t===void 0?void 0:t.length)!==null&&e!==void 0?e:0}get options(){return S.track(this,"options"),this._options}set options(t){this._options=t,S.notify(this,"options")}get typeAheadExpired(){return this.typeaheadExpired}set typeAheadExpired(t){this.typeaheadExpired=t}clickHandler(t){let e=t.target.closest("option,[role=option]");if(e&&!e.disabled)return this.selectedIndex=this.options.indexOf(e),!0}focusAndScrollOptionIntoView(t=this.firstSelectedOption){this.contains(document.activeElement)&&t!==null&&(t.focus(),requestAnimationFrame(()=>{t.scrollIntoView({block:"nearest"})}))}focusinHandler(t){!this.shouldSkipFocus&&t.target===t.currentTarget&&(this.setSelectedOptions(),this.focusAndScrollOptionIntoView()),this.shouldSkipFocus=!1}getTypeaheadMatches(){let t=this.typeaheadBuffer.replace(/[.*+\-?^${}()|[\]\\]/g,"\\$&"),e=new RegExp(`^${t}`,"gi");return this.options.filter(o=>o.text.trim().match(e))}getSelectableIndex(t=this.selectedIndex,e){let o=t>e?-1:t<e?1:0,s=t+o,n=null;switch(o){case-1:{n=this.options.reduceRight((r,a,d)=>!r&&!a.disabled&&d<s?a:r,n);break}case 1:{n=this.options.reduce((r,a,d)=>!r&&!a.disabled&&d>s?a:r,n);break}}return this.options.indexOf(n)}handleChange(t,e){switch(e){case"selected":{i.slottedOptionFilter(t)&&(this.selectedIndex=this.options.indexOf(t)),this.setSelectedOptions();break}}}handleTypeAhead(t){this.typeaheadTimeout&&window.clearTimeout(this.typeaheadTimeout),this.typeaheadTimeout=window.setTimeout(()=>this.typeaheadExpired=!0,i.TYPE_AHEAD_TIMEOUT_MS),!(t.length>1)&&(this.typeaheadBuffer=`${this.typeaheadExpired?"":this.typeaheadBuffer}${t}`)}keydownHandler(t){if(this.disabled)return!0;this.shouldSkipFocus=!1;let e=t.key;switch(e){case ne:{t.shiftKey||(t.preventDefault(),this.selectFirstOption());break}case zt:{t.shiftKey||(t.preventDefault(),this.selectNextOption());break}case Ht:{t.shiftKey||(t.preventDefault(),this.selectPreviousOption());break}case re:{t.preventDefault(),this.selectLastOption();break}case us:return this.focusAndScrollOptionIntoView(),!0;case fe:case Si:return!0;case qe:if(this.typeaheadExpired)return!0;default:return e.length===1&&this.handleTypeAhead(`${e}`),!0}}mousedownHandler(t){return this.shouldSkipFocus=!this.contains(document.activeElement),!0}multipleChanged(t,e){this.ariaMultiSelectable=e?"true":null}selectedIndexChanged(t,e){var o;if(!this.hasSelectableOptions){this.selectedIndex=-1;return}if(!((o=this.options[this.selectedIndex])===null||o===void 0)&&o.disabled&&typeof t=="number"){let s=this.getSelectableIndex(t,e),n=s>-1?s:t;this.selectedIndex=n,e===n&&this.selectedIndexChanged(e,n);return}this.setSelectedOptions()}selectedOptionsChanged(t,e){var o;let s=e.filter(i.slottedOptionFilter);(o=this.options)===null||o===void 0||o.forEach(n=>{let r=S.getNotifier(n);r.unsubscribe(this,"selected"),n.selected=s.includes(n),r.subscribe(this,"selected")})}selectFirstOption(){var t,e;this.disabled||(this.selectedIndex=(e=(t=this.options)===null||t===void 0?void 0:t.findIndex(o=>!o.disabled))!==null&&e!==void 0?e:-1)}selectLastOption(){this.disabled||(this.selectedIndex=bh(this.options,t=>!t.disabled))}selectNextOption(){!this.disabled&&this.selectedIndex<this.options.length-1&&(this.selectedIndex+=1)}selectPreviousOption(){!this.disabled&&this.selectedIndex>0&&(this.selectedIndex=this.selectedIndex-1)}setDefaultSelectedOption(){var t,e;this.selectedIndex=(e=(t=this.options)===null||t===void 0?void 0:t.findIndex(o=>o.defaultSelected))!==null&&e!==void 0?e:-1}setSelectedOptions(){var t,e,o;!((t=this.options)===null||t===void 0)&&t.length&&(this.selectedOptions=[this.options[this.selectedIndex]],this.ariaActiveDescendant=(o=(e=this.firstSelectedOption)===null||e===void 0?void 0:e.id)!==null&&o!==void 0?o:"",this.focusAndScrollOptionIntoView())}slottedOptionsChanged(t,e){this.options=e.reduce((s,n)=>(xl(n)&&s.push(n),s),[]);let o=`${this.options.length}`;this.options.forEach((s,n)=>{s.id||(s.id=Wi("option-")),s.ariaPosInSet=`${n+1}`,s.ariaSetSize=o}),this.$fastController.isConnected&&(this.setSelectedOptions(),this.setDefaultSelectedOption())}typeaheadBufferChanged(t,e){if(this.$fastController.isConnected){let o=this.getTypeaheadMatches();if(o.length){let s=this.options.indexOf(o[0]);s>-1&&(this.selectedIndex=s)}this.typeaheadExpired=!1}}};ft.slottedOptionFilter=i=>xl(i)&&!i.hidden;ft.TYPE_AHEAD_TIMEOUT_MS=1e3;l([c({mode:"boolean"})],ft.prototype,"disabled",void 0);l([m],ft.prototype,"selectedIndex",void 0);l([m],ft.prototype,"selectedOptions",void 0);l([m],ft.prototype,"slottedOptions",void 0);l([m],ft.prototype,"typeaheadBuffer",void 0);var ee=class{};l([m],ee.prototype,"ariaActiveDescendant",void 0);l([m],ee.prototype,"ariaDisabled",void 0);l([m],ee.prototype,"ariaExpanded",void 0);l([m],ee.prototype,"ariaMultiSelectable",void 0);Y(ee,j);Y(ft,ee);var ei={above:"above",below:"below"},En=class extends ft{},On=class extends ge(En){constructor(){super(...arguments),this.proxy=document.createElement("input")}},vo={inline:"inline",list:"list",both:"both",none:"none"},Gt=class extends On{constructor(){super(...arguments),this._value="",this.filteredOptions=[],this.filter="",this.forcedPosition=!1,this.listboxId=Wi("listbox-"),this.maxHeight=0,this.open=!1}formResetCallback(){super.formResetCallback(),this.setDefaultSelectedOption(),this.updateValue()}validate(){super.validate(this.control)}get isAutocompleteInline(){return this.autocomplete===vo.inline||this.isAutocompleteBoth}get isAutocompleteList(){return this.autocomplete===vo.list||this.isAutocompleteBoth}get isAutocompleteBoth(){return this.autocomplete===vo.both}openChanged(){if(this.open){this.ariaControls=this.listboxId,this.ariaExpanded="true",this.setPositioning(),this.focusAndScrollOptionIntoView(),D.queueUpdate(()=>this.focus());return}this.ariaControls="",this.ariaExpanded="false"}get options(){return S.track(this,"options"),this.filteredOptions.length?this.filteredOptions:this._options}set options(t){this._options=t,S.notify(this,"options")}placeholderChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.placeholder=this.placeholder)}positionChanged(t,e){this.positionAttribute=e,this.setPositioning()}get value(){return S.track(this,"value"),this._value}set value(t){var e,o,s;let n=`${this._value}`;if(this.$fastController.isConnected&&this.options){let r=this.options.findIndex(u=>u.text.toLowerCase()===t.toLowerCase()),a=(e=this.options[this.selectedIndex])===null||e===void 0?void 0:e.text,d=(o=this.options[r])===null||o===void 0?void 0:o.text;this.selectedIndex=a!==d?r:this.selectedIndex,t=((s=this.firstSelectedOption)===null||s===void 0?void 0:s.text)||t}n!==t&&(this._value=t,super.valueChanged(n,t),S.notify(this,"value"))}clickHandler(t){if(!this.disabled){if(this.open){let e=t.target.closest("option,[role=option]");if(!e||e.disabled)return;this.selectedOptions=[e],this.control.value=e.text,this.clearSelectionRange(),this.updateValue(!0)}return this.open=!this.open,this.open&&this.control.focus(),!0}}connectedCallback(){super.connectedCallback(),this.forcedPosition=!!this.positionAttribute,this.value&&(this.initialValue=this.value)}disabledChanged(t,e){super.disabledChanged&&super.disabledChanged(t,e),this.ariaDisabled=this.disabled?"true":"false"}filterOptions(){(!this.autocomplete||this.autocomplete===vo.none)&&(this.filter="");let t=this.filter.toLowerCase();this.filteredOptions=this._options.filter(e=>e.text.toLowerCase().startsWith(this.filter.toLowerCase())),this.isAutocompleteList&&(!this.filteredOptions.length&&!t&&(this.filteredOptions=this._options),this._options.forEach(e=>{e.hidden=!this.filteredOptions.includes(e)}))}focusAndScrollOptionIntoView(){this.contains(document.activeElement)&&(this.control.focus(),this.firstSelectedOption&&requestAnimationFrame(()=>{var t;(t=this.firstSelectedOption)===null||t===void 0||t.scrollIntoView({block:"nearest"})}))}focusoutHandler(t){if(this.syncValue(),!this.open)return!0;let e=t.relatedTarget;if(this.isSameNode(e)){this.focus();return}(!this.options||!this.options.includes(e))&&(this.open=!1)}inputHandler(t){if(this.filter=this.control.value,this.filterOptions(),this.isAutocompleteInline||(this.selectedIndex=this.options.map(e=>e.text).indexOf(this.control.value)),t.inputType.includes("deleteContent")||!this.filter.length)return!0;this.isAutocompleteList&&!this.open&&(this.open=!0),this.isAutocompleteInline&&(this.filteredOptions.length?(this.selectedOptions=[this.filteredOptions[0]],this.selectedIndex=this.options.indexOf(this.firstSelectedOption),this.setInlineSelection()):this.selectedIndex=-1)}keydownHandler(t){let e=t.key;if(t.ctrlKey||t.shiftKey)return!0;switch(e){case"Enter":{this.syncValue(),this.isAutocompleteInline&&(this.filter=this.value),this.open=!1,this.clearSelectionRange();break}case"Escape":{if(this.isAutocompleteInline||(this.selectedIndex=-1),this.open){this.open=!1;break}this.value="",this.control.value="",this.filter="",this.filterOptions();break}case"Tab":{if(this.setInputToSelection(),!this.open)return!0;t.preventDefault(),this.open=!1;break}case"ArrowUp":case"ArrowDown":{if(this.filterOptions(),!this.open){this.open=!0;break}this.filteredOptions.length>0&&super.keydownHandler(t),this.isAutocompleteInline&&this.setInlineSelection();break}default:return!0}}keyupHandler(t){switch(t.key){case"ArrowLeft":case"ArrowRight":case"Backspace":case"Delete":case"Home":case"End":{this.filter=this.control.value,this.selectedIndex=-1,this.filterOptions();break}}}selectedIndexChanged(t,e){if(this.$fastController.isConnected){if(e=ps(-1,this.options.length-1,e),e!==this.selectedIndex){this.selectedIndex=e;return}super.selectedIndexChanged(t,e)}}selectPreviousOption(){!this.disabled&&this.selectedIndex>=0&&(this.selectedIndex=this.selectedIndex-1)}setDefaultSelectedOption(){if(this.$fastController.isConnected&&this.options){let t=this.options.findIndex(e=>e.getAttribute("selected")!==null||e.selected);this.selectedIndex=t,!this.dirtyValue&&this.firstSelectedOption&&(this.value=this.firstSelectedOption.text),this.setSelectedOptions()}}setInputToSelection(){this.firstSelectedOption&&(this.control.value=this.firstSelectedOption.text,this.control.focus())}setInlineSelection(){this.firstSelectedOption&&(this.setInputToSelection(),this.control.setSelectionRange(this.filter.length,this.control.value.length,"backward"))}syncValue(){var t;let e=this.selectedIndex>-1?(t=this.firstSelectedOption)===null||t===void 0?void 0:t.text:this.control.value;this.updateValue(this.value!==e)}setPositioning(){let t=this.getBoundingClientRect(),o=window.innerHeight-t.bottom;this.position=this.forcedPosition?this.positionAttribute:t.top>o?ei.above:ei.below,this.positionAttribute=this.forcedPosition?this.positionAttribute:this.position,this.maxHeight=this.position===ei.above?~~t.top:~~o}selectedOptionsChanged(t,e){this.$fastController.isConnected&&this._options.forEach(o=>{o.selected=e.includes(o)})}slottedOptionsChanged(t,e){super.slottedOptionsChanged(t,e),this.updateValue()}updateValue(t){var e;this.$fastController.isConnected&&(this.value=((e=this.firstSelectedOption)===null||e===void 0?void 0:e.text)||this.control.value,this.control.value=this.value),t&&this.$emit("change")}clearSelectionRange(){let t=this.control.value.length;this.control.setSelectionRange(t,t)}};l([c({attribute:"autocomplete",mode:"fromView"})],Gt.prototype,"autocomplete",void 0);l([m],Gt.prototype,"maxHeight",void 0);l([c({attribute:"open",mode:"boolean"})],Gt.prototype,"open",void 0);l([c],Gt.prototype,"placeholder",void 0);l([c({attribute:"position"})],Gt.prototype,"positionAttribute",void 0);l([m],Gt.prototype,"position",void 0);var pi=class{};l([m],pi.prototype,"ariaAutoComplete",void 0);l([m],pi.prototype,"ariaControls",void 0);Y(pi,ee);Y(Gt,pt,pi);var Yh=(i,t)=>y`<template aria-disabled="${e=>e.ariaDisabled}" autocomplete="${e=>e.autocomplete}" class="${e=>e.open?"open":""} ${e=>e.disabled?"disabled":""} ${e=>e.position}" ?open="${e=>e.open}" tabindex="${e=>e.disabled?null:"0"}" @click="${(e,o)=>e.clickHandler(o.event)}" @focusout="${(e,o)=>e.focusoutHandler(o.event)}" @keydown="${(e,o)=>e.keydownHandler(o.event)}"><div class="control" part="control">${Ct(i,t)}<slot name="control"><input aria-activedescendant="${e=>e.open?e.ariaActiveDescendant:null}" aria-autocomplete="${e=>e.ariaAutoComplete}" aria-controls="${e=>e.ariaControls}" aria-disabled="${e=>e.ariaDisabled}" aria-expanded="${e=>e.ariaExpanded}" aria-haspopup="listbox" class="selected-value" part="selected-value" placeholder="${e=>e.placeholder}" role="combobox" type="text" ?disabled="${e=>e.disabled}" :value="${e=>e.value}" @input="${(e,o)=>e.inputHandler(o.event)}" @keyup="${(e,o)=>e.keyupHandler(o.event)}" ${P("control")} /><div class="indicator" part="indicator" aria-hidden="true"><slot name="indicator">${t.indicator||""}</slot></div></slot>${kt(i,t)}</div><div class="listbox" id="${e=>e.listboxId}" part="listbox" role="listbox" ?disabled="${e=>e.disabled}" ?hidden="${e=>!e.open}" ${P("listbox")}><slot ${X({filter:ft.slottedOptionFilter,flatten:!0,property:"slottedOptions"})}></slot></div></template>`;function Bo(i){let t=i.parentElement;if(t)return t;{let e=i.getRootNode();if(e.host instanceof HTMLElement)return e.host}return null}function Qh(i,t){let e=t;for(;e!==null;){if(e===i)return!0;e=Bo(e)}return!1}var ae=document.createElement("div");function Zh(i){return i instanceof ds}var Yi=class{setProperty(t,e){D.queueUpdate(()=>this.target.setProperty(t,e))}removeProperty(t){D.queueUpdate(()=>this.target.removeProperty(t))}},An=class extends Yi{constructor(t){super();let e=new CSSStyleSheet;e[nl]=!0,this.target=e.cssRules[e.insertRule(":host{}")].style,t.$fastController.addStyles(dt.create([e]))}},Ln=class extends Yi{constructor(){super();let t=new CSSStyleSheet;this.target=t.cssRules[t.insertRule(":root{}")].style,document.adoptedStyleSheets=[...document.adoptedStyleSheets,t]}},Vn=class extends Yi{constructor(){super(),this.style=document.createElement("style"),document.head.appendChild(this.style);let{sheet:t}=this.style;if(t){let e=t.insertRule(":root{}",t.cssRules.length);this.target=t.cssRules[e].style}}},_o=class{constructor(t){this.store=new Map,this.target=null;let e=t.$fastController;this.style=document.createElement("style"),e.addStyles(this.style),S.getNotifier(e).subscribe(this,"isConnected"),this.handleChange(e,"isConnected")}targetChanged(){if(this.target!==null)for(let[t,e]of this.store.entries())this.target.setProperty(t,e)}setProperty(t,e){this.store.set(t,e),D.queueUpdate(()=>{this.target!==null&&this.target.setProperty(t,e)})}removeProperty(t){this.store.delete(t),D.queueUpdate(()=>{this.target!==null&&this.target.removeProperty(t)})}handleChange(t,e){let{sheet:o}=this.style;if(o){let s=o.insertRule(":host{}",o.cssRules.length);this.target=o.cssRules[s].style}else this.target=null}};l([m],_o.prototype,"target",void 0);var zn=class{constructor(t){this.target=t.style}setProperty(t,e){D.queueUpdate(()=>this.target.setProperty(t,e))}removeProperty(t){D.queueUpdate(()=>this.target.removeProperty(t))}},Be=class i{setProperty(t,e){i.properties[t]=e;for(let o of i.roots.values())Ke.getOrCreate(i.normalizeRoot(o)).setProperty(t,e)}removeProperty(t){delete i.properties[t];for(let e of i.roots.values())Ke.getOrCreate(i.normalizeRoot(e)).removeProperty(t)}static registerRoot(t){let{roots:e}=i;if(!e.has(t)){e.add(t);let o=Ke.getOrCreate(this.normalizeRoot(t));for(let s in i.properties)o.setProperty(s,i.properties[s])}}static unregisterRoot(t){let{roots:e}=i;if(e.has(t)){e.delete(t);let o=Ke.getOrCreate(i.normalizeRoot(t));for(let s in i.properties)o.removeProperty(s)}}static normalizeRoot(t){return t===ae?document:t}};Be.roots=new Set;Be.properties={};var Ys=new WeakMap,Jh=D.supportsAdoptedStyleSheets?An:_o,Ke=Object.freeze({getOrCreate(i){if(Ys.has(i))return Ys.get(i);let t;return i===ae?t=new Be:i instanceof Document?t=D.supportsAdoptedStyleSheets?new Ln:new Vn:Zh(i)?t=new Jh(i):t=new zn(i),Ys.set(i,t),t}}),jt=class i extends Ui{constructor(t){super(),this.subscribers=new WeakMap,this._appliedTo=new Set,this.name=t.name,t.cssCustomPropertyName!==null&&(this.cssCustomProperty=`--${t.cssCustomPropertyName}`,this.cssVar=`var(${this.cssCustomProperty})`),this.id=i.uniqueId(),i.tokensById.set(this.id,this)}get appliedTo(){return[...this._appliedTo]}static from(t){return new i({name:typeof t=="string"?t:t.name,cssCustomPropertyName:typeof t=="string"?t:t.cssCustomPropertyName===void 0?t.name:t.cssCustomPropertyName})}static isCSSDesignToken(t){return typeof t.cssCustomProperty=="string"}static isDerivedDesignTokenValue(t){return typeof t=="function"}static getTokenById(t){return i.tokensById.get(t)}getOrCreateSubscriberSet(t=this){return this.subscribers.get(t)||this.subscribers.set(t,new Set)&&this.subscribers.get(t)}createCSS(){return this.cssVar||""}getValueFor(t){let e=mt.getOrCreate(t).get(this);if(e!==void 0)return e;throw new Error(`Value could not be retrieved for token named "${this.name}". Ensure the value is set for ${t} or an ancestor of ${t}.`)}setValueFor(t,e){return this._appliedTo.add(t),e instanceof i&&(e=this.alias(e)),mt.getOrCreate(t).set(this,e),this}deleteValueFor(t){return this._appliedTo.delete(t),mt.existsFor(t)&&mt.getOrCreate(t).delete(this),this}withDefault(t){return this.setValueFor(ae,t),this}subscribe(t,e){let o=this.getOrCreateSubscriberSet(e);e&&!mt.existsFor(e)&&mt.getOrCreate(e),o.has(t)||o.add(t)}unsubscribe(t,e){let o=this.subscribers.get(e||this);o&&o.has(t)&&o.delete(t)}notify(t){let e=Object.freeze({token:this,target:t});this.subscribers.has(this)&&this.subscribers.get(this).forEach(o=>o.handleChange(e)),this.subscribers.has(t)&&this.subscribers.get(t).forEach(o=>o.handleChange(e))}alias(t){return e=>t.getValueFor(e)}};jt.uniqueId=(()=>{let i=0;return()=>(i++,i.toString(16))})();jt.tokensById=new Map;var Hn=class{startReflection(t,e){t.subscribe(this,e),this.handleChange({token:t,target:e})}stopReflection(t,e){t.unsubscribe(this,e),this.remove(t,e)}handleChange(t){let{token:e,target:o}=t;this.add(e,o)}add(t,e){Ke.getOrCreate(e).setProperty(t.cssCustomProperty,this.resolveCSSValue(mt.getOrCreate(e).get(t)))}remove(t,e){Ke.getOrCreate(e).removeProperty(t.cssCustomProperty)}resolveCSSValue(t){return t&&typeof t.createCSS=="function"?t.createCSS():t}},Pn=class{constructor(t,e,o){this.source=t,this.token=e,this.node=o,this.dependencies=new Set,this.observer=S.binding(t,this,!1),this.observer.handleChange=this.observer.call,this.handleChange()}disconnect(){this.observer.disconnect()}handleChange(){this.node.store.set(this.token,this.observer.observe(this.node.target,Pi))}},Mn=class{constructor(){this.values=new Map}set(t,e){this.values.get(t)!==e&&(this.values.set(t,e),S.getNotifier(this).notify(t.id))}get(t){return S.track(this,t.id),this.values.get(t)}delete(t){this.values.delete(t)}all(){return this.values.entries()}},Li=new WeakMap,Vi=new WeakMap,mt=class i{constructor(t){this.target=t,this.store=new Mn,this.children=[],this.assignedValues=new Map,this.reflecting=new Set,this.bindingObservers=new Map,this.tokenValueChangeHandler={handleChange:(e,o)=>{let s=jt.getTokenById(o);s&&(s.notify(this.target),this.updateCSSTokenReflection(e,s))}},Li.set(t,this),S.getNotifier(this.store).subscribe(this.tokenValueChangeHandler),t instanceof ds?t.$fastController.addBehaviors([this]):t.isConnected&&this.bind()}static getOrCreate(t){return Li.get(t)||new i(t)}static existsFor(t){return Li.has(t)}static findParent(t){if(ae!==t.target){let e=Bo(t.target);for(;e!==null;){if(Li.has(e))return Li.get(e);e=Bo(e)}return i.getOrCreate(ae)}return null}static findClosestAssignedNode(t,e){let o=e;do{if(o.has(t))return o;o=o.parent?o.parent:o.target!==ae?i.getOrCreate(ae):null}while(o!==null);return null}get parent(){return Vi.get(this)||null}updateCSSTokenReflection(t,e){if(jt.isCSSDesignToken(e)){let o=this.parent,s=this.isReflecting(e);if(o){let n=o.get(e),r=t.get(e);n!==r&&!s?this.reflectToCSS(e):n===r&&s&&this.stopReflectToCSS(e)}else s||this.reflectToCSS(e)}}has(t){return this.assignedValues.has(t)}get(t){let e=this.store.get(t);if(e!==void 0)return e;let o=this.getRaw(t);if(o!==void 0)return this.hydrate(t,o),this.get(t)}getRaw(t){var e;return this.assignedValues.has(t)?this.assignedValues.get(t):(e=i.findClosestAssignedNode(t,this))===null||e===void 0?void 0:e.getRaw(t)}set(t,e){jt.isDerivedDesignTokenValue(this.assignedValues.get(t))&&this.tearDownBindingObserver(t),this.assignedValues.set(t,e),jt.isDerivedDesignTokenValue(e)?this.setupBindingObserver(t,e):this.store.set(t,e)}delete(t){this.assignedValues.delete(t),this.tearDownBindingObserver(t);let e=this.getRaw(t);e?this.hydrate(t,e):this.store.delete(t)}bind(){let t=i.findParent(this);t&&t.appendChild(this);for(let e of this.assignedValues.keys())e.notify(this.target)}unbind(){this.parent&&Vi.get(this).removeChild(this)}appendChild(t){t.parent&&Vi.get(t).removeChild(t);let e=this.children.filter(o=>t.contains(o));Vi.set(t,this),this.children.push(t),e.forEach(o=>t.appendChild(o)),S.getNotifier(this.store).subscribe(t);for(let[o,s]of this.store.all())t.hydrate(o,this.bindingObservers.has(o)?this.getRaw(o):s)}removeChild(t){let e=this.children.indexOf(t);return e!==-1&&this.children.splice(e,1),S.getNotifier(this.store).unsubscribe(t),t.parent===this?Vi.delete(t):!1}contains(t){return Qh(this.target,t.target)}reflectToCSS(t){this.isReflecting(t)||(this.reflecting.add(t),i.cssCustomPropertyReflector.startReflection(t,this.target))}stopReflectToCSS(t){this.isReflecting(t)&&(this.reflecting.delete(t),i.cssCustomPropertyReflector.stopReflection(t,this.target))}isReflecting(t){return this.reflecting.has(t)}handleChange(t,e){let o=jt.getTokenById(e);o&&(this.hydrate(o,this.getRaw(o)),this.updateCSSTokenReflection(this.store,o))}hydrate(t,e){if(!this.has(t)){let o=this.bindingObservers.get(t);jt.isDerivedDesignTokenValue(e)?o?o.source!==e&&(this.tearDownBindingObserver(t),this.setupBindingObserver(t,e)):this.setupBindingObserver(t,e):(o&&this.tearDownBindingObserver(t),this.store.set(t,e))}}setupBindingObserver(t,e){let o=new Pn(e,t,this);return this.bindingObservers.set(t,o),o}tearDownBindingObserver(t){return this.bindingObservers.has(t)?(this.bindingObservers.get(t).disconnect(),this.bindingObservers.delete(t),!0):!1}};mt.cssCustomPropertyReflector=new Hn;l([m],mt.prototype,"children",void 0);function Kh(i){return jt.from(i)}var _=Object.freeze({create:Kh,notifyConnection(i){return!i.isConnected||!mt.existsFor(i)?!1:(mt.getOrCreate(i).bind(),!0)},notifyDisconnection(i){return i.isConnected||!mt.existsFor(i)?!1:(mt.getOrCreate(i).unbind(),!0)},registerRoot(i=ae){Be.registerRoot(i)},unregisterRoot(i=ae){Be.unregisterRoot(i)}}),Qs=Object.freeze({definitionCallbackOnly:null,ignoreDuplicate:Symbol()}),Zs=new Map,Eo=new Map,ii=null,zi=Z.createInterface(i=>i.cachedCallback(t=>(ii===null&&(ii=new jo(null,t)),ii))),wl=Object.freeze({tagFor(i){return Eo.get(i)},responsibleFor(i){let t=i.$$designSystem$$;return t||Z.findResponsibleContainer(i).get(zi)},getOrCreate(i){if(!i)return ii===null&&(ii=Z.getOrCreateDOMContainer().get(zi)),ii;let t=i.$$designSystem$$;if(t)return t;let e=Z.getOrCreateDOMContainer(i);if(e.has(zi,!1))return e.get(zi);{let o=new jo(i,e);return e.register(Gi.instance(zi,o)),o}}});function tu(i,t,e){return typeof i=="string"?{name:i,type:t,callback:e}:i}var jo=class{constructor(t,e){this.owner=t,this.container=e,this.designTokensInitialized=!1,this.prefix="fast",this.shadowRootMode=void 0,this.disambiguate=()=>Qs.definitionCallbackOnly,t!==null&&(t.$$designSystem$$=this)}withPrefix(t){return this.prefix=t,this}withShadowRootMode(t){return this.shadowRootMode=t,this}withElementDisambiguation(t){return this.disambiguate=t,this}withDesignTokenRoot(t){return this.designTokenRoot=t,this}register(...t){let e=this.container,o=[],s=this.disambiguate,n=this.shadowRootMode,r={elementPrefix:this.prefix,tryDefineElement(a,d,u){let p=tu(a,d,u),{name:f,callback:v,baseClass:T}=p,{type:A}=p,N=f,U=Zs.get(N),Ot=!0;for(;U;){let lt=s(N,A,U);switch(lt){case Qs.ignoreDuplicate:return;case Qs.definitionCallbackOnly:Ot=!1,U=void 0;break;default:N=lt,U=Zs.get(N);break}}Ot&&((Eo.has(A)||A===O)&&(A=class extends A{}),Zs.set(N,A),Eo.set(A,N),T&&Eo.set(T,N)),o.push(new Nn(e,N,A,n,v,Ot))}};this.designTokensInitialized||(this.designTokensInitialized=!0,this.designTokenRoot!==null&&_.registerRoot(this.designTokenRoot)),e.registerWithContext(r,...t);for(let a of o)a.callback(a),a.willDefine&&a.definition!==null&&a.definition.define();return this}},Nn=class{constructor(t,e,o,s,n,r){this.container=t,this.name=e,this.type=o,this.shadowRootMode=s,this.callback=n,this.willDefine=r,this.definition=null}definePresentation(t){vl.define(this.name,t,this.container)}defineElement(t){this.definition=new ri(this.type,Object.assign(Object.assign({},t),{name:this.name}))}tagFor(t){return wl.tagFor(t)}},eu=(i,t)=>y`<div class="positioning-region" part="positioning-region">${J(e=>e.modal,y`<div class="overlay" part="overlay" role="presentation" @click="${e=>e.dismiss()}"></div>`)}<div role="dialog" tabindex="-1" class="control" part="control" aria-modal="${e=>e.modal}" aria-describedby="${e=>e.ariaDescribedby}" aria-labelledby="${e=>e.ariaLabelledby}" aria-label="${e=>e.ariaLabel}" ${P("dialog")}><slot></slot></div></div>`;var $l=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])',"details>summary:first-of-type","details"],iu=$l.join(","),Uo=typeof Element>"u"?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector,ou=function(t){return t.contentEditable==="true"},su=function(t){var e=parseInt(t.getAttribute("tabindex"),10);return isNaN(e)?ou(t)||(t.nodeName==="AUDIO"||t.nodeName==="VIDEO"||t.nodeName==="DETAILS")&&t.getAttribute("tabindex")===null?0:t.tabIndex:e},kl=function(t){return t.tagName==="INPUT"},nu=function(t){return kl(t)&&t.type==="hidden"},ru=function(t){var e=t.tagName==="DETAILS"&&Array.prototype.slice.apply(t.children).some(function(o){return o.tagName==="SUMMARY"});return e},au=function(t,e){for(var o=0;o<t.length;o++)if(t[o].checked&&t[o].form===e)return t[o]},lu=function(t){if(!t.name)return!0;var e=t.form||t.ownerDocument,o=function(a){return e.querySelectorAll('input[type="radio"][name="'+a+'"]')},s;if(typeof window<"u"&&typeof window.CSS<"u"&&typeof window.CSS.escape=="function")s=o(window.CSS.escape(t.name));else try{s=o(t.name)}catch(r){return console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s",r.message),!1}var n=au(s,t.form);return!n||n===t},cu=function(t){return kl(t)&&t.type==="radio"},du=function(t){return cu(t)&&!lu(t)},hu=function(t,e){if(getComputedStyle(t).visibility==="hidden")return!0;var o=Uo.call(t,"details>summary:first-of-type"),s=o?t.parentElement:t;if(Uo.call(s,"details:not([open]) *"))return!0;if(!e||e==="full")for(;t;){if(getComputedStyle(t).display==="none")return!0;t=t.parentElement}else if(e==="non-zero-area"){var n=t.getBoundingClientRect(),r=n.width,a=n.height;return r===0&&a===0}return!1},Cl=function(t,e){return!(e.disabled||nu(e)||hu(e,t.displayCheck)||ru(e))},uu=function(t,e){return!(!Cl(t,e)||du(e)||su(e)<0)},Ea=function(t,e){if(e=e||{},!t)throw new Error("No node provided");return Uo.call(t,iu)===!1?!1:uu(e,t)},pu=$l.concat("iframe").join(","),Oa=function(t,e){if(e=e||{},!t)throw new Error("No node provided");return Uo.call(t,pu)===!1?!1:Cl(e,t)},he=class i extends O{constructor(){super(...arguments),this.modal=!0,this.hidden=!1,this.trapFocus=!0,this.trapFocusChanged=()=>{this.$fastController.isConnected&&this.updateTrapFocus()},this.isTrappingFocus=!1,this.handleDocumentKeydown=t=>{if(!t.defaultPrevented&&!this.hidden)switch(t.key){case Si:this.dismiss(),t.preventDefault();break;case us:this.handleTabKeyDown(t);break}},this.handleDocumentFocus=t=>{!t.defaultPrevented&&this.shouldForceFocus(t.target)&&(this.focusFirstElement(),t.preventDefault())},this.handleTabKeyDown=t=>{if(!this.trapFocus||this.hidden)return;let e=this.getTabQueueBounds();if(e.length!==0){if(e.length===1){e[0].focus(),t.preventDefault();return}t.shiftKey&&t.target===e[0]?(e[e.length-1].focus(),t.preventDefault()):!t.shiftKey&&t.target===e[e.length-1]&&(e[0].focus(),t.preventDefault())}},this.getTabQueueBounds=()=>{let t=[];return i.reduceTabbableItems(t,this)},this.focusFirstElement=()=>{let t=this.getTabQueueBounds();t.length>0?t[0].focus():this.dialog instanceof HTMLElement&&this.dialog.focus()},this.shouldForceFocus=t=>this.isTrappingFocus&&!this.contains(t),this.shouldTrapFocus=()=>this.trapFocus&&!this.hidden,this.updateTrapFocus=t=>{let e=t===void 0?this.shouldTrapFocus():t;e&&!this.isTrappingFocus?(this.isTrappingFocus=!0,document.addEventListener("focusin",this.handleDocumentFocus),D.queueUpdate(()=>{this.shouldForceFocus(document.activeElement)&&this.focusFirstElement()})):!e&&this.isTrappingFocus&&(this.isTrappingFocus=!1,document.removeEventListener("focusin",this.handleDocumentFocus))}}dismiss(){this.$emit("dismiss"),this.$emit("cancel")}show(){this.hidden=!1}hide(){this.hidden=!0,this.$emit("close")}connectedCallback(){super.connectedCallback(),document.addEventListener("keydown",this.handleDocumentKeydown),this.notifier=S.getNotifier(this),this.notifier.subscribe(this,"hidden"),this.updateTrapFocus()}disconnectedCallback(){super.disconnectedCallback(),document.removeEventListener("keydown",this.handleDocumentKeydown),this.updateTrapFocus(!1),this.notifier.unsubscribe(this,"hidden")}handleChange(t,e){switch(e){case"hidden":this.updateTrapFocus();break}}static reduceTabbableItems(t,e){return e.getAttribute("tabindex")==="-1"?t:Ea(e)||i.isFocusableFastElement(e)&&i.hasTabbableShadow(e)?(t.push(e),t):e.childElementCount?t.concat(Array.from(e.children).reduce(i.reduceTabbableItems,[])):t}static isFocusableFastElement(t){var e,o;return!!(!((o=(e=t.$fastController)===null||e===void 0?void 0:e.definition.shadowOptions)===null||o===void 0)&&o.delegatesFocus)}static hasTabbableShadow(t){var e,o;return Array.from((o=(e=t.shadowRoot)===null||e===void 0?void 0:e.querySelectorAll("*"))!==null&&o!==void 0?o:[]).some(s=>Ea(s))}};l([c({mode:"boolean"})],he.prototype,"modal",void 0);l([c({mode:"boolean"})],he.prototype,"hidden",void 0);l([c({attribute:"trap-focus",mode:"boolean"})],he.prototype,"trapFocus",void 0);l([c({attribute:"aria-describedby"})],he.prototype,"ariaDescribedby",void 0);l([c({attribute:"aria-labelledby"})],he.prototype,"ariaLabelledby",void 0);l([c({attribute:"aria-label"})],he.prototype,"ariaLabel",void 0);var fu=(i,t)=>y`<template role="${e=>e.role}" aria-orientation="${e=>e.orientation}"></template>`,gu={separator:"separator",presentation:"presentation"},fi=class extends O{constructor(){super(...arguments),this.role=gu.separator,this.orientation=it.horizontal}};l([c],fi.prototype,"role",void 0);l([c],fi.prototype,"orientation",void 0);var Bn={next:"next",previous:"previous"},mu=(i,t)=>y`<template role="button" aria-disabled="${e=>e.disabled?!0:void 0}" tabindex="${e=>e.hiddenFromAT?-1:0}" class="${e=>e.direction} ${e=>e.disabled?"disabled":""}" @keyup="${(e,o)=>e.keyupHandler(o.event)}">${J(e=>e.direction===Bn.next,y`<span part="next" class="next"><slot name="next">${t.next||""}</slot></span>`)} ${J(e=>e.direction===Bn.previous,y`<span part="previous" class="previous"><slot name="previous">${t.previous||""}</slot></span>`)}</template>`,gi=class extends O{constructor(){super(...arguments),this.hiddenFromAT=!0,this.direction=Bn.next}keyupHandler(t){if(!this.hiddenFromAT){let e=t.key;(e==="Enter"||e==="Space")&&this.$emit("click",t),e==="Escape"&&this.blur()}}};l([c({mode:"boolean"})],gi.prototype,"disabled",void 0);l([c({attribute:"aria-hidden",converter:io})],gi.prototype,"hiddenFromAT",void 0);l([c],gi.prototype,"direction",void 0);var bu=(i,t)=>y`<template aria-checked="${e=>e.ariaChecked}" aria-disabled="${e=>e.ariaDisabled}" aria-posinset="${e=>e.ariaPosInSet}" aria-selected="${e=>e.ariaSelected}" aria-setsize="${e=>e.ariaSetSize}" class="${e=>[e.checked&&"checked",e.selected&&"selected",e.disabled&&"disabled"].filter(Boolean).join(" ")}" role="option">${Ct(i,t)}<span class="content" part="content"><slot ${X("content")}></slot></span>${kt(i,t)}</template>`,_e=class extends ft{constructor(){super(...arguments),this.activeIndex=-1,this.rangeStartIndex=-1}get activeOption(){return this.options[this.activeIndex]}get checkedOptions(){var t;return(t=this.options)===null||t===void 0?void 0:t.filter(e=>e.checked)}get firstSelectedOptionIndex(){return this.options.indexOf(this.firstSelectedOption)}activeIndexChanged(t,e){var o,s;this.ariaActiveDescendant=(s=(o=this.options[e])===null||o===void 0?void 0:o.id)!==null&&s!==void 0?s:"",this.focusAndScrollOptionIntoView()}checkActiveIndex(){if(!this.multiple)return;let t=this.activeOption;t&&(t.checked=!0)}checkFirstOption(t=!1){t?(this.rangeStartIndex===-1&&(this.rangeStartIndex=this.activeIndex+1),this.options.forEach((e,o)=>{e.checked=mo(o,this.rangeStartIndex)})):this.uncheckAllOptions(),this.activeIndex=0,this.checkActiveIndex()}checkLastOption(t=!1){t?(this.rangeStartIndex===-1&&(this.rangeStartIndex=this.activeIndex),this.options.forEach((e,o)=>{e.checked=mo(o,this.rangeStartIndex,this.options.length)})):this.uncheckAllOptions(),this.activeIndex=this.options.length-1,this.checkActiveIndex()}connectedCallback(){super.connectedCallback(),this.addEventListener("focusout",this.focusoutHandler)}disconnectedCallback(){this.removeEventListener("focusout",this.focusoutHandler),super.disconnectedCallback()}checkNextOption(t=!1){t?(this.rangeStartIndex===-1&&(this.rangeStartIndex=this.activeIndex),this.options.forEach((e,o)=>{e.checked=mo(o,this.rangeStartIndex,this.activeIndex+1)})):this.uncheckAllOptions(),this.activeIndex+=this.activeIndex<this.options.length-1?1:0,this.checkActiveIndex()}checkPreviousOption(t=!1){t?(this.rangeStartIndex===-1&&(this.rangeStartIndex=this.activeIndex),this.checkedOptions.length===1&&(this.rangeStartIndex+=1),this.options.forEach((e,o)=>{e.checked=mo(o,this.activeIndex,this.rangeStartIndex)})):this.uncheckAllOptions(),this.activeIndex-=this.activeIndex>0?1:0,this.checkActiveIndex()}clickHandler(t){var e;if(!this.multiple)return super.clickHandler(t);let o=(e=t.target)===null||e===void 0?void 0:e.closest("[role=option]");if(!(!o||o.disabled))return this.uncheckAllOptions(),this.activeIndex=this.options.indexOf(o),this.checkActiveIndex(),this.toggleSelectedForAllCheckedOptions(),!0}focusAndScrollOptionIntoView(){super.focusAndScrollOptionIntoView(this.activeOption)}focusinHandler(t){if(!this.multiple)return super.focusinHandler(t);!this.shouldSkipFocus&&t.target===t.currentTarget&&(this.uncheckAllOptions(),this.activeIndex===-1&&(this.activeIndex=this.firstSelectedOptionIndex!==-1?this.firstSelectedOptionIndex:0),this.checkActiveIndex(),this.setSelectedOptions(),this.focusAndScrollOptionIntoView()),this.shouldSkipFocus=!1}focusoutHandler(t){this.multiple&&this.uncheckAllOptions()}keydownHandler(t){if(!this.multiple)return super.keydownHandler(t);if(this.disabled)return!0;let{key:e,shiftKey:o}=t;switch(this.shouldSkipFocus=!1,e){case ne:{this.checkFirstOption(o);return}case zt:{this.checkNextOption(o);return}case Ht:{this.checkPreviousOption(o);return}case re:{this.checkLastOption(o);return}case us:return this.focusAndScrollOptionIntoView(),!0;case Si:return this.uncheckAllOptions(),this.checkActiveIndex(),!0;case qe:if(t.preventDefault(),this.typeAheadExpired){this.toggleSelectedForAllCheckedOptions();return}default:return e.length===1&&this.handleTypeAhead(`${e}`),!0}}mousedownHandler(t){if(t.offsetX>=0&&t.offsetX<=this.scrollWidth)return super.mousedownHandler(t)}multipleChanged(t,e){var o;this.ariaMultiSelectable=e?"true":null,(o=this.options)===null||o===void 0||o.forEach(s=>{s.checked=e?!1:void 0}),this.setSelectedOptions()}setSelectedOptions(){if(!this.multiple){super.setSelectedOptions();return}this.$fastController.isConnected&&this.options&&(this.selectedOptions=this.options.filter(t=>t.selected),this.focusAndScrollOptionIntoView())}sizeChanged(t,e){var o;let s=Math.max(0,parseInt((o=e?.toFixed())!==null&&o!==void 0?o:"",10));s!==e&&D.queueUpdate(()=>{this.size=s})}toggleSelectedForAllCheckedOptions(){let t=this.checkedOptions.filter(o=>!o.disabled),e=!t.every(o=>o.selected);t.forEach(o=>o.selected=e),this.selectedIndex=this.options.indexOf(t[t.length-1]),this.setSelectedOptions()}typeaheadBufferChanged(t,e){if(!this.multiple){super.typeaheadBufferChanged(t,e);return}if(this.$fastController.isConnected){let o=this.getTypeaheadMatches(),s=this.options.indexOf(o[0]);s>-1&&(this.activeIndex=s,this.uncheckAllOptions(),this.checkActiveIndex()),this.typeAheadExpired=!1}}uncheckAllOptions(t=!1){this.options.forEach(e=>e.checked=this.multiple?!1:void 0),t||(this.rangeStartIndex=-1)}};l([m],_e.prototype,"activeIndex",void 0);l([c({mode:"boolean"})],_e.prototype,"multiple",void 0);l([c({converter:k})],_e.prototype,"size",void 0);var vu=(i,t)=>y`<template aria-activedescendant="${e=>e.ariaActiveDescendant}" aria-multiselectable="${e=>e.ariaMultiSelectable}" class="listbox" role="listbox" tabindex="${e=>e.disabled?null:"0"}" @click="${(e,o)=>e.clickHandler(o.event)}" @focusin="${(e,o)=>e.focusinHandler(o.event)}" @keydown="${(e,o)=>e.keydownHandler(o.event)}" @mousedown="${(e,o)=>e.mousedownHandler(o.event)}"><slot ${X({filter:_e.slottedOptionFilter,flatten:!0,property:"slottedOptions"})}></slot></template>`,bt={menuitem:"menuitem",menuitemcheckbox:"menuitemcheckbox",menuitemradio:"menuitemradio"},yu={[bt.menuitem]:"menuitem",[bt.menuitemcheckbox]:"menuitemcheckbox",[bt.menuitemradio]:"menuitemradio"},wt=class extends O{constructor(){super(...arguments),this.role=bt.menuitem,this.hasSubmenu=!1,this.currentDirection=G.ltr,this.focusSubmenuOnLoad=!1,this.handleMenuItemKeyDown=t=>{if(t.defaultPrevented)return!1;switch(t.key){case fe:case qe:return this.invoke(),!1;case $e:return this.expandAndFocus(),!1;case we:if(this.expanded)return this.expanded=!1,this.focus(),!1}return!0},this.handleMenuItemClick=t=>(t.defaultPrevented||this.disabled||this.invoke(),!1),this.submenuLoaded=()=>{this.focusSubmenuOnLoad&&(this.focusSubmenuOnLoad=!1,this.hasSubmenu&&(this.submenu.focus(),this.setAttribute("tabindex","-1")))},this.handleMouseOver=t=>(this.disabled||!this.hasSubmenu||this.expanded||(this.expanded=!0),!1),this.handleMouseOut=t=>(!this.expanded||this.contains(document.activeElement)||(this.expanded=!1),!1),this.expandAndFocus=()=>{this.hasSubmenu&&(this.focusSubmenuOnLoad=!0,this.expanded=!0)},this.invoke=()=>{if(!this.disabled)switch(this.role){case bt.menuitemcheckbox:this.checked=!this.checked;break;case bt.menuitem:this.updateSubmenu(),this.hasSubmenu?this.expandAndFocus():this.$emit("change");break;case bt.menuitemradio:this.checked||(this.checked=!0);break}},this.updateSubmenu=()=>{this.submenu=this.domChildren().find(t=>t.getAttribute("role")==="menu"),this.hasSubmenu=this.submenu!==void 0}}expandedChanged(t){if(this.$fastController.isConnected){if(this.submenu===void 0)return;this.expanded===!1?this.submenu.collapseExpandedItem():this.currentDirection=Pe(this),this.$emit("expanded-change",this,{bubbles:!1})}}checkedChanged(t,e){this.$fastController.isConnected&&this.$emit("change")}connectedCallback(){super.connectedCallback(),D.queueUpdate(()=>{this.updateSubmenu()}),this.startColumnCount||(this.startColumnCount=1),this.observer=new MutationObserver(this.updateSubmenu)}disconnectedCallback(){super.disconnectedCallback(),this.submenu=void 0,this.observer!==void 0&&(this.observer.disconnect(),this.observer=void 0)}domChildren(){return Array.from(this.children).filter(t=>!t.hasAttribute("hidden"))}};l([c({mode:"boolean"})],wt.prototype,"disabled",void 0);l([c({mode:"boolean"})],wt.prototype,"expanded",void 0);l([m],wt.prototype,"startColumnCount",void 0);l([c],wt.prototype,"role",void 0);l([c({mode:"boolean"})],wt.prototype,"checked",void 0);l([m],wt.prototype,"submenuRegion",void 0);l([m],wt.prototype,"hasSubmenu",void 0);l([m],wt.prototype,"currentDirection",void 0);l([m],wt.prototype,"submenu",void 0);Y(wt,pt);var xu=(i,t)=>y`<template role="${e=>e.role}" aria-haspopup="${e=>e.hasSubmenu?"menu":void 0}" aria-checked="${e=>e.role!==bt.menuitem?e.checked:void 0}" aria-disabled="${e=>e.disabled}" aria-expanded="${e=>e.expanded}" @keydown="${(e,o)=>e.handleMenuItemKeyDown(o.event)}" @click="${(e,o)=>e.handleMenuItemClick(o.event)}" @mouseover="${(e,o)=>e.handleMouseOver(o.event)}" @mouseout="${(e,o)=>e.handleMouseOut(o.event)}" class="${e=>e.disabled?"disabled":""} ${e=>e.expanded?"expanded":""} ${e=>`indent-${e.startColumnCount}`}">${J(e=>e.role===bt.menuitemcheckbox,y`<div part="input-container" class="input-container"><span part="checkbox" class="checkbox"><slot name="checkbox-indicator">${t.checkboxIndicator||""}</slot></span></div>`)} ${J(e=>e.role===bt.menuitemradio,y`<div part="input-container" class="input-container"><span part="radio" class="radio"><slot name="radio-indicator">${t.radioIndicator||""}</slot></span></div>`)}</div>${Ct(i,t)}<span class="content" part="content"><slot></slot></span>${kt(i,t)} ${J(e=>e.hasSubmenu,y`<div part="expand-collapse-glyph-container" class="expand-collapse-glyph-container"><span part="expand-collapse" class="expand-collapse"><slot name="expand-collapse-indicator">${t.expandCollapseGlyph||""}</slot></span></div>`)} ${J(e=>e.expanded,y`<${i.tagFor(R)} :anchorElement="${e=>e}" vertical-positioning-mode="dynamic" vertical-default-position="bottom" vertical-inset="true" horizontal-positioning-mode="dynamic" horizontal-default-position="end" class="submenu-region" dir="${e=>e.currentDirection}" @loaded="${e=>e.submenuLoaded()}" ${P("submenuRegion")} part="submenu-region"><slot name="submenu"></slot></${i.tagFor(R)}>`)}</template>`,wu=(i,t)=>y`<template slot="${e=>e.slot?e.slot:e.isNestedMenu()?"submenu":void 0}" role="menu" @keydown="${(e,o)=>e.handleMenuKeyDown(o.event)}" @focusout="${(e,o)=>e.handleFocusOut(o.event)}"><slot ${X("items")}></slot></template>`,mi=class i extends O{constructor(){super(...arguments),this.expandedItem=null,this.focusIndex=-1,this.isNestedMenu=()=>this.parentElement!==null&&ai(this.parentElement)&&this.parentElement.getAttribute("role")==="menuitem",this.handleFocusOut=t=>{if(!this.contains(t.relatedTarget)&&this.menuItems!==void 0){this.collapseExpandedItem();let e=this.menuItems.findIndex(this.isFocusableElement);this.menuItems[this.focusIndex].setAttribute("tabindex","-1"),this.menuItems[e].setAttribute("tabindex","0"),this.focusIndex=e}},this.handleItemFocus=t=>{let e=t.target;this.menuItems!==void 0&&e!==this.menuItems[this.focusIndex]&&(this.menuItems[this.focusIndex].setAttribute("tabindex","-1"),this.focusIndex=this.menuItems.indexOf(e),e.setAttribute("tabindex","0"))},this.handleExpandedChanged=t=>{if(t.defaultPrevented||t.target===null||this.menuItems===void 0||this.menuItems.indexOf(t.target)<0)return;t.preventDefault();let e=t.target;if(this.expandedItem!==null&&e===this.expandedItem&&e.expanded===!1){this.expandedItem=null;return}e.expanded&&(this.expandedItem!==null&&this.expandedItem!==e&&(this.expandedItem.expanded=!1),this.menuItems[this.focusIndex].setAttribute("tabindex","-1"),this.expandedItem=e,this.focusIndex=this.menuItems.indexOf(e),e.setAttribute("tabindex","0"))},this.removeItemListeners=()=>{this.menuItems!==void 0&&this.menuItems.forEach(t=>{t.removeEventListener("expanded-change",this.handleExpandedChanged),t.removeEventListener("focus",this.handleItemFocus)})},this.setItems=()=>{let t=this.domChildren();this.removeItemListeners(),this.menuItems=t;let e=this.menuItems.filter(this.isMenuItemElement);e.length&&(this.focusIndex=0);function o(n){let r=n.getAttribute("role"),a=n.querySelector("[slot=start]");return r!==bt.menuitem&&a===null||r===bt.menuitem&&a!==null?1:r!==bt.menuitem&&a!==null?2:0}let s=e.reduce((n,r)=>{let a=o(r);return n>a?n:a},0);e.forEach((n,r)=>{n.setAttribute("tabindex",r===0?"0":"-1"),n.addEventListener("expanded-change",this.handleExpandedChanged),n.addEventListener("focus",this.handleItemFocus),(n instanceof wt||"startColumnCount"in n)&&(n.startColumnCount=s)})},this.changeHandler=t=>{if(this.menuItems===void 0)return;let e=t.target,o=this.menuItems.indexOf(e);if(o!==-1&&e.role==="menuitemradio"&&e.checked===!0){for(let n=o-1;n>=0;--n){let r=this.menuItems[n],a=r.getAttribute("role");if(a===bt.menuitemradio&&(r.checked=!1),a==="separator")break}let s=this.menuItems.length-1;for(let n=o+1;n<=s;++n){let r=this.menuItems[n],a=r.getAttribute("role");if(a===bt.menuitemradio&&(r.checked=!1),a==="separator")break}}},this.isMenuItemElement=t=>ai(t)&&i.focusableElementRoles.hasOwnProperty(t.getAttribute("role")),this.isFocusableElement=t=>this.isMenuItemElement(t)}itemsChanged(t,e){this.$fastController.isConnected&&this.menuItems!==void 0&&this.setItems()}connectedCallback(){super.connectedCallback(),D.queueUpdate(()=>{this.setItems()}),this.addEventListener("change",this.changeHandler)}disconnectedCallback(){super.disconnectedCallback(),this.removeItemListeners(),this.menuItems=void 0,this.removeEventListener("change",this.changeHandler)}focus(){this.setFocus(0,1)}collapseExpandedItem(){this.expandedItem!==null&&(this.expandedItem.expanded=!1,this.expandedItem=null)}handleMenuKeyDown(t){if(!(t.defaultPrevented||this.menuItems===void 0))switch(t.key){case zt:this.setFocus(this.focusIndex+1,1);return;case Ht:this.setFocus(this.focusIndex-1,-1);return;case re:this.setFocus(this.menuItems.length-1,-1);return;case ne:this.setFocus(0,1);return;default:return!0}}domChildren(){return Array.from(this.children).filter(t=>!t.hasAttribute("hidden"))}setFocus(t,e){if(this.menuItems!==void 0)for(;t>=0&&t<this.menuItems.length;){let o=this.menuItems[t];if(this.isFocusableElement(o)){this.focusIndex>-1&&this.menuItems.length>=this.focusIndex-1&&this.menuItems[this.focusIndex].setAttribute("tabindex","-1"),this.focusIndex=t,o.setAttribute("tabindex","0"),o.focus();break}t+=e}}};mi.focusableElementRoles=yu;l([m],mi.prototype,"items",void 0);var $u=(i,t)=>y`<template class="${e=>e.readOnly?"readonly":""}"><label part="label" for="control" class="${e=>e.defaultSlottedNodes&&e.defaultSlottedNodes.length?"label":"label label__hidden"}"><slot ${X("defaultSlottedNodes")}></slot></label><div class="root" part="root">${Ct(i,t)}<input class="control" part="control" id="control" @input="${e=>e.handleTextInput()}" @change="${e=>e.handleChange()}" @keydown="${(e,o)=>e.handleKeyDown(o.event)}" @blur="${(e,o)=>e.handleBlur()}" ?autofocus="${e=>e.autofocus}" ?disabled="${e=>e.disabled}" list="${e=>e.list}" maxlength="${e=>e.maxlength}" minlength="${e=>e.minlength}" placeholder="${e=>e.placeholder}" ?readonly="${e=>e.readOnly}" ?required="${e=>e.required}" size="${e=>e.size}" type="text" inputmode="numeric" min="${e=>e.min}" max="${e=>e.max}" step="${e=>e.step}" aria-atomic="${e=>e.ariaAtomic}" aria-busy="${e=>e.ariaBusy}" aria-controls="${e=>e.ariaControls}" aria-current="${e=>e.ariaCurrent}" aria-describedby="${e=>e.ariaDescribedby}" aria-details="${e=>e.ariaDetails}" aria-disabled="${e=>e.ariaDisabled}" aria-errormessage="${e=>e.ariaErrormessage}" aria-flowto="${e=>e.ariaFlowto}" aria-haspopup="${e=>e.ariaHaspopup}" aria-hidden="${e=>e.ariaHidden}" aria-invalid="${e=>e.ariaInvalid}" aria-keyshortcuts="${e=>e.ariaKeyshortcuts}" aria-label="${e=>e.ariaLabel}" aria-labelledby="${e=>e.ariaLabelledby}" aria-live="${e=>e.ariaLive}" aria-owns="${e=>e.ariaOwns}" aria-relevant="${e=>e.ariaRelevant}" aria-roledescription="${e=>e.ariaRoledescription}" ${P("control")} />${J(e=>!e.hideStep&&!e.readOnly&&!e.disabled,y`<div class="controls" part="controls"><div class="step-up" part="step-up" @click="${e=>e.stepUp()}"><slot name="step-up-glyph">${t.stepUpGlyph||""}</slot></div><div class="step-down" part="step-down" @click="${e=>e.stepDown()}"><slot name="step-down-glyph">${t.stepDownGlyph||""}</slot></div></div>`)} ${kt(i,t)}</div></template>`,_n=class extends O{},jn=class extends ge(_n){constructor(){super(...arguments),this.proxy=document.createElement("input")}},ku={email:"email",password:"password",tel:"tel",text:"text",url:"url"},gt=class extends jn{constructor(){super(...arguments),this.type=ku.text}readOnlyChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.readOnly=this.readOnly,this.validate())}autofocusChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.autofocus=this.autofocus,this.validate())}placeholderChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.placeholder=this.placeholder)}typeChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.type=this.type,this.validate())}listChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.setAttribute("list",this.list),this.validate())}maxlengthChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.maxLength=this.maxlength,this.validate())}minlengthChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.minLength=this.minlength,this.validate())}patternChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.pattern=this.pattern,this.validate())}sizeChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.size=this.size)}spellcheckChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.spellcheck=this.spellcheck)}connectedCallback(){super.connectedCallback(),this.proxy.setAttribute("type",this.type),this.validate(),this.autofocus&&D.queueUpdate(()=>{this.focus()})}select(){this.control.select(),this.$emit("select")}handleTextInput(){this.value=this.control.value}handleChange(){this.$emit("change")}validate(){super.validate(this.control)}};l([c({attribute:"readonly",mode:"boolean"})],gt.prototype,"readOnly",void 0);l([c({mode:"boolean"})],gt.prototype,"autofocus",void 0);l([c],gt.prototype,"placeholder",void 0);l([c],gt.prototype,"type",void 0);l([c],gt.prototype,"list",void 0);l([c({converter:k})],gt.prototype,"maxlength",void 0);l([c({converter:k})],gt.prototype,"minlength",void 0);l([c],gt.prototype,"pattern",void 0);l([c({converter:k})],gt.prototype,"size",void 0);l([c({mode:"boolean"})],gt.prototype,"spellcheck",void 0);l([m],gt.prototype,"defaultSlottedNodes",void 0);var bi=class{};Y(bi,j);Y(gt,pt,bi);var Un=class extends O{},qn=class extends ge(Un){constructor(){super(...arguments),this.proxy=document.createElement("input")}},ut=class extends qn{constructor(){super(...arguments),this.hideStep=!1,this.step=1,this.isUserInput=!1}maxChanged(t,e){var o;this.max=Math.max(e,(o=this.min)!==null&&o!==void 0?o:e);let s=Math.min(this.min,this.max);this.min!==void 0&&this.min!==s&&(this.min=s),this.value=this.getValidValue(this.value)}minChanged(t,e){var o;this.min=Math.min(e,(o=this.max)!==null&&o!==void 0?o:e);let s=Math.max(this.min,this.max);this.max!==void 0&&this.max!==s&&(this.max=s),this.value=this.getValidValue(this.value)}get valueAsNumber(){return parseFloat(super.value)}set valueAsNumber(t){this.value=t.toString()}valueChanged(t,e){this.value=this.getValidValue(e),e===this.value&&(this.control&&!this.isUserInput&&(this.control.value=this.value),super.valueChanged(t,this.value),t!==void 0&&!this.isUserInput&&(this.$emit("input"),this.$emit("change")),this.isUserInput=!1)}validate(){super.validate(this.control)}getValidValue(t){var e,o;let s=parseFloat(parseFloat(t).toPrecision(12));return isNaN(s)?s="":(s=Math.min(s,(e=this.max)!==null&&e!==void 0?e:s),s=Math.max(s,(o=this.min)!==null&&o!==void 0?o:s).toString()),s}stepUp(){let t=parseFloat(this.value),e=isNaN(t)?this.min>0?this.min:this.max<0?this.max:this.min?0:this.step:t+this.step;this.value=e.toString()}stepDown(){let t=parseFloat(this.value),e=isNaN(t)?this.min>0?this.min:this.max<0?this.max:this.min?0:0-this.step:t-this.step;this.value=e.toString()}connectedCallback(){super.connectedCallback(),this.proxy.setAttribute("type","number"),this.validate(),this.control.value=this.value,this.autofocus&&D.queueUpdate(()=>{this.focus()})}select(){this.control.select(),this.$emit("select")}handleTextInput(){this.control.value=this.control.value.replace(/[^0-9\-+e.]/g,""),this.isUserInput=!0,this.value=this.control.value}handleChange(){this.$emit("change")}handleKeyDown(t){switch(t.key){case Ht:return this.stepUp(),!1;case zt:return this.stepDown(),!1}return!0}handleBlur(){this.control.value=this.value}};l([c({attribute:"readonly",mode:"boolean"})],ut.prototype,"readOnly",void 0);l([c({mode:"boolean"})],ut.prototype,"autofocus",void 0);l([c({attribute:"hide-step",mode:"boolean"})],ut.prototype,"hideStep",void 0);l([c],ut.prototype,"placeholder",void 0);l([c],ut.prototype,"list",void 0);l([c({converter:k})],ut.prototype,"maxlength",void 0);l([c({converter:k})],ut.prototype,"minlength",void 0);l([c({converter:k})],ut.prototype,"size",void 0);l([c({converter:k})],ut.prototype,"step",void 0);l([c({converter:k})],ut.prototype,"max",void 0);l([c({converter:k})],ut.prototype,"min",void 0);l([m],ut.prototype,"defaultSlottedNodes",void 0);Y(ut,pt,bi);var Aa=44,Cu=(i,t)=>y`<template role="progressbar" aria-valuenow="${e=>e.value}" aria-valuemin="${e=>e.min}" aria-valuemax="${e=>e.max}" class="${e=>e.paused?"paused":""}">${J(e=>typeof e.value=="number",y`<svg class="progress" part="progress" viewBox="0 0 16 16" slot="determinate"><circle class="background" part="background" cx="8px" cy="8px" r="7px"></circle><circle class="determinate" part="determinate" style="stroke-dasharray: ${e=>Aa*e.percentComplete/100}px ${Aa}px" cx="8px" cy="8px" r="7px"></circle></svg>`,y`<slot name="indeterminate" slot="indeterminate">${t.indeterminateIndicator||""}</slot>`)}</template>`,ue=class extends O{constructor(){super(...arguments),this.percentComplete=0}valueChanged(){this.$fastController.isConnected&&this.updatePercentComplete()}minChanged(){this.$fastController.isConnected&&this.updatePercentComplete()}maxChanged(){this.$fastController.isConnected&&this.updatePercentComplete()}connectedCallback(){super.connectedCallback(),this.updatePercentComplete()}updatePercentComplete(){let t=typeof this.min=="number"?this.min:0,e=typeof this.max=="number"?this.max:100,o=typeof this.value=="number"?this.value:0,s=e-t;this.percentComplete=s===0?0:Math.fround((o-t)/s*100)}};l([c({converter:k})],ue.prototype,"value",void 0);l([c({converter:k})],ue.prototype,"min",void 0);l([c({converter:k})],ue.prototype,"max",void 0);l([c({mode:"boolean"})],ue.prototype,"paused",void 0);l([m],ue.prototype,"percentComplete",void 0);var Fu=(i,t)=>y`<template role="progressbar" aria-valuenow="${e=>e.value}" aria-valuemin="${e=>e.min}" aria-valuemax="${e=>e.max}" class="${e=>e.paused?"paused":""}">${J(e=>typeof e.value=="number",y`<div class="progress" part="progress" slot="determinate"><div class="determinate" part="determinate" style="width: ${e=>e.percentComplete}%"></div></div>`,y`<div class="progress" part="progress" slot="indeterminate"><slot class="indeterminate" name="indeterminate">${t.indeterminateIndicator1||""} ${t.indeterminateIndicator2||""}</slot></div>`)}</template>`,Iu=(i,t)=>y`<template role="radiogroup" aria-disabled="${e=>e.disabled}" aria-readonly="${e=>e.readOnly}" @click="${(e,o)=>e.clickHandler(o.event)}" @keydown="${(e,o)=>e.keydownHandler(o.event)}" @focusout="${(e,o)=>e.focusOutHandler(o.event)}"><slot name="label"></slot><div class="positioning-region ${e=>e.orientation===it.horizontal?"horizontal":"vertical"}" part="positioning-region"><slot ${X({property:"slottedRadioButtons",filter:ce("[role=radio]")})}></slot></div></template>`,ie=class extends O{constructor(){super(...arguments),this.orientation=it.horizontal,this.radioChangeHandler=t=>{let e=t.target;e.checked&&(this.slottedRadioButtons.forEach(o=>{o!==e&&(o.checked=!1,this.isInsideFoundationToolbar||o.setAttribute("tabindex","-1"))}),this.selectedRadio=e,this.value=e.value,e.setAttribute("tabindex","0"),this.focusedRadio=e),t.stopPropagation()},this.moveToRadioByIndex=(t,e)=>{let o=t[e];this.isInsideToolbar||(o.setAttribute("tabindex","0"),o.readOnly?this.slottedRadioButtons.forEach(s=>{s!==o&&s.setAttribute("tabindex","-1")}):(o.checked=!0,this.selectedRadio=o)),this.focusedRadio=o,o.focus()},this.moveRightOffGroup=()=>{var t;(t=this.nextElementSibling)===null||t===void 0||t.focus()},this.moveLeftOffGroup=()=>{var t;(t=this.previousElementSibling)===null||t===void 0||t.focus()},this.focusOutHandler=t=>{let e=this.slottedRadioButtons,o=t.target,s=o!==null?e.indexOf(o):0,n=this.focusedRadio?e.indexOf(this.focusedRadio):-1;return(n===0&&s===n||n===e.length-1&&n===s)&&(this.selectedRadio?(this.focusedRadio=this.selectedRadio,this.isInsideFoundationToolbar||(this.selectedRadio.setAttribute("tabindex","0"),e.forEach(r=>{r!==this.selectedRadio&&r.setAttribute("tabindex","-1")}))):(this.focusedRadio=e[0],this.focusedRadio.setAttribute("tabindex","0"),e.forEach(r=>{r!==this.focusedRadio&&r.setAttribute("tabindex","-1")}))),!0},this.clickHandler=t=>{let e=t.target;if(e){let o=this.slottedRadioButtons;e.checked||o.indexOf(e)===0?(e.setAttribute("tabindex","0"),this.selectedRadio=e):(e.setAttribute("tabindex","-1"),this.selectedRadio=null),this.focusedRadio=e}t.preventDefault()},this.shouldMoveOffGroupToTheRight=(t,e,o)=>t===e.length&&this.isInsideToolbar&&o===$e,this.shouldMoveOffGroupToTheLeft=(t,e)=>(this.focusedRadio?t.indexOf(this.focusedRadio)-1:0)<0&&this.isInsideToolbar&&e===we,this.checkFocusedRadio=()=>{this.focusedRadio!==null&&!this.focusedRadio.readOnly&&!this.focusedRadio.checked&&(this.focusedRadio.checked=!0,this.focusedRadio.setAttribute("tabindex","0"),this.focusedRadio.focus(),this.selectedRadio=this.focusedRadio)},this.moveRight=t=>{let e=this.slottedRadioButtons,o=0;if(o=this.focusedRadio?e.indexOf(this.focusedRadio)+1:1,this.shouldMoveOffGroupToTheRight(o,e,t.key)){this.moveRightOffGroup();return}else o===e.length&&(o=0);for(;o<e.length&&e.length>1;)if(e[o].disabled){if(this.focusedRadio&&o===e.indexOf(this.focusedRadio))break;if(o+1>=e.length){if(this.isInsideToolbar)break;o=0}else o+=1}else{this.moveToRadioByIndex(e,o);break}},this.moveLeft=t=>{let e=this.slottedRadioButtons,o=0;if(o=this.focusedRadio?e.indexOf(this.focusedRadio)-1:0,o=o<0?e.length-1:o,this.shouldMoveOffGroupToTheLeft(e,t.key)){this.moveLeftOffGroup();return}for(;o>=0&&e.length>1;)if(e[o].disabled){if(this.focusedRadio&&o===e.indexOf(this.focusedRadio))break;o-1<0?o=e.length-1:o-=1}else{this.moveToRadioByIndex(e,o);break}},this.keydownHandler=t=>{let e=t.key;if(e in Je&&this.isInsideFoundationToolbar)return!0;switch(e){case fe:{this.checkFocusedRadio();break}case $e:case zt:{this.direction===G.ltr?this.moveRight(t):this.moveLeft(t);break}case we:case Ht:{this.direction===G.ltr?this.moveLeft(t):this.moveRight(t);break}default:return!0}}}readOnlyChanged(){this.slottedRadioButtons!==void 0&&this.slottedRadioButtons.forEach(t=>{this.readOnly?t.readOnly=!0:t.readOnly=!1})}disabledChanged(){this.slottedRadioButtons!==void 0&&this.slottedRadioButtons.forEach(t=>{this.disabled?t.disabled=!0:t.disabled=!1})}nameChanged(){this.slottedRadioButtons&&this.slottedRadioButtons.forEach(t=>{t.setAttribute("name",this.name)})}valueChanged(){this.slottedRadioButtons&&this.slottedRadioButtons.forEach(t=>{t.value===this.value&&(t.checked=!0,this.selectedRadio=t)}),this.$emit("change")}slottedRadioButtonsChanged(t,e){this.slottedRadioButtons&&this.slottedRadioButtons.length>0&&this.setupRadioButtons()}get parentToolbar(){return this.closest('[role="toolbar"]')}get isInsideToolbar(){var t;return(t=this.parentToolbar)!==null&&t!==void 0?t:!1}get isInsideFoundationToolbar(){var t;return!!(!((t=this.parentToolbar)===null||t===void 0)&&t.$fastController)}connectedCallback(){super.connectedCallback(),this.direction=Pe(this),this.setupRadioButtons()}disconnectedCallback(){this.slottedRadioButtons.forEach(t=>{t.removeEventListener("change",this.radioChangeHandler)})}setupRadioButtons(){let t=this.slottedRadioButtons.filter(s=>s.hasAttribute("checked")),e=t?t.length:0;if(e>1){let s=t[e-1];s.checked=!0}let o=!1;if(this.slottedRadioButtons.forEach(s=>{this.name!==void 0&&s.setAttribute("name",this.name),this.disabled&&(s.disabled=!0),this.readOnly&&(s.readOnly=!0),this.value&&this.value===s.value?(this.selectedRadio=s,this.focusedRadio=s,s.checked=!0,s.setAttribute("tabindex","0"),o=!0):(this.isInsideFoundationToolbar||s.setAttribute("tabindex","-1"),s.checked=!1),s.addEventListener("change",this.radioChangeHandler)}),this.value===void 0&&this.slottedRadioButtons.length>0){let s=this.slottedRadioButtons.filter(r=>r.hasAttribute("checked")),n=s!==null?s.length:0;if(n>0&&!o){let r=s[n-1];r.checked=!0,this.focusedRadio=r,r.setAttribute("tabindex","0")}else this.slottedRadioButtons[0].setAttribute("tabindex","0"),this.focusedRadio=this.slottedRadioButtons[0]}}};l([c({attribute:"readonly",mode:"boolean"})],ie.prototype,"readOnly",void 0);l([c({attribute:"disabled",mode:"boolean"})],ie.prototype,"disabled",void 0);l([c],ie.prototype,"name",void 0);l([c],ie.prototype,"value",void 0);l([c],ie.prototype,"orientation",void 0);l([m],ie.prototype,"childItems",void 0);l([m],ie.prototype,"slottedRadioButtons",void 0);var Su=(i,t)=>y`<template role="radio" class="${e=>e.checked?"checked":""} ${e=>e.readOnly?"readonly":""}" aria-checked="${e=>e.checked}" aria-required="${e=>e.required}" aria-disabled="${e=>e.disabled}" aria-readonly="${e=>e.readOnly}" @keypress="${(e,o)=>e.keypressHandler(o.event)}" @click="${(e,o)=>e.clickHandler(o.event)}"><div part="control" class="control"><slot name="checked-indicator">${t.checkedIndicator||""}</slot></div><label part="label" class="${e=>e.defaultSlottedNodes&&e.defaultSlottedNodes.length?"label":"label label__hidden"}"><slot ${X("defaultSlottedNodes")}></slot></label></template>`,Gn=class extends O{},Wn=class extends kr(Gn){constructor(){super(...arguments),this.proxy=document.createElement("input")}},vi=class extends Wn{constructor(){super(),this.initialValue="on",this.keypressHandler=t=>{switch(t.key){case qe:!this.checked&&!this.readOnly&&(this.checked=!0);return}return!0},this.proxy.setAttribute("type","radio")}readOnlyChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.readOnly=this.readOnly)}defaultCheckedChanged(){var t;this.$fastController.isConnected&&!this.dirtyChecked&&(this.isInsideRadioGroup()||(this.checked=(t=this.defaultChecked)!==null&&t!==void 0?t:!1,this.dirtyChecked=!1))}connectedCallback(){var t,e;super.connectedCallback(),this.validate(),((t=this.parentElement)===null||t===void 0?void 0:t.getAttribute("role"))!=="radiogroup"&&this.getAttribute("tabindex")===null&&(this.disabled||this.setAttribute("tabindex","0")),this.checkedAttribute&&(this.dirtyChecked||this.isInsideRadioGroup()||(this.checked=(e=this.defaultChecked)!==null&&e!==void 0?e:!1,this.dirtyChecked=!1))}isInsideRadioGroup(){return this.closest("[role=radiogroup]")!==null}clickHandler(t){!this.disabled&&!this.readOnly&&!this.checked&&(this.checked=!0)}};l([c({attribute:"readonly",mode:"boolean"})],vi.prototype,"readOnly",void 0);l([m],vi.prototype,"name",void 0);l([m],vi.prototype,"defaultSlottedNodes",void 0);var Wt=class extends O{constructor(){super(...arguments),this.framesPerSecond=60,this.updatingItems=!1,this.speed=600,this.easing="ease-in-out",this.flippersHiddenFromAT=!1,this.scrolling=!1,this.resizeDetector=null}get frameTime(){return 1e3/this.framesPerSecond}scrollingChanged(t,e){if(this.scrollContainer){let o=this.scrolling==!0?"scrollstart":"scrollend";this.$emit(o,this.scrollContainer.scrollLeft)}}get isRtl(){return this.scrollItems.length>1&&this.scrollItems[0].offsetLeft>this.scrollItems[1].offsetLeft}connectedCallback(){super.connectedCallback(),this.initializeResizeDetector()}disconnectedCallback(){this.disconnectResizeDetector(),super.disconnectedCallback()}scrollItemsChanged(t,e){e&&!this.updatingItems&&D.queueUpdate(()=>this.setStops())}disconnectResizeDetector(){this.resizeDetector&&(this.resizeDetector.disconnect(),this.resizeDetector=null)}initializeResizeDetector(){this.disconnectResizeDetector(),this.resizeDetector=new window.ResizeObserver(this.resized.bind(this)),this.resizeDetector.observe(this)}updateScrollStops(){this.updatingItems=!0;let t=this.scrollItems.reduce((e,o)=>o instanceof HTMLSlotElement?e.concat(o.assignedElements()):(e.push(o),e),[]);this.scrollItems=t,this.updatingItems=!1}setStops(){this.updateScrollStops();let{scrollContainer:t}=this,{scrollLeft:e}=t,{width:o,left:s}=t.getBoundingClientRect();this.width=o;let n=0,r=this.scrollItems.map((a,d)=>{let{left:u,width:p}=a.getBoundingClientRect(),f=Math.round(u+e-s),v=Math.round(f+p);return this.isRtl?-v:(n=v,d===0?0:f)}).concat(n);r=this.fixScrollMisalign(r),r.sort((a,d)=>Math.abs(a)-Math.abs(d)),this.scrollStops=r,this.setFlippers()}validateStops(t=!0){let e=()=>!!this.scrollStops.find(o=>o>0);return!e()&&t&&this.setStops(),e()}fixScrollMisalign(t){if(this.isRtl&&t.some(e=>e>0)){t.sort((o,s)=>s-o);let e=t[0];t=t.map(o=>o-e)}return t}setFlippers(){var t,e;let o=this.scrollContainer.scrollLeft;if((t=this.previousFlipperContainer)===null||t===void 0||t.classList.toggle("disabled",o===0),this.scrollStops){let s=Math.abs(this.scrollStops[this.scrollStops.length-1]);(e=this.nextFlipperContainer)===null||e===void 0||e.classList.toggle("disabled",this.validateStops(!1)&&Math.abs(o)+this.width>=s)}}scrollInView(t,e=0,o){var s;if(typeof t!="number"&&t&&(t=this.scrollItems.findIndex(n=>n===t||n.contains(t))),t!==void 0){o=o??e;let{scrollContainer:n,scrollStops:r,scrollItems:a}=this,{scrollLeft:d}=this.scrollContainer,{width:u}=n.getBoundingClientRect(),p=r[t],{width:f}=a[t].getBoundingClientRect(),v=p+f,T=d+e>p;if(T||d+u-o<v){let N=(s=[...r].sort((U,Ot)=>T?Ot-U:U-Ot).find(U=>T?U+e<p:U+u-(o??0)>v))!==null&&s!==void 0?s:0;this.scrollToPosition(N)}}}keyupHandler(t){switch(t.key){case"ArrowLeft":this.scrollToPrevious();break;case"ArrowRight":this.scrollToNext();break}}scrollToPrevious(){this.validateStops();let t=this.scrollContainer.scrollLeft,e=this.scrollStops.findIndex((n,r)=>n>=t&&(this.isRtl||r===this.scrollStops.length-1||this.scrollStops[r+1]>t)),o=Math.abs(this.scrollStops[e+1]),s=this.scrollStops.findIndex(n=>Math.abs(n)+this.width>o);(s>=e||s===-1)&&(s=e>0?e-1:0),this.scrollToPosition(this.scrollStops[s],t)}scrollToNext(){this.validateStops();let t=this.scrollContainer.scrollLeft,e=this.scrollStops.findIndex(n=>Math.abs(n)>=Math.abs(t)),o=this.scrollStops.findIndex(n=>Math.abs(t)+this.width<=Math.abs(n)),s=e;o>e+2?s=o-2:e<this.scrollStops.length-2&&(s=e+1),this.scrollToPosition(this.scrollStops[s],t)}scrollToPosition(t,e=this.scrollContainer.scrollLeft){var o;if(this.scrolling)return;this.scrolling=!0;let s=(o=this.duration)!==null&&o!==void 0?o:`${Math.abs(t-e)/this.speed}s`;this.content.style.setProperty("transition-duration",s);let n=parseFloat(getComputedStyle(this.content).getPropertyValue("transition-duration")),r=u=>{u&&u.target!==u.currentTarget||(this.content.style.setProperty("transition-duration","0s"),this.content.style.removeProperty("transform"),this.scrollContainer.style.setProperty("scroll-behavior","auto"),this.scrollContainer.scrollLeft=t,this.setFlippers(),this.content.removeEventListener("transitionend",r),this.scrolling=!1)};if(n===0){r();return}this.content.addEventListener("transitionend",r);let a=this.scrollContainer.scrollWidth-this.scrollContainer.clientWidth,d=this.scrollContainer.scrollLeft-Math.min(t,a);this.isRtl&&(d=this.scrollContainer.scrollLeft+Math.min(Math.abs(t),a)),this.content.style.setProperty("transition-property","transform"),this.content.style.setProperty("transition-timing-function",this.easing),this.content.style.setProperty("transform",`translateX(${d}px)`)}resized(){this.resizeTimeout&&(this.resizeTimeout=clearTimeout(this.resizeTimeout)),this.resizeTimeout=setTimeout(()=>{this.width=this.scrollContainer.offsetWidth,this.setFlippers()},this.frameTime)}scrolled(){this.scrollTimeout&&(this.scrollTimeout=clearTimeout(this.scrollTimeout)),this.scrollTimeout=setTimeout(()=>{this.setFlippers()},this.frameTime)}};l([c({converter:k})],Wt.prototype,"speed",void 0);l([c],Wt.prototype,"duration",void 0);l([c],Wt.prototype,"easing",void 0);l([c({attribute:"flippers-hidden-from-at",converter:io})],Wt.prototype,"flippersHiddenFromAT",void 0);l([m],Wt.prototype,"scrolling",void 0);l([m],Wt.prototype,"scrollItems",void 0);l([c({attribute:"view"})],Wt.prototype,"view",void 0);var Tu=(i,t)=>{var e,o;return y`<template class="horizontal-scroll" @keyup="${(s,n)=>s.keyupHandler(n.event)}">${Ct(i,t)}<div class="scroll-area" part="scroll-area"><div class="scroll-view" part="scroll-view" @scroll="${s=>s.scrolled()}" ${P("scrollContainer")}><div class="content-container" part="content-container" ${P("content")}><slot ${X({property:"scrollItems",filter:ce()})}></slot></div></div>${J(s=>s.view!=="mobile",y`<div class="scroll scroll-prev" part="scroll-prev" ${P("previousFlipperContainer")}><div class="scroll-action" part="scroll-action-previous"><slot name="previous-flipper">${t.previousFlipper instanceof Function?t.previousFlipper(i,t):(e=t.previousFlipper)!==null&&e!==void 0?e:""}</slot></div></div><div class="scroll scroll-next" part="scroll-next" ${P("nextFlipperContainer")}><div class="scroll-action" part="scroll-action-next"><slot name="next-flipper">${t.nextFlipper instanceof Function?t.nextFlipper(i,t):(o=t.nextFlipper)!==null&&o!==void 0?o:""}</slot></div></div>`)}</div>${kt(i,t)}</template>`};function Fl(i,t,e){return i.nodeType!==Node.TEXT_NODE?!0:typeof i.nodeValue=="string"&&!!i.nodeValue.trim().length}var Xn=class extends O{},Yn=class extends ge(Xn){constructor(){super(...arguments),this.proxy=document.createElement("input")}},$t=class extends Yn{readOnlyChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.readOnly=this.readOnly,this.validate())}autofocusChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.autofocus=this.autofocus,this.validate())}placeholderChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.placeholder=this.placeholder)}listChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.setAttribute("list",this.list),this.validate())}maxlengthChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.maxLength=this.maxlength,this.validate())}minlengthChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.minLength=this.minlength,this.validate())}patternChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.pattern=this.pattern,this.validate())}sizeChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.size=this.size)}spellcheckChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.spellcheck=this.spellcheck)}connectedCallback(){super.connectedCallback(),this.validate(),this.autofocus&&D.queueUpdate(()=>{this.focus()})}validate(){super.validate(this.control)}handleTextInput(){this.value=this.control.value}handleClearInput(){this.value="",this.control.focus(),this.handleChange()}handleChange(){this.$emit("change")}};l([c({attribute:"readonly",mode:"boolean"})],$t.prototype,"readOnly",void 0);l([c({mode:"boolean"})],$t.prototype,"autofocus",void 0);l([c],$t.prototype,"placeholder",void 0);l([c],$t.prototype,"list",void 0);l([c({converter:k})],$t.prototype,"maxlength",void 0);l([c({converter:k})],$t.prototype,"minlength",void 0);l([c],$t.prototype,"pattern",void 0);l([c({converter:k})],$t.prototype,"size",void 0);l([c({mode:"boolean"})],$t.prototype,"spellcheck",void 0);l([m],$t.prototype,"defaultSlottedNodes",void 0);var qo=class{};Y(qo,j);Y($t,pt,qo);var Qn=class extends _e{},Zn=class extends ge(Qn){constructor(){super(...arguments),this.proxy=document.createElement("select")}},Xt=class extends Zn{constructor(){super(...arguments),this.open=!1,this.forcedPosition=!1,this.listboxId=Wi("listbox-"),this.maxHeight=0}openChanged(t,e){if(this.collapsible){if(this.open){this.ariaControls=this.listboxId,this.ariaExpanded="true",this.setPositioning(),this.focusAndScrollOptionIntoView(),this.indexWhenOpened=this.selectedIndex,D.queueUpdate(()=>this.focus());return}this.ariaControls="",this.ariaExpanded="false"}}get collapsible(){return!(this.multiple||typeof this.size=="number")}get value(){return S.track(this,"value"),this._value}set value(t){var e,o,s,n,r,a,d;let u=`${this._value}`;if(!((e=this._options)===null||e===void 0)&&e.length){let p=this._options.findIndex(T=>T.value===t),f=(s=(o=this._options[this.selectedIndex])===null||o===void 0?void 0:o.value)!==null&&s!==void 0?s:null,v=(r=(n=this._options[p])===null||n===void 0?void 0:n.value)!==null&&r!==void 0?r:null;(p===-1||f!==v)&&(t="",this.selectedIndex=p),t=(d=(a=this.firstSelectedOption)===null||a===void 0?void 0:a.value)!==null&&d!==void 0?d:t}u!==t&&(this._value=t,super.valueChanged(u,t),S.notify(this,"value"),this.updateDisplayValue())}updateValue(t){var e,o;this.$fastController.isConnected&&(this.value=(o=(e=this.firstSelectedOption)===null||e===void 0?void 0:e.value)!==null&&o!==void 0?o:""),t&&(this.$emit("input"),this.$emit("change",this,{bubbles:!0,composed:void 0}))}selectedIndexChanged(t,e){super.selectedIndexChanged(t,e),this.updateValue()}positionChanged(t,e){this.positionAttribute=e,this.setPositioning()}setPositioning(){let t=this.getBoundingClientRect(),o=window.innerHeight-t.bottom;this.position=this.forcedPosition?this.positionAttribute:t.top>o?ei.above:ei.below,this.positionAttribute=this.forcedPosition?this.positionAttribute:this.position,this.maxHeight=this.position===ei.above?~~t.top:~~o}get displayValue(){var t,e;return S.track(this,"displayValue"),(e=(t=this.firstSelectedOption)===null||t===void 0?void 0:t.text)!==null&&e!==void 0?e:""}disabledChanged(t,e){super.disabledChanged&&super.disabledChanged(t,e),this.ariaDisabled=this.disabled?"true":"false"}formResetCallback(){this.setProxyOptions(),super.setDefaultSelectedOption(),this.selectedIndex===-1&&(this.selectedIndex=0)}clickHandler(t){if(!this.disabled){if(this.open){let e=t.target.closest("option,[role=option]");if(e&&e.disabled)return}return super.clickHandler(t),this.open=this.collapsible&&!this.open,!this.open&&this.indexWhenOpened!==this.selectedIndex&&this.updateValue(!0),!0}}focusoutHandler(t){var e;if(super.focusoutHandler(t),!this.open)return!0;let o=t.relatedTarget;if(this.isSameNode(o)){this.focus();return}!((e=this.options)===null||e===void 0)&&e.includes(o)||(this.open=!1,this.indexWhenOpened!==this.selectedIndex&&this.updateValue(!0))}handleChange(t,e){super.handleChange(t,e),e==="value"&&this.updateValue()}slottedOptionsChanged(t,e){this.options.forEach(o=>{S.getNotifier(o).unsubscribe(this,"value")}),super.slottedOptionsChanged(t,e),this.options.forEach(o=>{S.getNotifier(o).subscribe(this,"value")}),this.setProxyOptions(),this.updateValue()}mousedownHandler(t){var e;return t.offsetX>=0&&t.offsetX<=((e=this.listbox)===null||e===void 0?void 0:e.scrollWidth)?super.mousedownHandler(t):this.collapsible}multipleChanged(t,e){super.multipleChanged(t,e),this.proxy&&(this.proxy.multiple=e)}selectedOptionsChanged(t,e){var o;super.selectedOptionsChanged(t,e),(o=this.options)===null||o===void 0||o.forEach((s,n)=>{var r;let a=(r=this.proxy)===null||r===void 0?void 0:r.options.item(n);a&&(a.selected=s.selected)})}setDefaultSelectedOption(){var t;let e=(t=this.options)!==null&&t!==void 0?t:Array.from(this.children).filter(ft.slottedOptionFilter),o=e?.findIndex(s=>s.hasAttribute("selected")||s.selected||s.value===this.value);if(o!==-1){this.selectedIndex=o;return}this.selectedIndex=0}setProxyOptions(){this.proxy instanceof HTMLSelectElement&&this.options&&(this.proxy.options.length=0,this.options.forEach(t=>{let e=t.proxy||(t instanceof HTMLOptionElement?t.cloneNode():null);e&&this.proxy.options.add(e)}))}keydownHandler(t){super.keydownHandler(t);let e=t.key||t.key.charCodeAt(0);switch(e){case qe:{t.preventDefault(),this.collapsible&&this.typeAheadExpired&&(this.open=!this.open);break}case ne:case re:{t.preventDefault();break}case fe:{t.preventDefault(),this.open=!this.open;break}case Si:{this.collapsible&&this.open&&(t.preventDefault(),this.open=!1);break}case us:return this.collapsible&&this.open&&(t.preventDefault(),this.open=!1),!0}return!this.open&&this.indexWhenOpened!==this.selectedIndex&&(this.updateValue(!0),this.indexWhenOpened=this.selectedIndex),!(e===zt||e===Ht)}connectedCallback(){super.connectedCallback(),this.forcedPosition=!!this.positionAttribute,this.addEventListener("contentchange",this.updateDisplayValue)}disconnectedCallback(){this.removeEventListener("contentchange",this.updateDisplayValue),super.disconnectedCallback()}sizeChanged(t,e){super.sizeChanged(t,e),this.proxy&&(this.proxy.size=e)}updateDisplayValue(){this.collapsible&&S.notify(this,"displayValue")}};l([c({attribute:"open",mode:"boolean"})],Xt.prototype,"open",void 0);l([Sd],Xt.prototype,"collapsible",null);l([m],Xt.prototype,"control",void 0);l([c({attribute:"position"})],Xt.prototype,"positionAttribute",void 0);l([m],Xt.prototype,"position",void 0);l([m],Xt.prototype,"maxHeight",void 0);var Qi=class{};l([m],Qi.prototype,"ariaControls",void 0);Y(Qi,ee);Y(Xt,pt,Qi);var Du=(i,t)=>y`<template class="${e=>[e.collapsible&&"collapsible",e.collapsible&&e.open&&"open",e.disabled&&"disabled",e.collapsible&&e.position].filter(Boolean).join(" ")}" aria-activedescendant="${e=>e.ariaActiveDescendant}" aria-controls="${e=>e.ariaControls}" aria-disabled="${e=>e.ariaDisabled}" aria-expanded="${e=>e.ariaExpanded}" aria-haspopup="${e=>e.collapsible?"listbox":null}" aria-multiselectable="${e=>e.ariaMultiSelectable}" ?open="${e=>e.open}" role="combobox" tabindex="${e=>e.disabled?null:"0"}" @click="${(e,o)=>e.clickHandler(o.event)}" @focusin="${(e,o)=>e.focusinHandler(o.event)}" @focusout="${(e,o)=>e.focusoutHandler(o.event)}" @keydown="${(e,o)=>e.keydownHandler(o.event)}" @mousedown="${(e,o)=>e.mousedownHandler(o.event)}">${J(e=>e.collapsible,y`<div class="control" part="control" ?disabled="${e=>e.disabled}" ${P("control")}>${Ct(i,t)}<slot name="button-container"><div class="selected-value" part="selected-value"><slot name="selected-value">${e=>e.displayValue}</slot></div><div aria-hidden="true" class="indicator" part="indicator"><slot name="indicator">${t.indicator||""}</slot></div></slot>${kt(i,t)}</div>`)}<div class="listbox" id="${e=>e.listboxId}" part="listbox" role="listbox" ?disabled="${e=>e.disabled}" ?hidden="${e=>e.collapsible?!e.open:!1}" ${P("listbox")}><slot ${X({filter:ft.slottedOptionFilter,flatten:!0,property:"slottedOptions"})}></slot></div></template>`,Ru=(i,t)=>y`<template class="${e=>e.shape==="circle"?"circle":"rect"}" pattern="${e=>e.pattern}" ?shimmer="${e=>e.shimmer}">${J(e=>e.shimmer===!0,y`<span class="shimmer"></span>`)}<object type="image/svg+xml" data="${e=>e.pattern}" role="presentation"><img class="pattern" src="${e=>e.pattern}" /></object><slot></slot></template>`,je=class extends O{constructor(){super(...arguments),this.shape="rect"}};l([c],je.prototype,"fill",void 0);l([c],je.prototype,"shape",void 0);l([c],je.prototype,"pattern",void 0);l([c({mode:"boolean"})],je.prototype,"shimmer",void 0);var Eu=(i,t)=>y`<template aria-disabled="${e=>e.disabled}" class="${e=>e.sliderOrientation||it.horizontal} ${e=>e.disabled?"disabled":""}"><div ${P("root")} part="root" class="root" style="${e=>e.positionStyle}"><div class="container">${J(e=>!e.hideMark,y`<div class="mark"></div>`)}<div class="label"><slot></slot></div></div></div></template>`;function Jn(i,t,e,o){let s=ps(0,1,(i-t)/(e-t));return o===G.rtl&&(s=1-s),s}var yo={min:0,max:0,direction:G.ltr,orientation:it.horizontal,disabled:!1},Yt=class extends O{constructor(){super(...arguments),this.hideMark=!1,this.sliderDirection=G.ltr,this.getSliderConfiguration=()=>{if(!this.isSliderConfig(this.parentNode))this.sliderDirection=yo.direction||G.ltr,this.sliderOrientation=yo.orientation,this.sliderMaxPosition=yo.max,this.sliderMinPosition=yo.min;else{let t=this.parentNode,{min:e,max:o,direction:s,orientation:n,disabled:r}=t;r!==void 0&&(this.disabled=r),this.sliderDirection=s||G.ltr,this.sliderOrientation=n||it.horizontal,this.sliderMaxPosition=o,this.sliderMinPosition=e}},this.positionAsStyle=()=>{let t=this.sliderDirection?this.sliderDirection:G.ltr,e=Jn(Number(this.position),Number(this.sliderMinPosition),Number(this.sliderMaxPosition)),o=Math.round((1-e)*100),s=Math.round(e*100);return Number.isNaN(s)&&Number.isNaN(o)&&(o=50,s=50),this.sliderOrientation===it.horizontal?t===G.rtl?`right: ${s}%; left: ${o}%;`:`left: ${s}%; right: ${o}%;`:`top: ${s}%; bottom: ${o}%;`}}positionChanged(){this.positionStyle=this.positionAsStyle()}sliderOrientationChanged(){}connectedCallback(){super.connectedCallback(),this.getSliderConfiguration(),this.positionStyle=this.positionAsStyle(),this.notifier=S.getNotifier(this.parentNode),this.notifier.subscribe(this,"orientation"),this.notifier.subscribe(this,"direction"),this.notifier.subscribe(this,"max"),this.notifier.subscribe(this,"min")}disconnectedCallback(){super.disconnectedCallback(),this.notifier.unsubscribe(this,"orientation"),this.notifier.unsubscribe(this,"direction"),this.notifier.unsubscribe(this,"max"),this.notifier.unsubscribe(this,"min")}handleChange(t,e){switch(e){case"direction":this.sliderDirection=t.direction;break;case"orientation":this.sliderOrientation=t.orientation;break;case"max":this.sliderMaxPosition=t.max;break;case"min":this.sliderMinPosition=t.min;break}this.positionStyle=this.positionAsStyle()}isSliderConfig(t){return t.max!==void 0&&t.min!==void 0}};l([m],Yt.prototype,"positionStyle",void 0);l([c],Yt.prototype,"position",void 0);l([c({attribute:"hide-mark",mode:"boolean"})],Yt.prototype,"hideMark",void 0);l([c({attribute:"disabled",mode:"boolean"})],Yt.prototype,"disabled",void 0);l([m],Yt.prototype,"sliderOrientation",void 0);l([m],Yt.prototype,"sliderMinPosition",void 0);l([m],Yt.prototype,"sliderMaxPosition",void 0);l([m],Yt.prototype,"sliderDirection",void 0);var Ou=(i,t)=>y`<template role="slider" class="${e=>e.readOnly?"readonly":""} ${e=>e.orientation||it.horizontal}" tabindex="${e=>e.disabled?null:0}" aria-valuetext="${e=>e.valueTextFormatter(e.value)}" aria-valuenow="${e=>e.value}" aria-valuemin="${e=>e.min}" aria-valuemax="${e=>e.max}" aria-disabled="${e=>e.disabled?!0:void 0}" aria-readonly="${e=>e.readOnly?!0:void 0}" aria-orientation="${e=>e.orientation}" class="${e=>e.orientation}"><div part="positioning-region" class="positioning-region"><div ${P("track")} part="track-container" class="track"><slot name="track"></slot><div part="track-start" class="track-start" style="${e=>e.position}"><slot name="track-start"></slot></div></div><slot></slot><div ${P("thumb")} part="thumb-container" class="thumb-container" style="${e=>e.position}"><slot name="thumb">${t.thumb||""}</slot></div></div></template>`,Kn=class extends O{},tr=class extends ge(Kn){constructor(){super(...arguments),this.proxy=document.createElement("input")}},Au={singleValue:"single-value"},rt=class extends tr{constructor(){super(...arguments),this.direction=G.ltr,this.isDragging=!1,this.trackWidth=0,this.trackMinWidth=0,this.trackHeight=0,this.trackLeft=0,this.trackMinHeight=0,this.valueTextFormatter=()=>null,this.min=0,this.max=10,this.step=1,this.orientation=it.horizontal,this.mode=Au.singleValue,this.keypressHandler=t=>{if(!this.readOnly){if(t.key===ne)t.preventDefault(),this.value=`${this.min}`;else if(t.key===re)t.preventDefault(),this.value=`${this.max}`;else if(!t.shiftKey)switch(t.key){case $e:case Ht:t.preventDefault(),this.increment();break;case we:case zt:t.preventDefault(),this.decrement();break}}},this.setupTrackConstraints=()=>{let t=this.track.getBoundingClientRect();this.trackWidth=this.track.clientWidth,this.trackMinWidth=this.track.clientLeft,this.trackHeight=t.bottom,this.trackMinHeight=t.top,this.trackLeft=this.getBoundingClientRect().left,this.trackWidth===0&&(this.trackWidth=1)},this.setupListeners=(t=!1)=>{let e=`${t?"remove":"add"}EventListener`;this[e]("keydown",this.keypressHandler),this[e]("mousedown",this.handleMouseDown),this.thumb[e]("mousedown",this.handleThumbMouseDown,{passive:!0}),this.thumb[e]("touchstart",this.handleThumbMouseDown,{passive:!0}),t&&(this.handleMouseDown(null),this.handleThumbMouseDown(null))},this.initialValue="",this.handleThumbMouseDown=t=>{if(t){if(this.readOnly||this.disabled||t.defaultPrevented)return;t.target.focus()}let e=`${t!==null?"add":"remove"}EventListener`;window[e]("mouseup",this.handleWindowMouseUp),window[e]("mousemove",this.handleMouseMove,{passive:!0}),window[e]("touchmove",this.handleMouseMove,{passive:!0}),window[e]("touchend",this.handleWindowMouseUp),this.isDragging=t!==null},this.handleMouseMove=t=>{if(this.readOnly||this.disabled||t.defaultPrevented)return;let e=window.TouchEvent&&t instanceof TouchEvent?t.touches[0]:t,o=this.orientation===it.horizontal?e.pageX-document.documentElement.scrollLeft-this.trackLeft:e.pageY-document.documentElement.scrollTop;this.value=`${this.calculateNewValue(o)}`},this.calculateNewValue=t=>{let e=Jn(t,this.orientation===it.horizontal?this.trackMinWidth:this.trackMinHeight,this.orientation===it.horizontal?this.trackWidth:this.trackHeight,this.direction),o=(this.max-this.min)*e+this.min;return this.convertToConstrainedValue(o)},this.handleWindowMouseUp=t=>{this.stopDragging()},this.stopDragging=()=>{this.isDragging=!1,this.handleMouseDown(null),this.handleThumbMouseDown(null)},this.handleMouseDown=t=>{let e=`${t!==null?"add":"remove"}EventListener`;if((t===null||!this.disabled&&!this.readOnly)&&(window[e]("mouseup",this.handleWindowMouseUp),window.document[e]("mouseleave",this.handleWindowMouseUp),window[e]("mousemove",this.handleMouseMove),t)){t.preventDefault(),this.setupTrackConstraints(),t.target.focus();let o=this.orientation===it.horizontal?t.pageX-document.documentElement.scrollLeft-this.trackLeft:t.pageY-document.documentElement.scrollTop;this.value=`${this.calculateNewValue(o)}`}},this.convertToConstrainedValue=t=>{isNaN(t)&&(t=this.min);let e=t-this.min,o=Math.round(e/this.step),s=e-o*(this.stepMultiplier*this.step)/this.stepMultiplier;return e=s>=Number(this.step)/2?e-s+Number(this.step):e-s,e+this.min}}readOnlyChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.readOnly=this.readOnly)}get valueAsNumber(){return parseFloat(super.value)}set valueAsNumber(t){this.value=t.toString()}valueChanged(t,e){super.valueChanged(t,e),this.$fastController.isConnected&&this.setThumbPositionForOrientation(this.direction),this.$emit("change")}minChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.min=`${this.min}`),this.validate()}maxChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.max=`${this.max}`),this.validate()}stepChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.step=`${this.step}`),this.updateStepMultiplier(),this.validate()}orientationChanged(){this.$fastController.isConnected&&this.setThumbPositionForOrientation(this.direction)}connectedCallback(){super.connectedCallback(),this.proxy.setAttribute("type","range"),this.direction=Pe(this),this.updateStepMultiplier(),this.setupTrackConstraints(),this.setupListeners(),this.setupDefaultValue(),this.setThumbPositionForOrientation(this.direction)}disconnectedCallback(){this.setupListeners(!0)}increment(){let t=this.direction!==G.rtl&&this.orientation!==it.vertical?Number(this.value)+Number(this.step):Number(this.value)-Number(this.step),e=this.convertToConstrainedValue(t),o=e<Number(this.max)?`${e}`:`${this.max}`;this.value=o}decrement(){let t=this.direction!==G.rtl&&this.orientation!==it.vertical?Number(this.value)-Number(this.step):Number(this.value)+Number(this.step),e=this.convertToConstrainedValue(t),o=e>Number(this.min)?`${e}`:`${this.min}`;this.value=o}setThumbPositionForOrientation(t){let o=(1-Jn(Number(this.value),Number(this.min),Number(this.max),t))*100;this.orientation===it.horizontal?this.position=this.isDragging?`right: ${o}%; transition: none;`:`right: ${o}%; transition: all 0.2s ease;`:this.position=this.isDragging?`bottom: ${o}%; transition: none;`:`bottom: ${o}%; transition: all 0.2s ease;`}updateStepMultiplier(){let t=this.step+"",e=this.step%1?t.length-t.indexOf(".")-1:0;this.stepMultiplier=Math.pow(10,e)}get midpoint(){return`${this.convertToConstrainedValue((this.max+this.min)/2)}`}setupDefaultValue(){if(typeof this.value=="string")if(this.value.length===0)this.initialValue=this.midpoint;else{let t=parseFloat(this.value);!Number.isNaN(t)&&(t<this.min||t>this.max)&&(this.value=this.midpoint)}}};l([c({attribute:"readonly",mode:"boolean"})],rt.prototype,"readOnly",void 0);l([m],rt.prototype,"direction",void 0);l([m],rt.prototype,"isDragging",void 0);l([m],rt.prototype,"position",void 0);l([m],rt.prototype,"trackWidth",void 0);l([m],rt.prototype,"trackMinWidth",void 0);l([m],rt.prototype,"trackHeight",void 0);l([m],rt.prototype,"trackLeft",void 0);l([m],rt.prototype,"trackMinHeight",void 0);l([m],rt.prototype,"valueTextFormatter",void 0);l([c({converter:k})],rt.prototype,"min",void 0);l([c({converter:k})],rt.prototype,"max",void 0);l([c({converter:k})],rt.prototype,"step",void 0);l([c],rt.prototype,"orientation",void 0);l([c],rt.prototype,"mode",void 0);var Lu=(i,t)=>y`<template role="switch" aria-checked="${e=>e.checked}" aria-disabled="${e=>e.disabled}" aria-readonly="${e=>e.readOnly}" tabindex="${e=>e.disabled?null:0}" @keypress="${(e,o)=>e.keypressHandler(o.event)}" @click="${(e,o)=>e.clickHandler(o.event)}" class="${e=>e.checked?"checked":""}"><label part="label" class="${e=>e.defaultSlottedNodes&&e.defaultSlottedNodes.length?"label":"label label__hidden"}"><slot ${X("defaultSlottedNodes")}></slot></label><div part="switch" class="switch"><slot name="switch">${t.switch||""}</slot></div><span class="status-message" part="status-message"><span class="checked-message" part="checked-message"><slot name="checked-message"></slot></span><span class="unchecked-message" part="unchecked-message"><slot name="unchecked-message"></slot></span></span></template>`,er=class extends O{},ir=class extends kr(er){constructor(){super(...arguments),this.proxy=document.createElement("input")}},Zi=class extends ir{constructor(){super(),this.initialValue="on",this.keypressHandler=t=>{if(!this.readOnly)switch(t.key){case fe:case qe:this.checked=!this.checked;break}},this.clickHandler=t=>{!this.disabled&&!this.readOnly&&(this.checked=!this.checked)},this.proxy.setAttribute("type","checkbox")}readOnlyChanged(){this.proxy instanceof HTMLInputElement&&(this.proxy.readOnly=this.readOnly),this.readOnly?this.classList.add("readonly"):this.classList.remove("readonly")}checkedChanged(t,e){super.checkedChanged(t,e),this.checked?this.classList.add("checked"):this.classList.remove("checked")}};l([c({attribute:"readonly",mode:"boolean"})],Zi.prototype,"readOnly",void 0);l([m],Zi.prototype,"defaultSlottedNodes",void 0);var Vu=(i,t)=>y`<template slot="tabpanel" role="tabpanel"><slot></slot></template>`,or=class extends O{},zu=(i,t)=>y`<template slot="tab" role="tab" aria-disabled="${e=>e.disabled}"><slot></slot></template>`,Go=class extends O{};l([c({mode:"boolean"})],Go.prototype,"disabled",void 0);var Hu=(i,t)=>y`<template class="${e=>e.orientation}">${Ct(i,t)}<div class="tablist" part="tablist" role="tablist"><slot class="tab" name="tab" part="tab" ${X("tabs")}></slot>${J(e=>e.showActiveIndicator,y`<div ${P("activeIndicatorRef")} class="activeIndicator" part="activeIndicator"></div>`)}</div>${kt(i,t)}<div class="tabpanel" part="tabpanel"><slot name="tabpanel" ${X("tabpanels")}></slot></div></template>`,La={vertical:"vertical",horizontal:"horizontal"},Qt=class extends O{constructor(){super(...arguments),this.orientation=La.horizontal,this.activeindicator=!0,this.showActiveIndicator=!0,this.prevActiveTabIndex=0,this.activeTabIndex=0,this.ticking=!1,this.change=()=>{this.$emit("change",this.activetab)},this.isDisabledElement=t=>t.getAttribute("aria-disabled")==="true",this.isHiddenElement=t=>t.hasAttribute("hidden"),this.isFocusableElement=t=>!this.isDisabledElement(t)&&!this.isHiddenElement(t),this.setTabs=()=>{let t="gridColumn",e="gridRow",o=this.isHorizontal()?t:e;this.activeTabIndex=this.getActiveIndex(),this.showActiveIndicator=!1,this.tabs.forEach((s,n)=>{if(s.slot==="tab"){let r=this.activeTabIndex===n&&this.isFocusableElement(s);this.activeindicator&&this.isFocusableElement(s)&&(this.showActiveIndicator=!0);let a=this.tabIds[n],d=this.tabpanelIds[n];s.setAttribute("id",a),s.setAttribute("aria-selected",r?"true":"false"),s.setAttribute("aria-controls",d),s.addEventListener("click",this.handleTabClick),s.addEventListener("keydown",this.handleTabKeyDown),s.setAttribute("tabindex",r?"0":"-1"),r&&(this.activetab=s,this.activeid=a)}s.style[t]="",s.style[e]="",s.style[o]=`${n+1}`,this.isHorizontal()?s.classList.remove("vertical"):s.classList.add("vertical")})},this.setTabPanels=()=>{this.tabpanels.forEach((t,e)=>{let o=this.tabIds[e],s=this.tabpanelIds[e];t.setAttribute("id",s),t.setAttribute("aria-labelledby",o),this.activeTabIndex!==e?t.setAttribute("hidden",""):t.removeAttribute("hidden")})},this.handleTabClick=t=>{let e=t.currentTarget;e.nodeType===1&&this.isFocusableElement(e)&&(this.prevActiveTabIndex=this.activeTabIndex,this.activeTabIndex=this.tabs.indexOf(e),this.setComponent())},this.handleTabKeyDown=t=>{if(this.isHorizontal())switch(t.key){case we:t.preventDefault(),this.adjustBackward(t);break;case $e:t.preventDefault(),this.adjustForward(t);break}else switch(t.key){case Ht:t.preventDefault(),this.adjustBackward(t);break;case zt:t.preventDefault(),this.adjustForward(t);break}switch(t.key){case ne:t.preventDefault(),this.adjust(-this.activeTabIndex);break;case re:t.preventDefault(),this.adjust(this.tabs.length-this.activeTabIndex-1);break}},this.adjustForward=t=>{let e=this.tabs,o=0;for(o=this.activetab?e.indexOf(this.activetab)+1:1,o===e.length&&(o=0);o<e.length&&e.length>1;)if(this.isFocusableElement(e[o])){this.moveToTabByIndex(e,o);break}else{if(this.activetab&&o===e.indexOf(this.activetab))break;o+1>=e.length?o=0:o+=1}},this.adjustBackward=t=>{let e=this.tabs,o=0;for(o=this.activetab?e.indexOf(this.activetab)-1:0,o=o<0?e.length-1:o;o>=0&&e.length>1;)if(this.isFocusableElement(e[o])){this.moveToTabByIndex(e,o);break}else o-1<0?o=e.length-1:o-=1},this.moveToTabByIndex=(t,e)=>{let o=t[e];this.activetab=o,this.prevActiveTabIndex=this.activeTabIndex,this.activeTabIndex=e,o.focus(),this.setComponent()}}orientationChanged(){this.$fastController.isConnected&&(this.setTabs(),this.setTabPanels(),this.handleActiveIndicatorPosition())}activeidChanged(t,e){this.$fastController.isConnected&&this.tabs.length<=this.tabpanels.length&&(this.prevActiveTabIndex=this.tabs.findIndex(o=>o.id===t),this.setTabs(),this.setTabPanels(),this.handleActiveIndicatorPosition())}tabsChanged(){this.$fastController.isConnected&&this.tabs.length<=this.tabpanels.length&&(this.tabIds=this.getTabIds(),this.tabpanelIds=this.getTabPanelIds(),this.setTabs(),this.setTabPanels(),this.handleActiveIndicatorPosition())}tabpanelsChanged(){this.$fastController.isConnected&&this.tabpanels.length<=this.tabs.length&&(this.tabIds=this.getTabIds(),this.tabpanelIds=this.getTabPanelIds(),this.setTabs(),this.setTabPanels(),this.handleActiveIndicatorPosition())}getActiveIndex(){return this.activeid!==void 0?this.tabIds.indexOf(this.activeid)===-1?0:this.tabIds.indexOf(this.activeid):0}getTabIds(){return this.tabs.map(t=>{var e;return(e=t.getAttribute("id"))!==null&&e!==void 0?e:`tab-${Wi()}`})}getTabPanelIds(){return this.tabpanels.map(t=>{var e;return(e=t.getAttribute("id"))!==null&&e!==void 0?e:`panel-${Wi()}`})}setComponent(){this.activeTabIndex!==this.prevActiveTabIndex&&(this.activeid=this.tabIds[this.activeTabIndex],this.focusTab(),this.change())}isHorizontal(){return this.orientation===La.horizontal}handleActiveIndicatorPosition(){this.showActiveIndicator&&this.activeindicator&&this.activeTabIndex!==this.prevActiveTabIndex&&(this.ticking?this.ticking=!1:(this.ticking=!0,this.animateActiveIndicator()))}animateActiveIndicator(){this.ticking=!0;let t=this.isHorizontal()?"gridColumn":"gridRow",e=this.isHorizontal()?"translateX":"translateY",o=this.isHorizontal()?"offsetLeft":"offsetTop",s=this.activeIndicatorRef[o];this.activeIndicatorRef.style[t]=`${this.activeTabIndex+1}`;let n=this.activeIndicatorRef[o];this.activeIndicatorRef.style[t]=`${this.prevActiveTabIndex+1}`;let r=n-s;this.activeIndicatorRef.style.transform=`${e}(${r}px)`,this.activeIndicatorRef.classList.add("activeIndicatorTransition"),this.activeIndicatorRef.addEventListener("transitionend",()=>{this.ticking=!1,this.activeIndicatorRef.style[t]=`${this.activeTabIndex+1}`,this.activeIndicatorRef.style.transform=`${e}(0px)`,this.activeIndicatorRef.classList.remove("activeIndicatorTransition")})}adjust(t){let e=this.tabs.filter(r=>this.isFocusableElement(r)),o=e.indexOf(this.activetab),s=ps(0,e.length-1,o+t),n=this.tabs.indexOf(e[s]);n>-1&&this.moveToTabByIndex(this.tabs,n)}focusTab(){this.tabs[this.activeTabIndex].focus()}connectedCallback(){super.connectedCallback(),this.tabIds=this.getTabIds(),this.tabpanelIds=this.getTabPanelIds(),this.activeTabIndex=this.getActiveIndex()}};l([c],Qt.prototype,"orientation",void 0);l([c],Qt.prototype,"activeid",void 0);l([m],Qt.prototype,"tabs",void 0);l([m],Qt.prototype,"tabpanels",void 0);l([c({mode:"boolean"})],Qt.prototype,"activeindicator",void 0);l([m],Qt.prototype,"activeIndicatorRef",void 0);l([m],Qt.prototype,"showActiveIndicator",void 0);Y(Qt,pt);var sr=class extends O{},nr=class extends ge(sr){constructor(){super(...arguments),this.proxy=document.createElement("textarea")}},Il={none:"none",both:"both",horizontal:"horizontal",vertical:"vertical"},at=class extends nr{constructor(){super(...arguments),this.resize=Il.none,this.cols=20,this.handleTextInput=()=>{this.value=this.control.value}}readOnlyChanged(){this.proxy instanceof HTMLTextAreaElement&&(this.proxy.readOnly=this.readOnly)}autofocusChanged(){this.proxy instanceof HTMLTextAreaElement&&(this.proxy.autofocus=this.autofocus)}listChanged(){this.proxy instanceof HTMLTextAreaElement&&this.proxy.setAttribute("list",this.list)}maxlengthChanged(){this.proxy instanceof HTMLTextAreaElement&&(this.proxy.maxLength=this.maxlength)}minlengthChanged(){this.proxy instanceof HTMLTextAreaElement&&(this.proxy.minLength=this.minlength)}spellcheckChanged(){this.proxy instanceof HTMLTextAreaElement&&(this.proxy.spellcheck=this.spellcheck)}select(){this.control.select(),this.$emit("select")}handleChange(){this.$emit("change")}validate(){super.validate(this.control)}};l([c({mode:"boolean"})],at.prototype,"readOnly",void 0);l([c],at.prototype,"resize",void 0);l([c({mode:"boolean"})],at.prototype,"autofocus",void 0);l([c({attribute:"form"})],at.prototype,"formId",void 0);l([c],at.prototype,"list",void 0);l([c({converter:k})],at.prototype,"maxlength",void 0);l([c({converter:k})],at.prototype,"minlength",void 0);l([c],at.prototype,"name",void 0);l([c],at.prototype,"placeholder",void 0);l([c({converter:k,mode:"fromView"})],at.prototype,"cols",void 0);l([c({converter:k,mode:"fromView"})],at.prototype,"rows",void 0);l([c({mode:"boolean"})],at.prototype,"spellcheck",void 0);l([m],at.prototype,"defaultSlottedNodes",void 0);Y(at,bi);var Pu=(i,t)=>y`<template class=" ${e=>e.readOnly?"readonly":""} ${e=>e.resize!==Il.none?`resize-${e.resize}`:""}"><label part="label" for="control" class="${e=>e.defaultSlottedNodes&&e.defaultSlottedNodes.length?"label":"label label__hidden"}"><slot ${X("defaultSlottedNodes")}></slot></label><textarea part="control" class="control" id="control" ?autofocus="${e=>e.autofocus}" cols="${e=>e.cols}" ?disabled="${e=>e.disabled}" form="${e=>e.form}" list="${e=>e.list}" maxlength="${e=>e.maxlength}" minlength="${e=>e.minlength}" name="${e=>e.name}" placeholder="${e=>e.placeholder}" ?readonly="${e=>e.readOnly}" ?required="${e=>e.required}" rows="${e=>e.rows}" ?spellcheck="${e=>e.spellcheck}" :value="${e=>e.value}" aria-atomic="${e=>e.ariaAtomic}" aria-busy="${e=>e.ariaBusy}" aria-controls="${e=>e.ariaControls}" aria-current="${e=>e.ariaCurrent}" aria-describedby="${e=>e.ariaDescribedby}" aria-details="${e=>e.ariaDetails}" aria-disabled="${e=>e.ariaDisabled}" aria-errormessage="${e=>e.ariaErrormessage}" aria-flowto="${e=>e.ariaFlowto}" aria-haspopup="${e=>e.ariaHaspopup}" aria-hidden="${e=>e.ariaHidden}" aria-invalid="${e=>e.ariaInvalid}" aria-keyshortcuts="${e=>e.ariaKeyshortcuts}" aria-label="${e=>e.ariaLabel}" aria-labelledby="${e=>e.ariaLabelledby}" aria-live="${e=>e.ariaLive}" aria-owns="${e=>e.ariaOwns}" aria-relevant="${e=>e.ariaRelevant}" aria-roledescription="${e=>e.ariaRoledescription}" @input="${(e,o)=>e.handleTextInput()}" @change="${e=>e.handleChange()}" ${P("control")}></textarea></template>`,Mu=(i,t)=>y`<template class=" ${e=>e.readOnly?"readonly":""} "><label part="label" for="control" class="${e=>e.defaultSlottedNodes&&e.defaultSlottedNodes.length?"label":"label label__hidden"}"><slot ${X({property:"defaultSlottedNodes",filter:Fl})}></slot></label><div class="root" part="root">${Ct(i,t)}<input class="control" part="control" id="control" @input="${e=>e.handleTextInput()}" @change="${e=>e.handleChange()}" ?autofocus="${e=>e.autofocus}" ?disabled="${e=>e.disabled}" list="${e=>e.list}" maxlength="${e=>e.maxlength}" minlength="${e=>e.minlength}" pattern="${e=>e.pattern}" placeholder="${e=>e.placeholder}" ?readonly="${e=>e.readOnly}" ?required="${e=>e.required}" size="${e=>e.size}" ?spellcheck="${e=>e.spellcheck}" :value="${e=>e.value}" type="${e=>e.type}" aria-atomic="${e=>e.ariaAtomic}" aria-busy="${e=>e.ariaBusy}" aria-controls="${e=>e.ariaControls}" aria-current="${e=>e.ariaCurrent}" aria-describedby="${e=>e.ariaDescribedby}" aria-details="${e=>e.ariaDetails}" aria-disabled="${e=>e.ariaDisabled}" aria-errormessage="${e=>e.ariaErrormessage}" aria-flowto="${e=>e.ariaFlowto}" aria-haspopup="${e=>e.ariaHaspopup}" aria-hidden="${e=>e.ariaHidden}" aria-invalid="${e=>e.ariaInvalid}" aria-keyshortcuts="${e=>e.ariaKeyshortcuts}" aria-label="${e=>e.ariaLabel}" aria-labelledby="${e=>e.ariaLabelledby}" aria-live="${e=>e.ariaLive}" aria-owns="${e=>e.ariaOwns}" aria-relevant="${e=>e.ariaRelevant}" aria-roledescription="${e=>e.ariaRoledescription}" ${P("control")} />${kt(i,t)}</div></template>`,Nu=(i,t)=>y`<template aria-label="${e=>e.ariaLabel}" aria-labelledby="${e=>e.ariaLabelledby}" aria-orientation="${e=>e.orientation}" orientation="${e=>e.orientation}" role="toolbar" @mousedown="${(e,o)=>e.mouseDownHandler(o.event)}" @focusin="${(e,o)=>e.focusinHandler(o.event)}" @keydown="${(e,o)=>e.keydownHandler(o.event)}" ${hs({property:"childItems",attributeFilter:["disabled","hidden"],filter:ce(),subtree:!0})}><slot name="label"></slot><div class="positioning-region" part="positioning-region">${Ct(i,t)}<slot ${X({filter:ce(),property:"slottedItems"})}></slot>${kt(i,t)}</div></template>`;function Bu(i){let t=i.getRootNode();return t instanceof ShadowRoot?t.activeElement:document.activeElement}var Va=Object.freeze({[Je.ArrowUp]:{[it.vertical]:-1},[Je.ArrowDown]:{[it.vertical]:1},[Je.ArrowLeft]:{[it.horizontal]:{[G.ltr]:-1,[G.rtl]:1}},[Je.ArrowRight]:{[it.horizontal]:{[G.ltr]:1,[G.rtl]:-1}}}),oe=class i extends O{constructor(){super(...arguments),this._activeIndex=0,this.direction=G.ltr,this.orientation=it.horizontal}get activeIndex(){return S.track(this,"activeIndex"),this._activeIndex}set activeIndex(t){this.$fastController.isConnected&&(this._activeIndex=ps(0,this.focusableElements.length-1,t),S.notify(this,"activeIndex"))}slottedItemsChanged(){this.$fastController.isConnected&&this.reduceFocusableElements()}mouseDownHandler(t){var e;let o=(e=this.focusableElements)===null||e===void 0?void 0:e.findIndex(s=>s.contains(t.target));return o>-1&&this.activeIndex!==o&&this.setFocusedElement(o),!0}childItemsChanged(t,e){this.$fastController.isConnected&&this.reduceFocusableElements()}connectedCallback(){super.connectedCallback(),this.direction=Pe(this)}focusinHandler(t){let e=t.relatedTarget;!e||this.contains(e)||this.setFocusedElement()}getDirectionalIncrementer(t){var e,o,s,n,r;return(r=(s=(o=(e=Va[t])===null||e===void 0?void 0:e[this.orientation])===null||o===void 0?void 0:o[this.direction])!==null&&s!==void 0?s:(n=Va[t])===null||n===void 0?void 0:n[this.orientation])!==null&&r!==void 0?r:0}keydownHandler(t){let e=t.key;if(!(e in Je)||t.defaultPrevented||t.shiftKey)return!0;let o=this.getDirectionalIncrementer(e);if(!o)return!t.target.closest("[role=radiogroup]");let s=this.activeIndex+o;return this.focusableElements[s]&&t.preventDefault(),this.setFocusedElement(s),!0}get allSlottedItems(){return[...this.start.assignedElements(),...this.slottedItems,...this.end.assignedElements()]}reduceFocusableElements(){var t;let e=(t=this.focusableElements)===null||t===void 0?void 0:t[this.activeIndex];this.focusableElements=this.allSlottedItems.reduce(i.reduceFocusableItems,[]);let o=this.focusableElements.indexOf(e);this.activeIndex=Math.max(0,o),this.setFocusableElements()}setFocusedElement(t=this.activeIndex){this.activeIndex=t,this.setFocusableElements(),this.focusableElements[this.activeIndex]&&this.contains(Bu(this))&&this.focusableElements[this.activeIndex].focus()}static reduceFocusableItems(t,e){var o,s,n,r;let a=e.getAttribute("role")==="radio",d=(s=(o=e.$fastController)===null||o===void 0?void 0:o.definition.shadowOptions)===null||s===void 0?void 0:s.delegatesFocus,u=Array.from((r=(n=e.shadowRoot)===null||n===void 0?void 0:n.querySelectorAll("*"))!==null&&r!==void 0?r:[]).some(p=>Oa(p));return!e.hasAttribute("disabled")&&!e.hasAttribute("hidden")&&(Oa(e)||a||d||u)?(t.push(e),t):e.childElementCount?t.concat(Array.from(e.children).reduce(i.reduceFocusableItems,[])):t}setFocusableElements(){this.$fastController.isConnected&&this.focusableElements.length>0&&this.focusableElements.forEach((t,e)=>{t.tabIndex=this.activeIndex===e?0:-1})}};l([m],oe.prototype,"direction",void 0);l([c],oe.prototype,"orientation",void 0);l([m],oe.prototype,"slottedItems",void 0);l([m],oe.prototype,"slottedLabel",void 0);l([m],oe.prototype,"childItems",void 0);var yi=class{};l([c({attribute:"aria-labelledby"})],yi.prototype,"ariaLabelledby",void 0);l([c({attribute:"aria-label"})],yi.prototype,"ariaLabel",void 0);Y(yi,j);Y(oe,pt,yi);var _u=(i,t)=>y` ${J(e=>e.tooltipVisible,y`<${i.tagFor(R)} fixed-placement="true" auto-update-mode="${e=>e.autoUpdateMode}" vertical-positioning-mode="${e=>e.verticalPositioningMode}" vertical-default-position="${e=>e.verticalDefaultPosition}" vertical-inset="${e=>e.verticalInset}" vertical-scaling="${e=>e.verticalScaling}" horizontal-positioning-mode="${e=>e.horizontalPositioningMode}" horizontal-default-position="${e=>e.horizontalDefaultPosition}" horizontal-scaling="${e=>e.horizontalScaling}" horizontal-inset="${e=>e.horizontalInset}" vertical-viewport-lock="${e=>e.horizontalViewportLock}" horizontal-viewport-lock="${e=>e.verticalViewportLock}" dir="${e=>e.currentDirection}" ${P("region")}><div class="tooltip" part="tooltip" role="tooltip"><slot></slot></div></${i.tagFor(R)}>`)} `,Ft={top:"top",right:"right",bottom:"bottom",left:"left",start:"start",end:"end",topLeft:"top-left",topRight:"top-right",bottomLeft:"bottom-left",bottomRight:"bottom-right",topStart:"top-start",topEnd:"top-end",bottomStart:"bottom-start",bottomEnd:"bottom-end"},K=class extends O{constructor(){super(...arguments),this.anchor="",this.delay=300,this.autoUpdateMode="anchor",this.anchorElement=null,this.viewportElement=null,this.verticalPositioningMode="dynamic",this.horizontalPositioningMode="dynamic",this.horizontalInset="false",this.verticalInset="false",this.horizontalScaling="content",this.verticalScaling="content",this.verticalDefaultPosition=void 0,this.horizontalDefaultPosition=void 0,this.tooltipVisible=!1,this.currentDirection=G.ltr,this.showDelayTimer=null,this.hideDelayTimer=null,this.isAnchorHoveredFocused=!1,this.isRegionHovered=!1,this.handlePositionChange=t=>{this.classList.toggle("top",this.region.verticalPosition==="start"),this.classList.toggle("bottom",this.region.verticalPosition==="end"),this.classList.toggle("inset-top",this.region.verticalPosition==="insetStart"),this.classList.toggle("inset-bottom",this.region.verticalPosition==="insetEnd"),this.classList.toggle("center-vertical",this.region.verticalPosition==="center"),this.classList.toggle("left",this.region.horizontalPosition==="start"),this.classList.toggle("right",this.region.horizontalPosition==="end"),this.classList.toggle("inset-left",this.region.horizontalPosition==="insetStart"),this.classList.toggle("inset-right",this.region.horizontalPosition==="insetEnd"),this.classList.toggle("center-horizontal",this.region.horizontalPosition==="center")},this.handleRegionMouseOver=t=>{this.isRegionHovered=!0},this.handleRegionMouseOut=t=>{this.isRegionHovered=!1,this.startHideDelayTimer()},this.handleAnchorMouseOver=t=>{if(this.tooltipVisible){this.isAnchorHoveredFocused=!0;return}this.startShowDelayTimer()},this.handleAnchorMouseOut=t=>{this.isAnchorHoveredFocused=!1,this.clearShowDelayTimer(),this.startHideDelayTimer()},this.handleAnchorFocusIn=t=>{this.startShowDelayTimer()},this.handleAnchorFocusOut=t=>{this.isAnchorHoveredFocused=!1,this.clearShowDelayTimer(),this.startHideDelayTimer()},this.startHideDelayTimer=()=>{this.clearHideDelayTimer(),this.tooltipVisible&&(this.hideDelayTimer=window.setTimeout(()=>{this.updateTooltipVisibility()},60))},this.clearHideDelayTimer=()=>{this.hideDelayTimer!==null&&(clearTimeout(this.hideDelayTimer),this.hideDelayTimer=null)},this.startShowDelayTimer=()=>{if(!this.isAnchorHoveredFocused){if(this.delay>1){this.showDelayTimer===null&&(this.showDelayTimer=window.setTimeout(()=>{this.startHover()},this.delay));return}this.startHover()}},this.startHover=()=>{this.isAnchorHoveredFocused=!0,this.updateTooltipVisibility()},this.clearShowDelayTimer=()=>{this.showDelayTimer!==null&&(clearTimeout(this.showDelayTimer),this.showDelayTimer=null)},this.getAnchor=()=>{let t=this.getRootNode();return t instanceof ShadowRoot?t.getElementById(this.anchor):document.getElementById(this.anchor)},this.handleDocumentKeydown=t=>{if(!t.defaultPrevented&&this.tooltipVisible)switch(t.key){case Si:this.isAnchorHoveredFocused=!1,this.updateTooltipVisibility(),this.$emit("dismiss");break}},this.updateTooltipVisibility=()=>{if(this.visible===!1)this.hideTooltip();else if(this.visible===!0){this.showTooltip();return}else{if(this.isAnchorHoveredFocused||this.isRegionHovered){this.showTooltip();return}this.hideTooltip()}},this.showTooltip=()=>{this.tooltipVisible||(this.currentDirection=Pe(this),this.tooltipVisible=!0,document.addEventListener("keydown",this.handleDocumentKeydown),D.queueUpdate(this.setRegionProps))},this.hideTooltip=()=>{this.tooltipVisible&&(this.clearHideDelayTimer(),this.region!==null&&this.region!==void 0&&(this.region.removeEventListener("positionchange",this.handlePositionChange),this.region.viewportElement=null,this.region.anchorElement=null,this.region.removeEventListener("mouseover",this.handleRegionMouseOver),this.region.removeEventListener("mouseout",this.handleRegionMouseOut)),document.removeEventListener("keydown",this.handleDocumentKeydown),this.tooltipVisible=!1)},this.setRegionProps=()=>{this.tooltipVisible&&(this.region.viewportElement=this.viewportElement,this.region.anchorElement=this.anchorElement,this.region.addEventListener("positionchange",this.handlePositionChange),this.region.addEventListener("mouseover",this.handleRegionMouseOver,{passive:!0}),this.region.addEventListener("mouseout",this.handleRegionMouseOut,{passive:!0}))}}visibleChanged(){this.$fastController.isConnected&&(this.updateTooltipVisibility(),this.updateLayout())}anchorChanged(){this.$fastController.isConnected&&(this.anchorElement=this.getAnchor())}positionChanged(){this.$fastController.isConnected&&this.updateLayout()}anchorElementChanged(t){if(this.$fastController.isConnected){if(t!=null&&(t.removeEventListener("mouseover",this.handleAnchorMouseOver),t.removeEventListener("mouseout",this.handleAnchorMouseOut),t.removeEventListener("focusin",this.handleAnchorFocusIn),t.removeEventListener("focusout",this.handleAnchorFocusOut)),this.anchorElement!==null&&this.anchorElement!==void 0){this.anchorElement.addEventListener("mouseover",this.handleAnchorMouseOver,{passive:!0}),this.anchorElement.addEventListener("mouseout",this.handleAnchorMouseOut,{passive:!0}),this.anchorElement.addEventListener("focusin",this.handleAnchorFocusIn,{passive:!0}),this.anchorElement.addEventListener("focusout",this.handleAnchorFocusOut,{passive:!0});let e=this.anchorElement.id;this.anchorElement.parentElement!==null&&this.anchorElement.parentElement.querySelectorAll(":hover").forEach(o=>{o.id===e&&this.startShowDelayTimer()})}this.region!==null&&this.region!==void 0&&this.tooltipVisible&&(this.region.anchorElement=this.anchorElement),this.updateLayout()}}viewportElementChanged(){this.region!==null&&this.region!==void 0&&(this.region.viewportElement=this.viewportElement),this.updateLayout()}connectedCallback(){super.connectedCallback(),this.anchorElement=this.getAnchor(),this.updateTooltipVisibility()}disconnectedCallback(){this.hideTooltip(),this.clearShowDelayTimer(),this.clearHideDelayTimer(),super.disconnectedCallback()}updateLayout(){switch(this.verticalPositioningMode="locktodefault",this.horizontalPositioningMode="locktodefault",this.position){case Ft.top:case Ft.bottom:this.verticalDefaultPosition=this.position,this.horizontalDefaultPosition="center";break;case Ft.right:case Ft.left:case Ft.start:case Ft.end:this.verticalDefaultPosition="center",this.horizontalDefaultPosition=this.position;break;case Ft.topLeft:this.verticalDefaultPosition="top",this.horizontalDefaultPosition="left";break;case Ft.topRight:this.verticalDefaultPosition="top",this.horizontalDefaultPosition="right";break;case Ft.bottomLeft:this.verticalDefaultPosition="bottom",this.horizontalDefaultPosition="left";break;case Ft.bottomRight:this.verticalDefaultPosition="bottom",this.horizontalDefaultPosition="right";break;case Ft.topStart:this.verticalDefaultPosition="top",this.horizontalDefaultPosition="start";break;case Ft.topEnd:this.verticalDefaultPosition="top",this.horizontalDefaultPosition="end";break;case Ft.bottomStart:this.verticalDefaultPosition="bottom",this.horizontalDefaultPosition="start";break;case Ft.bottomEnd:this.verticalDefaultPosition="bottom",this.horizontalDefaultPosition="end";break;default:this.verticalPositioningMode="dynamic",this.horizontalPositioningMode="dynamic",this.verticalDefaultPosition=void 0,this.horizontalDefaultPosition="center";break}}};l([c({mode:"boolean"})],K.prototype,"visible",void 0);l([c],K.prototype,"anchor",void 0);l([c],K.prototype,"delay",void 0);l([c],K.prototype,"position",void 0);l([c({attribute:"auto-update-mode"})],K.prototype,"autoUpdateMode",void 0);l([c({attribute:"horizontal-viewport-lock"})],K.prototype,"horizontalViewportLock",void 0);l([c({attribute:"vertical-viewport-lock"})],K.prototype,"verticalViewportLock",void 0);l([m],K.prototype,"anchorElement",void 0);l([m],K.prototype,"viewportElement",void 0);l([m],K.prototype,"verticalPositioningMode",void 0);l([m],K.prototype,"horizontalPositioningMode",void 0);l([m],K.prototype,"horizontalInset",void 0);l([m],K.prototype,"verticalInset",void 0);l([m],K.prototype,"horizontalScaling",void 0);l([m],K.prototype,"verticalScaling",void 0);l([m],K.prototype,"verticalDefaultPosition",void 0);l([m],K.prototype,"horizontalDefaultPosition",void 0);l([m],K.prototype,"tooltipVisible",void 0);l([m],K.prototype,"currentDirection",void 0);var ju=(i,t)=>y`<template role="treeitem" slot="${e=>e.isNestedItem()?"item":void 0}" tabindex="-1" class="${e=>e.expanded?"expanded":""} ${e=>e.selected?"selected":""} ${e=>e.nested?"nested":""} ${e=>e.disabled?"disabled":""}" aria-expanded="${e=>e.childItems&&e.childItemLength()>0?e.expanded:void 0}" aria-selected="${e=>e.selected}" aria-disabled="${e=>e.disabled}" @focusin="${(e,o)=>e.handleFocus(o.event)}" @focusout="${(e,o)=>e.handleBlur(o.event)}" ${hs({property:"childItems",filter:ce()})}><div class="positioning-region" part="positioning-region"><div class="content-region" part="content-region">${J(e=>e.childItems&&e.childItemLength()>0,y`<div aria-hidden="true" class="expand-collapse-button" part="expand-collapse-button" @click="${(e,o)=>e.handleExpandCollapseButtonClick(o.event)}" ${P("expandCollapseButton")}><slot name="expand-collapse-glyph">${t.expandCollapseGlyph||""}</slot></div>`)} ${Ct(i,t)}<slot></slot>${kt(i,t)}</div></div>${J(e=>e.childItems&&e.childItemLength()>0&&(e.expanded||e.renderCollapsedChildren),y`<div role="group" class="items" part="items"><slot name="item" ${X("items")}></slot></div>`)}</template>`;function xe(i){return ai(i)&&i.getAttribute("role")==="treeitem"}var et=class extends O{constructor(){super(...arguments),this.expanded=!1,this.focusable=!1,this.isNestedItem=()=>xe(this.parentElement),this.handleExpandCollapseButtonClick=t=>{!this.disabled&&!t.defaultPrevented&&(this.expanded=!this.expanded)},this.handleFocus=t=>{this.setAttribute("tabindex","0")},this.handleBlur=t=>{this.setAttribute("tabindex","-1")}}expandedChanged(){this.$fastController.isConnected&&this.$emit("expanded-change",this)}selectedChanged(){this.$fastController.isConnected&&this.$emit("selected-change",this)}itemsChanged(t,e){this.$fastController.isConnected&&this.items.forEach(o=>{xe(o)&&(o.nested=!0)})}static focusItem(t){t.focusable=!0,t.focus()}childItemLength(){let t=this.childItems.filter(e=>xe(e));return t?t.length:0}};l([c({mode:"boolean"})],et.prototype,"expanded",void 0);l([c({mode:"boolean"})],et.prototype,"selected",void 0);l([c({mode:"boolean"})],et.prototype,"disabled",void 0);l([m],et.prototype,"focusable",void 0);l([m],et.prototype,"childItems",void 0);l([m],et.prototype,"items",void 0);l([m],et.prototype,"nested",void 0);l([m],et.prototype,"renderCollapsedChildren",void 0);Y(et,pt);var Uu=(i,t)=>y`<template role="tree" ${P("treeView")} @keydown="${(e,o)=>e.handleKeyDown(o.event)}" @focusin="${(e,o)=>e.handleFocus(o.event)}" @focusout="${(e,o)=>e.handleBlur(o.event)}" @click="${(e,o)=>e.handleClick(o.event)}" @selected-change="${(e,o)=>e.handleSelectedChange(o.event)}"><slot ${X("slottedTreeItems")}></slot></template>`,xi=class extends O{constructor(){super(...arguments),this.currentFocused=null,this.handleFocus=t=>{if(!(this.slottedTreeItems.length<1)){if(t.target===this){this.currentFocused===null&&(this.currentFocused=this.getValidFocusableItem()),this.currentFocused!==null&&et.focusItem(this.currentFocused);return}this.contains(t.target)&&(this.setAttribute("tabindex","-1"),this.currentFocused=t.target)}},this.handleBlur=t=>{t.target instanceof HTMLElement&&(t.relatedTarget===null||!this.contains(t.relatedTarget))&&this.setAttribute("tabindex","0")},this.handleKeyDown=t=>{if(t.defaultPrevented)return;if(this.slottedTreeItems.length<1)return!0;let e=this.getVisibleNodes();switch(t.key){case ne:e.length&&et.focusItem(e[0]);return;case re:e.length&&et.focusItem(e[e.length-1]);return;case we:if(t.target&&this.isFocusableElement(t.target)){let o=t.target;o instanceof et&&o.childItemLength()>0&&o.expanded?o.expanded=!1:o instanceof et&&o.parentElement instanceof et&&et.focusItem(o.parentElement)}return!1;case $e:if(t.target&&this.isFocusableElement(t.target)){let o=t.target;o instanceof et&&o.childItemLength()>0&&!o.expanded?o.expanded=!0:o instanceof et&&o.childItemLength()>0&&this.focusNextNode(1,t.target)}return;case zt:t.target&&this.isFocusableElement(t.target)&&this.focusNextNode(1,t.target);return;case Ht:t.target&&this.isFocusableElement(t.target)&&this.focusNextNode(-1,t.target);return;case fe:this.handleClick(t);return}return!0},this.handleSelectedChange=t=>{if(t.defaultPrevented)return;if(!(t.target instanceof Element)||!xe(t.target))return!0;let e=t.target;e.selected?(this.currentSelected&&this.currentSelected!==e&&(this.currentSelected.selected=!1),this.currentSelected=e):!e.selected&&this.currentSelected===e&&(this.currentSelected=null)},this.setItems=()=>{let t=this.treeView.querySelector("[aria-selected='true']");this.currentSelected=t,(this.currentFocused===null||!this.contains(this.currentFocused))&&(this.currentFocused=this.getValidFocusableItem()),this.nested=this.checkForNestedItems(),this.getVisibleNodes().forEach(o=>{xe(o)&&(o.nested=this.nested)})},this.isFocusableElement=t=>xe(t),this.isSelectedElement=t=>t.selected}slottedTreeItemsChanged(){this.$fastController.isConnected&&this.setItems()}connectedCallback(){super.connectedCallback(),this.setAttribute("tabindex","0"),D.queueUpdate(()=>{this.setItems()})}handleClick(t){if(t.defaultPrevented)return;if(!(t.target instanceof Element)||!xe(t.target))return!0;let e=t.target;e.disabled||(e.selected=!e.selected)}focusNextNode(t,e){let o=this.getVisibleNodes();if(!o)return;let s=o[o.indexOf(e)+t];ai(s)&&et.focusItem(s)}getValidFocusableItem(){let t=this.getVisibleNodes(),e=t.findIndex(this.isSelectedElement);return e===-1&&(e=t.findIndex(this.isFocusableElement)),e!==-1?t[e]:null}checkForNestedItems(){return this.slottedTreeItems.some(t=>xe(t)&&t.querySelector("[role='treeitem']"))}getVisibleNodes(){return yh(this,"[role='treeitem']")||[]}};l([c({attribute:"render-collapsed-nodes"})],xi.prototype,"renderCollapsedNodes",void 0);l([m],xi.prototype,"currentSelected",void 0);l([m],xi.prototype,"slottedTreeItems",void 0);var rr=class{constructor(t){this.listenerCache=new WeakMap,this.query=t}bind(t){let{query:e}=this,o=this.constructListener(t);o.bind(e)(),e.addListener(o),this.listenerCache.set(t,o)}unbind(t){let e=this.listenerCache.get(t);e&&(this.query.removeListener(e),this.listenerCache.delete(t))}},Ji=class i extends rr{constructor(t,e){super(t),this.styles=e}static with(t){return e=>new i(t,e)}constructListener(t){let e=!1,o=this.styles;return function(){let{matches:n}=this;n&&!e?(t.$fastController.addStyles(o),e=n):!n&&e&&(t.$fastController.removeStyles(o),e=n)}}unbind(t){super.unbind(t),t.$fastController.removeStyles(this.styles)}},z=Ji.with(window.matchMedia("(forced-colors)"));Ji.with(window.matchMedia("(prefers-color-scheme: dark)"));Ji.with(window.matchMedia("(prefers-color-scheme: light)"));var ar=class{constructor(t,e,o){this.propertyName=t,this.value=e,this.styles=o}bind(t){S.getNotifier(t).subscribe(this,this.propertyName),this.handleChange(t,this.propertyName)}unbind(t){S.getNotifier(t).unsubscribe(this,this.propertyName),t.$fastController.removeStyles(this.styles)}handleChange(t,e){t[e]===this.value?t.$fastController.addStyles(this.styles):t.$fastController.removeStyles(this.styles)}},Pt="not-allowed",qu=":host([hidden]){display:none}";function H(i){return`${qu}:host{display:${i}}`}var E=wh()?"focus-visible":"focus";function Le(i,t,e){return isNaN(i)||i<=t?t:i>=e?e:i}function Js(i,t,e){return isNaN(i)||i<=t?0:i>=e?1:i/(e-t)}function Oe(i,t,e){return isNaN(i)?t:t+i*(e-t)}function Gu(i){let t=Math.round(Le(i,0,255)).toString(16);return t.length===1?"0"+t:t}function xo(i,t,e){return isNaN(i)||i<=0?t:i>=1?e:t+i*(e-t)}function vt(i,t){let e=Math.pow(10,t);return Math.round(i*e)/e}var Wo=class i{constructor(t,e,o){this.h=t,this.s=e,this.l=o}static fromObject(t){return t&&!isNaN(t.h)&&!isNaN(t.s)&&!isNaN(t.l)?new i(t.h,t.s,t.l):null}equalValue(t){return this.h===t.h&&this.s===t.s&&this.l===t.l}roundToPrecision(t){return new i(vt(this.h,t),vt(this.s,t),vt(this.l,t))}toObject(){return{h:this.h,s:this.s,l:this.l}}},ct=class i{constructor(t,e,o){this.l=t,this.a=e,this.b=o}static fromObject(t){return t&&!isNaN(t.l)&&!isNaN(t.a)&&!isNaN(t.b)?new i(t.l,t.a,t.b):null}equalValue(t){return this.l===t.l&&this.a===t.a&&this.b===t.b}roundToPrecision(t){return new i(vt(this.l,t),vt(this.a,t),vt(this.b,t))}toObject(){return{l:this.l,a:this.a,b:this.b}}};ct.epsilon=216/24389;ct.kappa=24389/27;var ot=class i{constructor(t,e,o,s){this.r=t,this.g=e,this.b=o,this.a=typeof s=="number"&&!isNaN(s)?s:1}static fromObject(t){return t&&!isNaN(t.r)&&!isNaN(t.g)&&!isNaN(t.b)?new i(t.r,t.g,t.b,t.a):null}equalValue(t){return this.r===t.r&&this.g===t.g&&this.b===t.b&&this.a===t.a}toStringHexRGB(){return"#"+[this.r,this.g,this.b].map(this.formatHexValue).join("")}toStringHexRGBA(){return this.toStringHexRGB()+this.formatHexValue(this.a)}toStringHexARGB(){return"#"+[this.a,this.r,this.g,this.b].map(this.formatHexValue).join("")}toStringWebRGB(){return`rgb(${Math.round(Oe(this.r,0,255))},${Math.round(Oe(this.g,0,255))},${Math.round(Oe(this.b,0,255))})`}toStringWebRGBA(){return`rgba(${Math.round(Oe(this.r,0,255))},${Math.round(Oe(this.g,0,255))},${Math.round(Oe(this.b,0,255))},${Le(this.a,0,1)})`}roundToPrecision(t){return new i(vt(this.r,t),vt(this.g,t),vt(this.b,t),vt(this.a,t))}clamp(){return new i(Le(this.r,0,1),Le(this.g,0,1),Le(this.b,0,1),Le(this.a,0,1))}toObject(){return{r:this.r,g:this.g,b:this.b,a:this.a}}formatHexValue(t){return Gu(Oe(t,0,255))}},Lt=class i{constructor(t,e,o){this.x=t,this.y=e,this.z=o}static fromObject(t){return t&&!isNaN(t.x)&&!isNaN(t.y)&&!isNaN(t.z)?new i(t.x,t.y,t.z):null}equalValue(t){return this.x===t.x&&this.y===t.y&&this.z===t.z}roundToPrecision(t){return new i(vt(this.x,t),vt(this.y,t),vt(this.z,t))}toObject(){return{x:this.x,y:this.y,z:this.z}}};Lt.whitePoint=new Lt(.95047,1,1.08883);function Wu(i){return i.r*.2126+i.g*.7152+i.b*.0722}function Sl(i){function t(e){return e<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)}return Wu(new ot(t(i.r),t(i.g),t(i.b),1))}function Ks(i,t,e){return e-t===0?0:(i-t)/(e-t)}function tn(i,t,e){let o=Ks(i.r,t.r,e.r),s=Ks(i.g,t.g,e.g),n=Ks(i.b,t.b,e.b);return(o+s+n)/3}function Xu(i,t,e=null){let o=0,s=e;return s!==null?o=tn(i,t,s):(s=new ot(0,0,0,1),o=tn(i,t,s),o<=0&&(s=new ot(1,1,1,1),o=tn(i,t,s))),o=Math.round(o*1e3)/1e3,new ot(s.r,s.g,s.b,o)}function za(i){let t=Math.max(i.r,i.g,i.b),e=Math.min(i.r,i.g,i.b),o=t-e,s=0;o!==0&&(t===i.r?s=60*((i.g-i.b)/o%6):t===i.g?s=60*((i.b-i.r)/o+2):s=60*((i.r-i.g)/o+4)),s<0&&(s+=360);let n=(t+e)/2,r=0;return o!==0&&(r=o/(1-Math.abs(2*n-1))),new Wo(s,r,n)}function Yu(i,t=1){let e=(1-Math.abs(2*i.l-1))*i.s,o=e*(1-Math.abs(i.h/60%2-1)),s=i.l-e/2,n=0,r=0,a=0;return i.h<60?(n=e,r=o,a=0):i.h<120?(n=o,r=e,a=0):i.h<180?(n=0,r=e,a=o):i.h<240?(n=0,r=o,a=e):i.h<300?(n=o,r=0,a=e):i.h<360&&(n=e,r=0,a=o),new ot(n+s,r+s,a+s,t)}function Qu(i){let t=(i.l+16)/116,e=t+i.a/500,o=t-i.b/200,s=Math.pow(e,3),n=Math.pow(t,3),r=Math.pow(o,3),a=0;s>ct.epsilon?a=s:a=(116*e-16)/ct.kappa;let d=0;i.l>ct.epsilon*ct.kappa?d=n:d=i.l/ct.kappa;let u=0;return r>ct.epsilon?u=r:u=(116*o-16)/ct.kappa,a=Lt.whitePoint.x*a,d=Lt.whitePoint.y*d,u=Lt.whitePoint.z*u,new Lt(a,d,u)}function Zu(i){function t(d){return d>ct.epsilon?Math.pow(d,1/3):(ct.kappa*d+16)/116}let e=t(i.x/Lt.whitePoint.x),o=t(i.y/Lt.whitePoint.y),s=t(i.z/Lt.whitePoint.z),n=116*o-16,r=500*(e-o),a=200*(o-s);return new ct(n,r,a)}function Ju(i){function t(d){return d<=.04045?d/12.92:Math.pow((d+.055)/1.055,2.4)}let e=t(i.r),o=t(i.g),s=t(i.b),n=e*.4124564+o*.3575761+s*.1804375,r=e*.2126729+o*.7151522+s*.072175,a=e*.0193339+o*.119192+s*.9503041;return new Lt(n,r,a)}function Ku(i,t=1){function e(r){return r<=.0031308?r*12.92:1.055*Math.pow(r,1/2.4)-.055}let o=e(i.x*3.2404542-i.y*1.5371385-i.z*.4985314),s=e(i.x*-.969266+i.y*1.8760108+i.z*.041556),n=e(i.x*.0556434-i.y*.2040259+i.z*1.0572252);return new ot(o,s,n,t)}function tp(i){return Zu(Ju(i))}function en(i,t=1){return Ku(Qu(i),t)}var Ha;(function(i){i[i.Burn=0]="Burn",i[i.Color=1]="Color",i[i.Darken=2]="Darken",i[i.Dodge=3]="Dodge",i[i.Lighten=4]="Lighten",i[i.Multiply=5]="Multiply",i[i.Overlay=6]="Overlay",i[i.Screen=7]="Screen"})(Ha||(Ha={}));function ep(i,t){if(t.a>=1)return t;if(t.a<=0)return new ot(i.r,i.g,i.b,1);let e=t.a*t.r+(1-t.a)*i.r,o=t.a*t.g+(1-t.a)*i.g,s=t.a*t.b+(1-t.a)*i.b;return new ot(e,o,s,1)}function wo(i,t,e){return isNaN(i)||i<=0?t:i>=1?e:new ot(xo(i,t.r,e.r),xo(i,t.g,e.g),xo(i,t.b,e.b),xo(i,t.a,e.a))}var Pa;(function(i){i[i.RGB=0]="RGB",i[i.HSL=1]="HSL",i[i.HSV=2]="HSV",i[i.XYZ=3]="XYZ",i[i.LAB=4]="LAB",i[i.LCH=5]="LCH"})(Pa||(Pa={}));var ip=/^#((?:[0-9a-f]{6}|[0-9a-f]{3}))$/i;function ze(i){let t=ip.exec(i);if(t===null)return null;let e=t[1];if(e.length===3){let s=e.charAt(0),n=e.charAt(1),r=e.charAt(2);e=s.concat(s,n,n,r,r)}let o=parseInt(e,16);return isNaN(o)?null:new ot(Js((o&16711680)>>>16,0,255),Js((o&65280)>>>8,0,255),Js(o&255,0,255),1)}function Xo(i,t){let e=i.relativeLuminance>t.relativeLuminance?i:t,o=i.relativeLuminance>t.relativeLuminance?t:i;return(e.relativeLuminance+.05)/(o.relativeLuminance+.05)}var Tt=Object.freeze({create(i,t,e){return new Yo(i,t,e)},from(i){return new Yo(i.r,i.g,i.b)}});function op(i){let t={r:0,g:0,b:0,toColorString:()=>"",contrast:()=>0,relativeLuminance:0};for(let e in t)if(typeof t[e]!=typeof i[e])return!1;return!0}var Yo=class i extends ot{constructor(t,e,o){super(t,e,o,1),this.toColorString=this.toStringHexRGB,this.contrast=Xo.bind(null,this),this.createCSS=this.toColorString,this.relativeLuminance=Sl(this)}static fromObject(t){return new i(t.r,t.g,t.b)}};function lr(i,t,e=0,o=i.length-1){if(o===e)return i[e];let s=Math.floor((o-e)/2)+e;return t(i[s])?lr(i,t,e,s):lr(i,t,s+1,o)}var sp=(-.1+Math.sqrt(.21))/2;function oo(i){return i.relativeLuminance<=sp}function Ge(i){return oo(i)?-1:1}var Ma={stepContrast:1.03,stepContrastRamp:.03,preserveSource:!1};function np(i,t,e){return typeof i=="number"?Ki.from(Tt.create(i,t,e)):Ki.from(i)}function rp(i,t){return op(i)?Qo.from(i,t):Qo.from(Tt.create(i.r,i.g,i.b),t)}var Ki=Object.freeze({create:np,from:rp}),Qo=class i{constructor(t,e){this.closestIndexCache=new Map,this.source=t,this.swatches=e,this.reversedSwatches=Object.freeze([...this.swatches].reverse()),this.lastIndex=this.swatches.length-1}colorContrast(t,e,o,s){o===void 0&&(o=this.closestIndexOf(t));let n=this.swatches,r=this.lastIndex,a=o;s===void 0&&(s=Ge(t));let d=u=>Xo(t,u)>=e;return s===-1&&(n=this.reversedSwatches,a=r-a),lr(n,d,a,r)}get(t){return this.swatches[t]||this.swatches[Le(t,0,this.lastIndex)]}closestIndexOf(t){if(this.closestIndexCache.has(t.relativeLuminance))return this.closestIndexCache.get(t.relativeLuminance);let e=this.swatches.indexOf(t);if(e!==-1)return this.closestIndexCache.set(t.relativeLuminance,e),e;let o=this.swatches.reduce((s,n)=>Math.abs(n.relativeLuminance-t.relativeLuminance)<Math.abs(s.relativeLuminance-t.relativeLuminance)?n:s);return e=this.swatches.indexOf(o),this.closestIndexCache.set(t.relativeLuminance,e),e}static saturationBump(t,e){let s=za(t).s,n=za(e);if(n.s<s){let r=new Wo(n.h,s,n.l);return Yu(r)}return e}static ramp(t){let e=t/100;return e>.5?(e-.5)/.5:2*e}static createHighResolutionPalette(t){let e=[],o=tp(ot.fromObject(t).roundToPrecision(4)),s=en(new ct(0,o.a,o.b)).clamp().roundToPrecision(4),n=en(new ct(50,o.a,o.b)).clamp().roundToPrecision(4),r=en(new ct(100,o.a,o.b)).clamp().roundToPrecision(4),a=new ot(0,0,0),d=new ot(1,1,1),u=r.equalValue(d)?0:14,p=s.equalValue(a)?0:14;for(let f=100+u;f>=0-p;f-=.5){let v;if(f<0){let T=f/p+1;v=wo(T,a,s)}else if(f<=50)v=wo(i.ramp(f),s,n);else if(f<=100)v=wo(i.ramp(f),n,r);else{let T=(f-100)/u;v=wo(T,r,d)}v=i.saturationBump(n,v).roundToPrecision(4),e.push(Tt.from(v))}return new i(t,e)}static adjustEnd(t,e,o,s){let n=s===-1?e.swatches:e.reversedSwatches,r=u=>{let p=e.closestIndexOf(u);return s===1?e.lastIndex-p:p};s===1&&o.reverse();let a=t(o[o.length-2]);if(vt(Xo(o[o.length-1],o[o.length-2]),2)<a){o.pop();let u=e.colorContrast(n[e.lastIndex],a,void 0,s),p=r(u),f=r(o[o.length-2]),v=p-f,T=1;for(let A=o.length-v-1;A<o.length;A++){let N=r(o[A]),U=A===o.length-1?e.lastIndex:N+T;o[A]=n[U],T++}}s===1&&o.reverse()}static createColorPaletteByContrast(t,e){let o=i.createHighResolutionPalette(t),s=a=>{let d=e.stepContrast+e.stepContrast*(1-a.relativeLuminance)*e.stepContrastRamp;return vt(d,2)},n=[],r=e.preserveSource?t:o.swatches[0];n.push(r);do{let a=s(r);r=o.colorContrast(r,a,void 0,1),n.push(r)}while(r.relativeLuminance>0);if(e.preserveSource){r=t;do{let a=s(r);r=o.colorContrast(r,a,void 0,-1),n.unshift(r)}while(r.relativeLuminance<1)}return this.adjustEnd(s,o,n,-1),e.preserveSource&&this.adjustEnd(s,o,n,1),n}static from(t,e){let o=e===void 0?Ma:Object.assign(Object.assign({},Ma),e);return new i(t,Object.freeze(i.createColorPaletteByContrast(t,o)))}},Zo=Tt.create(1,1,1),Cr=Tt.create(0,0,0),ap=Tt.create(.5,.5,.5),on=ze("#0078D4"),lp=Tt.create(on.r,on.g,on.b);function Tl(i,t,e,o,s){let n=p=>p.contrast(Zo)>=s?Zo:Cr,r=n(i),a=n(t),d=r.relativeLuminance===a.relativeLuminance?r:n(e),u=n(o);return{rest:r,hover:a,active:d,focus:u}}var Jo=class i{constructor(t,e,o,s){this.toColorString=()=>this.cssGradient,this.contrast=Xo.bind(null,this),this.createCSS=this.toColorString,this.color=new ot(t,e,o),this.cssGradient=s,this.relativeLuminance=Sl(this.color),this.r=t,this.g=e,this.b=o}static fromObject(t,e){return new i(t.r,t.g,t.b,e)}},cp=new ot(0,0,0),dp=new ot(1,1,1);function Dl(i,t,e,o,s,n,r,a,d=10,u=!1){let p=i.closestIndexOf(t);a===void 0&&(a=Ge(t));function f(Bt){if(u){let be=i.closestIndexOf(t),Re=i.get(be),_t=Bt.relativeLuminance<t.relativeLuminance?cp:dp,uo=Xu(ze(Bt.toColorString()),ze(Re.toColorString()),_t).roundToPrecision(2),Ps=ep(ze(t.toColorString()),uo);return Tt.from(Ps)}else return Bt}let v=p+a*e,T=v+a*(o-e),A=v+a*(s-e),N=v+a*(n-e),U=a===-1?0:100-d,Ot=a===-1?d:100;function lt(Bt,be){let Re=i.get(Bt);if(be){let _t=i.get(Bt+a*r),uo=a===-1?_t:Re,Ps=a===-1?Re:_t,Id=`linear-gradient(${f(uo).toColorString()} ${U}%, ${f(Ps).toColorString()} ${Ot}%)`;return Jo.fromObject(uo,Id)}else return f(Re)}return{rest:lt(v,!0),hover:lt(T,!0),active:lt(A,!1),focus:lt(N,!0)}}function hp(i,t,e,o,s,n,r,a){let d=i.closestIndexOf(t),u=Ge(t),p=d+u*e,f=p+u*(o-e),v=p+u*(s-e),T=p+u*(n-e),A=`calc(100% - ${a})`;function N(U,Ot){let lt=i.get(U);if(Ot){let Bt=i.get(U+u*r),be=`linear-gradient(${lt.toColorString()} ${A}, ${Bt.toColorString()} ${A}, ${Bt.toColorString()})`;return Jo.fromObject(lt,be)}else return lt}return{rest:N(p,!0),hover:N(f,!0),active:N(v,!1),focus:N(T,!0)}}function up(i,t,e){return i.colorContrast(t,e)}function wi(i,t,e,o,s,n,r,a){a==null&&(a=Ge(t));let d=i.closestIndexOf(i.colorContrast(t,e));return{rest:i.get(d+a*o),hover:i.get(d+a*s),active:i.get(d+a*n),focus:i.get(d+a*r)}}function pp(i,t,e,o,s,n,r,a=void 0,d,u,p,f,v,T=void 0){return oo(t)?wi(i,t,d,u,p,f,v,T):wi(i,t,e,o,s,n,r,a)}function fp(i,t,e){return i.get(i.closestIndexOf(t)+Ge(t)*e)}function Ce(i,t,e,o,s,n,r){let a=i.closestIndexOf(t);return r==null&&(r=Ge(t)),{rest:i.get(a+r*e),hover:i.get(a+r*o),active:i.get(a+r*s),focus:i.get(a+r*n)}}function Fr(i,t,e,o,s,n,r=void 0,a,d,u,p,f=void 0){return oo(t)?Ce(i,t,a,d,u,p,f):Ce(i,t,e,o,s,n,r)}function gp(i,t){return oo(t)?Zo:Cr}function mp(i,t,e){return oo(t)?Cr:Zo}function bp(i){return Tt.create(i,i,i)}var se;(function(i){i[i.LightMode=.98]="LightMode",i[i.DarkMode=.15]="DarkMode"})(se||(se={}));function so(i,t){return i.closestIndexOf(bp(t))}function vp(i,t){return i.get(so(i,t))}function yp(i,t,e){return i.get(so(i,t)+e)}function Rl(i,t,e){return i.get(so(i,t)+e*-1)}function xp(i,t,e){return i.get(so(i,t)+e*-1*2)}function wp(i,t,e){return i.get(so(i,t)+e*-1*3)}var $p={Thin:100,ExtraLight:200,Light:300,Normal:400,Medium:500,SemiBold:600,Bold:700,ExtraBold:800,Black:900},{create:g}=_;function x(i){return _.create({name:i,cssCustomPropertyName:null})}var Oo=g("direction").withDefault(G.ltr),Et=g("disabled-opacity").withDefault(.3),fs=g("base-height-multiplier").withDefault(8),kp=g("base-horizontal-spacing-multiplier").withDefault(3),Se=g("density").withDefault(0),$=g("design-unit").withDefault(4),M=g("control-corner-radius").withDefault(4),te=g("layer-corner-radius").withDefault(8),I=g("stroke-width").withDefault(1),ht=g("focus-stroke-width").withDefault(2),Mt=g("body-font").withDefault('"Segoe UI Variable", "Segoe UI", sans-serif'),Cp=g("font-weight").withDefault($p.Normal);function me(i){return t=>{let e=i.getValueFor(t),o=Cp.getValueFor(t);if(e.endsWith("px")){let s=Number.parseFloat(e.replace("px",""));if(s<=12)return`"wght" ${o}, "opsz" 8`;if(s>24)return`"wght" ${o}, "opsz" 36`}return`"wght" ${o}, "opsz" 10.5`}}var Ir=g("type-ramp-base-font-size").withDefault("14px"),El=g("type-ramp-base-line-height").withDefault("20px"),Fp=g("type-ramp-base-font-variations").withDefault(me(Ir)),Sr=g("type-ramp-minus-1-font-size").withDefault("12px"),Tr=g("type-ramp-minus-1-line-height").withDefault("16px"),Ip=g("type-ramp-minus-1-font-variations").withDefault(me(Sr)),Dr=g("type-ramp-minus-2-font-size").withDefault("10px"),Ol=g("type-ramp-minus-2-line-height").withDefault("14px"),Sp=g("type-ramp-minus-2-font-variations").withDefault(me(Dr)),Rr=g("type-ramp-plus-1-font-size").withDefault("16px"),Al=g("type-ramp-plus-1-line-height").withDefault("22px"),Tp=g("type-ramp-plus-1-font-variations").withDefault(me(Rr)),Er=g("type-ramp-plus-2-font-size").withDefault("20px"),Ll=g("type-ramp-plus-2-line-height").withDefault("26px"),Dp=g("type-ramp-plus-2-font-variations").withDefault(me(Er)),Or=g("type-ramp-plus-3-font-size").withDefault("24px"),Vl=g("type-ramp-plus-3-line-height").withDefault("32px"),Rp=g("type-ramp-plus-3-font-variations").withDefault(me(Or)),Ar=g("type-ramp-plus-4-font-size").withDefault("28px"),zl=g("type-ramp-plus-4-line-height").withDefault("36px"),Ep=g("type-ramp-plus-4-font-variations").withDefault(me(Ar)),Lr=g("type-ramp-plus-5-font-size").withDefault("32px"),Hl=g("type-ramp-plus-5-line-height").withDefault("40px"),Op=g("type-ramp-plus-5-font-variations").withDefault(me(Lr)),Vr=g("type-ramp-plus-6-font-size").withDefault("40px"),Pl=g("type-ramp-plus-6-line-height").withDefault("52px"),Ap=g("type-ramp-plus-6-font-variations").withDefault(me(Vr)),Dt=g("base-layer-luminance").withDefault(se.LightMode),cr=x("accent-fill-rest-delta").withDefault(0),dr=x("accent-fill-hover-delta").withDefault(-2),hr=x("accent-fill-active-delta").withDefault(-5),ur=x("accent-fill-focus-delta").withDefault(0),Ml=x("accent-foreground-rest-delta").withDefault(0),Nl=x("accent-foreground-hover-delta").withDefault(3),Bl=x("accent-foreground-active-delta").withDefault(-8),_l=x("accent-foreground-focus-delta").withDefault(0),jl=x("neutral-fill-rest-delta").withDefault(-1),Ul=x("neutral-fill-hover-delta").withDefault(1),ql=x("neutral-fill-active-delta").withDefault(0),Gl=x("neutral-fill-focus-delta").withDefault(0),Wl=x("neutral-fill-input-rest-delta").withDefault(-1),Xl=x("neutral-fill-input-hover-delta").withDefault(1),Yl=x("neutral-fill-input-active-delta").withDefault(0),Ql=x("neutral-fill-input-focus-delta").withDefault(-2),$o=x("neutral-fill-input-alt-rest-delta").withDefault(2),Na=x("neutral-fill-input-alt-hover-delta").withDefault(4),Ba=x("neutral-fill-input-alt-active-delta").withDefault(6),_a=x("neutral-fill-input-alt-focus-delta").withDefault(2),pe=x("neutral-fill-layer-rest-delta").withDefault(-2),Lp=x("neutral-fill-layer-hover-delta").withDefault(-3),Vp=x("neutral-fill-layer-active-delta").withDefault(-3),ko=x("neutral-fill-layer-alt-rest-delta").withDefault(-1),zp=x("neutral-fill-secondary-rest-delta").withDefault(3),Hp=x("neutral-fill-secondary-hover-delta").withDefault(2),Pp=x("neutral-fill-secondary-active-delta").withDefault(1),Mp=x("neutral-fill-secondary-focus-delta").withDefault(3),Zl=x("neutral-fill-stealth-rest-delta").withDefault(0),Jl=x("neutral-fill-stealth-hover-delta").withDefault(3),Kl=x("neutral-fill-stealth-active-delta").withDefault(2),tc=x("neutral-fill-stealth-focus-delta").withDefault(0),ec=x("neutral-fill-strong-rest-delta").withDefault(0),zr=x("neutral-fill-strong-hover-delta").withDefault(8),Hr=x("neutral-fill-strong-active-delta").withDefault(-5),Pr=x("neutral-fill-strong-focus-delta").withDefault(0),ic=x("neutral-stroke-rest-delta").withDefault(8),oc=x("neutral-stroke-hover-delta").withDefault(12),sc=x("neutral-stroke-active-delta").withDefault(6),nc=x("neutral-stroke-focus-delta").withDefault(8),rc=x("neutral-stroke-control-rest-delta").withDefault(3),ac=x("neutral-stroke-control-hover-delta").withDefault(5),lc=x("neutral-stroke-control-active-delta").withDefault(5),cc=x("neutral-stroke-control-focus-delta").withDefault(5),Mr=x("neutral-stroke-divider-rest-delta").withDefault(4),ja=x("neutral-stroke-layer-rest-delta").withDefault(3),Np=x("neutral-stroke-layer-hover-delta").withDefault(3),Bp=x("neutral-stroke-layer-active-delta").withDefault(3),_p=x("neutral-stroke-strong-hover-delta").withDefault(0),jp=x("neutral-stroke-strong-active-delta").withDefault(0),Up=x("neutral-stroke-strong-focus-delta").withDefault(0),dc=g("neutral-base-color").withDefault(ap),W=x("neutral-palette").withDefault(i=>Ki.from(dc.getValueFor(i))),gs=g("accent-base-color").withDefault(lp),Nr=x("accent-palette").withDefault(i=>Ki.from(gs.getValueFor(i))),qp=x("neutral-layer-card-container-recipe").withDefault({evaluate:i=>Rl(W.getValueFor(i),Dt.getValueFor(i),pe.getValueFor(i))}),Kg=g("neutral-layer-card-container").withDefault(i=>qp.getValueFor(i).evaluate(i)),Gp=x("neutral-layer-floating-recipe").withDefault({evaluate:i=>yp(W.getValueFor(i),Dt.getValueFor(i),pe.getValueFor(i))}),no=g("neutral-layer-floating").withDefault(i=>Gp.getValueFor(i).evaluate(i)),Wp=x("neutral-layer-1-recipe").withDefault({evaluate:i=>vp(W.getValueFor(i),Dt.getValueFor(i))}),hc=g("neutral-layer-1").withDefault(i=>Wp.getValueFor(i).evaluate(i)),Xp=x("neutral-layer-2-recipe").withDefault({evaluate:i=>Rl(W.getValueFor(i),Dt.getValueFor(i),pe.getValueFor(i))}),Yp=g("neutral-layer-2").withDefault(i=>Xp.getValueFor(i).evaluate(i)),Qp=x("neutral-layer-3-recipe").withDefault({evaluate:i=>xp(W.getValueFor(i),Dt.getValueFor(i),pe.getValueFor(i))}),Zp=g("neutral-layer-3").withDefault(i=>Qp.getValueFor(i).evaluate(i)),Jp=x("neutral-layer-4-recipe").withDefault({evaluate:i=>wp(W.getValueFor(i),Dt.getValueFor(i),pe.getValueFor(i))}),Kp=g("neutral-layer-4").withDefault(i=>Jp.getValueFor(i).evaluate(i)),L=g("fill-color").withDefault(i=>hc.getValueFor(i)),Ko;(function(i){i[i.normal=4.5]="normal",i[i.large=3]="large"})(Ko||(Ko={}));var ms=x("accent-fill-recipe").withDefault({evaluate:(i,t)=>pp(Nr.getValueFor(i),t||L.getValueFor(i),5,cr.getValueFor(i),dr.getValueFor(i),hr.getValueFor(i),ur.getValueFor(i),void 0,8,cr.getValueFor(i),dr.getValueFor(i),hr.getValueFor(i),ur.getValueFor(i),void 0)}),q=g("accent-fill-rest").withDefault(i=>ms.getValueFor(i).evaluate(i).rest),Zt=g("accent-fill-hover").withDefault(i=>ms.getValueFor(i).evaluate(i).hover),Jt=g("accent-fill-active").withDefault(i=>ms.getValueFor(i).evaluate(i).active),bs=g("accent-fill-focus").withDefault(i=>ms.getValueFor(i).evaluate(i).focus),vs=x("foreground-on-accent-recipe").withDefault({evaluate:i=>Tl(q.getValueFor(i),Zt.getValueFor(i),Jt.getValueFor(i),bs.getValueFor(i),Ko.normal)}),Fe=g("foreground-on-accent-rest").withDefault(i=>vs.getValueFor(i).evaluate(i).rest),uc=g("foreground-on-accent-hover").withDefault(i=>vs.getValueFor(i).evaluate(i).hover),pc=g("foreground-on-accent-active").withDefault(i=>vs.getValueFor(i).evaluate(i).active),tm=g("foreground-on-accent-focus").withDefault(i=>vs.getValueFor(i).evaluate(i).focus),ys=x("accent-foreground-recipe").withDefault({evaluate:(i,t)=>wi(Nr.getValueFor(i),t||L.getValueFor(i),9.5,Ml.getValueFor(i),Nl.getValueFor(i),Bl.getValueFor(i),_l.getValueFor(i))}),fc=g("accent-foreground-rest").withDefault(i=>ys.getValueFor(i).evaluate(i).rest),gc=g("accent-foreground-hover").withDefault(i=>ys.getValueFor(i).evaluate(i).hover),mc=g("accent-foreground-active").withDefault(i=>ys.getValueFor(i).evaluate(i).active),em=g("accent-foreground-focus").withDefault(i=>ys.getValueFor(i).evaluate(i).focus),xs=x("accent-stroke-control-recipe").withDefault({evaluate:(i,t)=>Dl(W.getValueFor(i),t||L.getValueFor(i),-3,-3,-3,-3,10,1,void 0,!0)}),tf=g("accent-stroke-control-rest").withDefault(i=>xs.getValueFor(i).evaluate(i,q.getValueFor(i)).rest),ef=g("accent-stroke-control-hover").withDefault(i=>xs.getValueFor(i).evaluate(i,Zt.getValueFor(i)).hover),of=g("accent-stroke-control-active").withDefault(i=>xs.getValueFor(i).evaluate(i,Jt.getValueFor(i)).active),im=g("accent-stroke-control-focus").withDefault(i=>xs.getValueFor(i).evaluate(i,bs.getValueFor(i)).focus),ws=x("neutral-fill-recipe").withDefault({evaluate:(i,t)=>Fr(W.getValueFor(i),t||L.getValueFor(i),jl.getValueFor(i),Ul.getValueFor(i),ql.getValueFor(i),Gl.getValueFor(i),void 0,2,3,1,2,void 0)}),At=g("neutral-fill-rest").withDefault(i=>ws.getValueFor(i).evaluate(i).rest),Ua=g("neutral-fill-hover").withDefault(i=>ws.getValueFor(i).evaluate(i).hover),qa=g("neutral-fill-active").withDefault(i=>ws.getValueFor(i).evaluate(i).active),om=g("neutral-fill-focus").withDefault(i=>ws.getValueFor(i).evaluate(i).focus),Te=x("neutral-fill-input-recipe").withDefault({evaluate:(i,t)=>Fr(W.getValueFor(i),t||L.getValueFor(i),Wl.getValueFor(i),Xl.getValueFor(i),Yl.getValueFor(i),Ql.getValueFor(i),void 0,2,3,1,0,void 0)}),Co=g("neutral-fill-input-rest").withDefault(i=>Te.getValueFor(i).evaluate(i).rest),Ga=g("neutral-fill-input-hover").withDefault(i=>Te.getValueFor(i).evaluate(i).hover),sm=g("neutral-fill-input-active").withDefault(i=>Te.getValueFor(i).evaluate(i).active),Wa=g("neutral-fill-input-focus").withDefault(i=>Te.getValueFor(i).evaluate(i).focus),$s=x("neutral-fill-input-alt-recipe").withDefault({evaluate:(i,t)=>Fr(W.getValueFor(i),t||L.getValueFor(i),$o.getValueFor(i),Na.getValueFor(i),Ba.getValueFor(i),_a.getValueFor(i),1,$o.getValueFor(i),$o.getValueFor(i)-Na.getValueFor(i),$o.getValueFor(i)-Ba.getValueFor(i),_a.getValueFor(i),1)}),Br=g("neutral-fill-input-alt-rest").withDefault(i=>$s.getValueFor(i).evaluate(i).rest),_r=g("neutral-fill-input-alt-hover").withDefault(i=>$s.getValueFor(i).evaluate(i).hover),jr=g("neutral-fill-input-alt-active").withDefault(i=>$s.getValueFor(i).evaluate(i).active),Ur=g("neutral-fill-input-alt-focus").withDefault(i=>$s.getValueFor(i).evaluate(i).focus),We=x("neutral-fill-layer-recipe").withDefault({evaluate:(i,t)=>Ce(W.getValueFor(i),t||L.getValueFor(i),pe.getValueFor(i),Lp.getValueFor(i),Vp.getValueFor(i),pe.getValueFor(i),1)}),bc=g("neutral-fill-layer-rest").withDefault(i=>We.getValueFor(i).evaluate(i).rest),nm=g("neutral-fill-layer-hover").withDefault(i=>We.getValueFor(i).evaluate(i).hover),rm=g("neutral-fill-layer-active").withDefault(i=>We.getValueFor(i).evaluate(i).active),sf=x("neutral-fill-layer-alt-recipe").withDefault({evaluate:(i,t)=>Ce(W.getValueFor(i),t||L.getValueFor(i),ko.getValueFor(i),ko.getValueFor(i),ko.getValueFor(i),ko.getValueFor(i))}),nf=g("neutral-fill-layer-alt-rest").withDefault(i=>sf.getValueFor(i).evaluate(i).rest),Xe=x("neutral-fill-secondary-recipe").withDefault({evaluate:(i,t)=>Ce(W.getValueFor(i),t||L.getValueFor(i),zp.getValueFor(i),Hp.getValueFor(i),Pp.getValueFor(i),Mp.getValueFor(i))}),Ue=g("neutral-fill-secondary-rest").withDefault(i=>Xe.getValueFor(i).evaluate(i).rest),qr=g("neutral-fill-secondary-hover").withDefault(i=>Xe.getValueFor(i).evaluate(i).hover),rf=g("neutral-fill-secondary-active").withDefault(i=>Xe.getValueFor(i).evaluate(i).active),af=g("neutral-fill-secondary-focus").withDefault(i=>Xe.getValueFor(i).evaluate(i).focus),Kt=x("neutral-fill-stealth-recipe").withDefault({evaluate:(i,t)=>Ce(W.getValueFor(i),t||L.getValueFor(i),Zl.getValueFor(i),Jl.getValueFor(i),Kl.getValueFor(i),tc.getValueFor(i))}),$i=g("neutral-fill-stealth-rest").withDefault(i=>Kt.getValueFor(i).evaluate(i).rest),ki=g("neutral-fill-stealth-hover").withDefault(i=>Kt.getValueFor(i).evaluate(i).hover),Ci=g("neutral-fill-stealth-active").withDefault(i=>Kt.getValueFor(i).evaluate(i).active),lf=g("neutral-fill-stealth-focus").withDefault(i=>Kt.getValueFor(i).evaluate(i).focus),ks=x("neutral-fill-strong-recipe").withDefault({evaluate:(i,t)=>wi(W.getValueFor(i),t||L.getValueFor(i),4.5,ec.getValueFor(i),zr.getValueFor(i),Hr.getValueFor(i),Pr.getValueFor(i))}),Gr=g("neutral-fill-strong-rest").withDefault(i=>ks.getValueFor(i).evaluate(i).rest),vc=g("neutral-fill-strong-hover").withDefault(i=>ks.getValueFor(i).evaluate(i).hover),yc=g("neutral-fill-strong-active").withDefault(i=>ks.getValueFor(i).evaluate(i).active),cf=g("neutral-fill-strong-focus").withDefault(i=>ks.getValueFor(i).evaluate(i).focus),Cs=x("neutral-foreground-recipe").withDefault({evaluate:(i,t)=>wi(W.getValueFor(i),t||L.getValueFor(i),16,0,-19,-30,0)}),B=g("neutral-foreground-rest").withDefault(i=>Cs.getValueFor(i).evaluate(i).rest),df=g("neutral-foreground-hover").withDefault(i=>Cs.getValueFor(i).evaluate(i).hover),hf=g("neutral-foreground-active").withDefault(i=>Cs.getValueFor(i).evaluate(i).active),am=g("neutral-foreground-focus").withDefault(i=>Cs.getValueFor(i).evaluate(i).focus),ro=x("neutral-foreground-hint-recipe").withDefault({evaluate:(i,t)=>up(W.getValueFor(i),t||L.getValueFor(i),4.5)}),Fi=g("neutral-foreground-hint").withDefault(i=>ro.getValueFor(i).evaluate(i)),Fs=x("neutral-stroke-recipe").withDefault({evaluate:(i,t)=>Ce(W.getValueFor(i),t||L.getValueFor(i),ic.getValueFor(i),oc.getValueFor(i),sc.getValueFor(i),nc.getValueFor(i))}),Ii=g("neutral-stroke-rest").withDefault(i=>Fs.getValueFor(i).evaluate(i).rest),xc=g("neutral-stroke-hover").withDefault(i=>Fs.getValueFor(i).evaluate(i).hover),wc=g("neutral-stroke-active").withDefault(i=>Fs.getValueFor(i).evaluate(i).active),uf=g("neutral-stroke-focus").withDefault(i=>Fs.getValueFor(i).evaluate(i).focus),Is=x("neutral-stroke-control-recipe").withDefault({evaluate:(i,t)=>Dl(W.getValueFor(i),t||L.getValueFor(i),rc.getValueFor(i),ac.getValueFor(i),lc.getValueFor(i),cc.getValueFor(i),5)}),Wr=g("neutral-stroke-control-rest").withDefault(i=>Is.getValueFor(i).evaluate(i).rest),$c=g("neutral-stroke-control-hover").withDefault(i=>Is.getValueFor(i).evaluate(i).hover),kc=g("neutral-stroke-control-active").withDefault(i=>Is.getValueFor(i).evaluate(i).active),lm=g("neutral-stroke-control-focus").withDefault(i=>Is.getValueFor(i).evaluate(i).focus),pf=x("neutral-stroke-divider-recipe").withDefault({evaluate:(i,t)=>fp(W.getValueFor(i),t||L.getValueFor(i),Mr.getValueFor(i))}),to=g("neutral-stroke-divider-rest").withDefault(i=>pf.getValueFor(i).evaluate(i)),Ss=x("neutral-stroke-input-recipe").withDefault({evaluate:(i,t)=>hp(W.getValueFor(i),t||L.getValueFor(i),rc.getValueFor(i),ac.getValueFor(i),lc.getValueFor(i),cc.getValueFor(i),20,I.getValueFor(i)+"px")}),Xa=g("neutral-stroke-input-rest").withDefault(i=>Ss.getValueFor(i).evaluate(i).rest),ff=g("neutral-stroke-input-hover").withDefault(i=>Ss.getValueFor(i).evaluate(i).hover),cm=g("neutral-stroke-input-active").withDefault(i=>Ss.getValueFor(i).evaluate(i).active),dm=g("neutral-stroke-input-focus").withDefault(i=>Ss.getValueFor(i).evaluate(i).focus),Xr=x("neutral-stroke-layer-recipe").withDefault({evaluate:(i,t)=>Ce(W.getValueFor(i),t||L.getValueFor(i),ja.getValueFor(i),Np.getValueFor(i),Bp.getValueFor(i),ja.getValueFor(i))}),oi=g("neutral-stroke-layer-rest").withDefault(i=>Xr.getValueFor(i).evaluate(i).rest),hm=g("neutral-stroke-layer-hover").withDefault(i=>Xr.getValueFor(i).evaluate(i).hover),um=g("neutral-stroke-layer-active").withDefault(i=>Xr.getValueFor(i).evaluate(i).active),Ts=x("neutral-stroke-strong-recipe").withDefault({evaluate:(i,t)=>wi(W.getValueFor(i),t||L.getValueFor(i),5.5,0,_p.getValueFor(i),jp.getValueFor(i),Up.getValueFor(i))}),Ti=g("neutral-stroke-strong-rest").withDefault(i=>Ts.getValueFor(i).evaluate(i).rest),Yr=g("neutral-stroke-strong-hover").withDefault(i=>Ts.getValueFor(i).evaluate(i).hover),Qr=g("neutral-stroke-strong-active").withDefault(i=>Ts.getValueFor(i).evaluate(i).active),pm=g("neutral-stroke-strong-focus").withDefault(i=>Ts.getValueFor(i).evaluate(i).focus),gf=x("focus-stroke-outer-recipe").withDefault({evaluate:i=>gp(W.getValueFor(i),L.getValueFor(i))}),ao=g("focus-stroke-outer").withDefault(i=>gf.getValueFor(i).evaluate(i)),mf=x("focus-stroke-inner-recipe").withDefault({evaluate:i=>mp(Nr.getValueFor(i),L.getValueFor(i),ao.getValueFor(i))}),Cc=g("focus-stroke-inner").withDefault(i=>mf.getValueFor(i).evaluate(i)),Ds=x("foreground-on-accent-large-recipe").withDefault({evaluate:i=>Tl(q.getValueFor(i),Zt.getValueFor(i),Jt.getValueFor(i),bs.getValueFor(i),Ko.large)}),bf=g("foreground-on-accent-rest-large").withDefault(i=>Ds.getValueFor(i).evaluate(i).rest),fm=g("foreground-on-accent-hover-large").withDefault(i=>Ds.getValueFor(i).evaluate(i,Zt.getValueFor(i)).hover),gm=g("foreground-on-accent-active-large").withDefault(i=>Ds.getValueFor(i).evaluate(i,Jt.getValueFor(i)).active),mm=g("foreground-on-accent-focus-large").withDefault(i=>Ds.getValueFor(i).evaluate(i,bs.getValueFor(i)).focus),Fc=g("neutral-fill-inverse-rest-delta").withDefault(0),Ic=g("neutral-fill-inverse-hover-delta").withDefault(-3),Sc=g("neutral-fill-inverse-active-delta").withDefault(7),Tc=g("neutral-fill-inverse-focus-delta").withDefault(0);function vf(i,t,e,o,s,n){let r=Ge(t),a=i.closestIndexOf(i.colorContrast(t,14)),d=a+r*Math.abs(e-o),u=r===1?e<o:r*e>r*o,p,f;return u?(p=a,f=d):(p=d,f=a),{rest:i.get(p),hover:i.get(f),active:i.get(p+r*s),focus:i.get(p+r*n)}}var Rs=x("neutral-fill-inverse-recipe").withDefault({evaluate:(i,t)=>vf(W.getValueFor(i),t||L.getValueFor(i),Fc.getValueFor(i),Ic.getValueFor(i),Sc.getValueFor(i),Tc.getValueFor(i))}),yf=g("neutral-fill-inverse-rest").withDefault(i=>Rs.getValueFor(i).evaluate(i).rest),xf=g("neutral-fill-inverse-hover").withDefault(i=>Rs.getValueFor(i).evaluate(i).hover),wf=g("neutral-fill-inverse-active").withDefault(i=>Rs.getValueFor(i).evaluate(i).active),$f=g("neutral-fill-inverse-focus").withDefault(i=>Rs.getValueFor(i).evaluate(i).focus),bm=M,vm=te,ym=I,xm=ht,wm=Fc,$m=Ic,km=Sc,Cm=Tc,Fm=pe,Im=ec,Sm=zr,Tm=Hr,Dm=Pr,Rm=Mr,Em=hc,Om=Yp,Am=Zp,Lm=Kp,Vm=Fe,zm=bf,Hm=to,Pm=bc,Mm=yf,Nm=xf,Bm=wf,_m=$f,jm=Gr,Um=vc,qm=yc,Gm=cf,Wm=ao,Xm=Cc,Ym=Ii,Qm=xc,Zm=wc,Jm=uf,tt=Rt`
  font-family: ${Mt};
  font-size: ${Ir};
  line-height: ${El};
  font-weight: initial;
  font-variation-settings: ${Fp};
`,Dc=Rt`
  font-family: ${Mt};
  font-size: ${Sr};
  line-height: ${Tr};
  font-weight: initial;
  font-variation-settings: ${Ip};
`,Km=Rt`
  font-family: ${Mt};
  font-size: ${Dr};
  line-height: ${Ol};
  font-weight: initial;
  font-variation-settings: ${Sp};
`,tb=Rt`
  font-family: ${Mt};
  font-size: ${Rr};
  line-height: ${Al};
  font-weight: initial;
  font-variation-settings: ${Tp};
`,eb=Rt`
  font-family: ${Mt};
  font-size: ${Er};
  line-height: ${Ll};
  font-weight: initial;
  font-variation-settings: ${Dp};
`,ib=Rt`
  font-family: ${Mt};
  font-size: ${Or};
  line-height: ${Vl};
  font-weight: initial;
  font-variation-settings: ${Rp};
`,ob=Rt`
  font-family: ${Mt};
  font-size: ${Ar};
  line-height: ${zl};
  font-weight: initial;
  font-variation-settings: ${Ep};
`,sb=Rt`
  font-family: ${Mt};
  font-size: ${Lr};
  line-height: ${Hl};
  font-weight: initial;
  font-variation-settings: ${Op};
`,nb=Rt`
  font-family: ${Mt};
  font-size: ${Vr};
  line-height: ${Pl};
  font-weight: initial;
  font-variation-settings: ${Ap};
`,Rc=(i,t)=>b`
    ${H("flex")} :host{box-sizing:border-box;flex-direction:column;${tt}
      color:${B};gap:calc(${$} * 1px)}`,Nt=Rt`
  outline: calc(${ht} * 1px) solid ${ao};
  outline-offset: calc(${ht} * -1px);
`,lo=Rt`
  outline: calc(${ht} * 1px) solid ${ao};
  outline-offset: calc(${I} * 1px);
`,V=Rt`(${fs} + ${Se}) * ${$}`,kf=_.create("neutral-fill-stealth-rest-on-neutral-fill-layer-rest").withDefault(i=>{let t=We.getValueFor(i);return Kt.getValueFor(i).evaluate(i,t.evaluate(i).rest).rest}),Cf=_.create("neutral-fill-stealth-hover-on-neutral-fill-layer-rest").withDefault(i=>{let t=We.getValueFor(i);return Kt.getValueFor(i).evaluate(i,t.evaluate(i).rest).hover}),Ff=_.create("neutral-fill-stealth-active-on-neutral-fill-layer-rest").withDefault(i=>{let t=We.getValueFor(i);return Kt.getValueFor(i).evaluate(i,t.evaluate(i).rest).active}),Ec=(i,t)=>b`
    ${H("flex")} :host{box-sizing:border-box;${tt};flex-direction:column;background:${bc};color:${B};border:calc(${I} * 1px) solid ${oi};border-radius:calc(${te} * 1px)}.region{display:none;padding:calc(${$} * 2 * 1px);background:${nf}}.heading{display:grid;position:relative;grid-template-columns:auto 1fr auto auto;align-items:center}.button{appearance:none;border:none;background:none;grid-column:2;grid-row:1;outline:none;margin:calc(${$} * 3 * 1px) 0;padding:0 calc(${$} * 2 * 1px);text-align:left;color:inherit;cursor:pointer;font:inherit}.button::before{content:'';position:absolute;top:calc(${I} * -1px);left:calc(${I} * -1px);right:calc(${I} * -1px);bottom:calc(${I} * -1px);cursor:pointer}.button:${E}::before{${Nt}
      border-radius:calc(${te} * 1px)}:host(.expanded) .button:${E}::before{border-bottom-left-radius:0;border-bottom-right-radius:0}:host(.expanded) .region{display:block;border-top:calc(${I} * 1px) solid ${oi};border-bottom-left-radius:calc((${te} - ${I}) * 1px);border-bottom-right-radius:calc((${te} - ${I}) * 1px)}.icon{display:flex;align-items:center;justify-content:center;grid-column:4;pointer-events:none;background:${kf};border-radius:calc(${M} * 1px);fill:currentcolor;width:calc(${V} * 1px);height:calc(${V} * 1px);margin:calc(${$} * 2 * 1px)}.heading:hover .icon{background:${Cf}}.heading:active .icon{background:${Ff}}slot[name='collapsed-icon']{display:flex}:host(.expanded) slot[name='collapsed-icon']{display:none}slot[name='expanded-icon']{display:none}:host(.expanded) slot[name='expanded-icon']{display:flex}.start{display:flex;align-items:center;padding-inline-start:calc(${$} * 2 * 1px);justify-content:center;grid-column:1}.end{display:flex;align-items:center;justify-content:center;grid-column:3}.icon,.start,.end{position:relative}`.withBehaviors(z(b`
        .button:${E}::before{outline-color:${h.Highlight}}.icon{fill:${h.ButtonText}}`)),If=de.compose({baseName:"accordion-item",template:rh,styles:Ec,collapsedIcon:`
    <svg width="12" height="12" xmlns="http://www.w3.org/2000/svg">
      <path d="M2.15 4.65c.2-.2.5-.2.7 0L6 7.79l3.15-3.14a.5.5 0 11.7.7l-3.5 3.5a.5.5 0 01-.7 0l-3.5-3.5a.5.5 0 010-.7z"/>
    </svg>
  `,expandedIcon:`
    <svg width="12" height="12" xmlns="http://www.w3.org/2000/svg">
      <path d="M2.15 7.35c.2.2.5.2.7 0L6 4.21l3.15 3.14a.5.5 0 10.7-.7l-3.5-3.5a.5.5 0 00-.7 0l-3.5 3.5a.5.5 0 000 .7z"/>
    </svg>
  `}),rb=Ec,Sf=Xi.compose({baseName:"accordion",template:mh,styles:Rc}),ab=Rc;function w(i,t,e,o){var s=arguments.length,n=s<3?t:o===null?o=Object.getOwnPropertyDescriptor(t,e):o,r;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")n=Reflect.decorate(i,t,e,o);else for(var a=i.length-1;a>=0;a--)(r=i[a])&&(n=(s<3?r(n):s>3?r(t,e,n):r(t,e))||n);return s>3&&n&&Object.defineProperty(t,e,n),n}var Ie=class{constructor(t,e){this.cache=new WeakMap,this.ltr=t,this.rtl=e}bind(t){this.attach(t)}unbind(t){let e=this.cache.get(t);e&&Oo.unsubscribe(e)}attach(t){let e=this.cache.get(t)||new pr(this.ltr,this.rtl,t),o=Oo.getValueFor(t);Oo.subscribe(e),e.attach(o),this.cache.set(t,e)}},pr=class{constructor(t,e,o){this.ltr=t,this.rtl=e,this.source=o,this.attached=null}handleChange({target:t,token:e}){this.attach(e.getValueFor(this.source))}attach(t){this.attached!==this[t]&&(this.attached!==null&&this.source.$fastController.removeStyles(this.attached),this.attached=this[t],this.attached!==null&&this.source.$fastController.addStyles(this.attached))}},Tf="0 0 2px rgba(0, 0, 0, 0.14)",Df="0 calc(var(--elevation) * 0.5px) calc((var(--elevation) * 1px)) rgba(0, 0, 0, 0.2)",lb=`box-shadow: ${Tf}, ${Df};`,Ye=_.create({name:"elevation-shadow",cssCustomPropertyName:null}).withDefault({evaluate:(i,t,e)=>{let o=.12,s=.14;t>16&&(o=.2,s=.24);let n=`0 0 2px rgba(0, 0, 0, ${o})`,r=`0 calc(${t} * 0.5px) calc((${t} * 1px)) rgba(0, 0, 0, ${s})`;return`${n}, ${r}`}}),Rf=_.create("elevation-shadow-card-rest-size").withDefault(4),Ef=_.create("elevation-shadow-card-hover-size").withDefault(8),Of=_.create("elevation-shadow-card-active-size").withDefault(0),Af=_.create("elevation-shadow-card-focus-size").withDefault(8),Lf=_.create("elevation-shadow-card-rest").withDefault(i=>Ye.getValueFor(i).evaluate(i,Rf.getValueFor(i))),cb=_.create("elevation-shadow-card-hover").withDefault(i=>Ye.getValueFor(i).evaluate(i,Ef.getValueFor(i))),db=_.create("elevation-shadow-card-active").withDefault(i=>Ye.getValueFor(i).evaluate(i,Of.getValueFor(i))),hb=_.create("elevation-shadow-card-focus").withDefault(i=>Ye.getValueFor(i).evaluate(i,Af.getValueFor(i))),Vf=_.create("elevation-shadow-tooltip-size").withDefault(16),zf=_.create("elevation-shadow-tooltip").withDefault(i=>Ye.getValueFor(i).evaluate(i,Vf.getValueFor(i))),Hf=_.create("elevation-shadow-flyout-size").withDefault(32),Oc=_.create("elevation-shadow-flyout").withDefault(i=>Ye.getValueFor(i).evaluate(i,Hf.getValueFor(i))),Pf=_.create("elevation-shadow-dialog-size").withDefault(128),Mf=_.create("elevation-shadow-dialog").withDefault(i=>Ye.getValueFor(i).evaluate(i,Pf.getValueFor(i))),Ac=(i,t,e,o="[disabled]")=>b`
    ${H("inline-flex")}
    
    :host{position:relative;box-sizing:border-box;${tt}
      height:calc(${V} * 1px);min-width:calc(${V} * 1px);color:${B};border-radius:calc(${M} * 1px);fill:currentcolor}.control{border:calc(${I} * 1px) solid transparent;flex-grow:1;box-sizing:border-box;display:inline-flex;justify-content:center;align-items:center;padding:0 calc((10 + (${$} * 2 * ${Se})) * 1px);white-space:nowrap;outline:none;text-decoration:none;color:inherit;border-radius:inherit;fill:inherit;font-family:inherit}.control,.end,.start{font:inherit}.control.icon-only{padding:0;line-height:0}.control:${E}{${Nt}}.control::-moz-focus-inner{border:0}.content{pointer-events:none}.start,.end{display:flex;pointer-events:none}.start{margin-inline-end:11px}.end{margin-inline-start:11px}`,Zr=(i,t,e,o="[disabled]")=>b`
    .control{background:padding-box linear-gradient(${At},${At}),border-box ${Wr}}:host(${e}:hover) .control{background:padding-box linear-gradient(${Ua},${Ua}),border-box ${$c}}:host(${e}:active) .control{background:padding-box linear-gradient(${qa},${qa}),border-box ${kc}}:host(${o}) .control{background:padding-box linear-gradient(${At},${At}),border-box ${Ii}}`.withBehaviors(z(b`
        .control{background:${h.ButtonFace};border-color:${h.ButtonText};color:${h.ButtonText}}:host(${e}:hover) .control,:host(${e}:active) .control{forced-color-adjust:none;background:${h.HighlightText};border-color:${h.Highlight};color:${h.Highlight}}:host(${o}) .control{background:transparent;border-color:${h.GrayText};color:${h.GrayText}}.control:${E}{outline-color:${h.CanvasText}}:host([href]) .control{background:transparent;border-color:${h.LinkText};color:${h.LinkText}}:host([href]:hover) .control,:host([href]:active) .control{background:transparent;border-color:${h.CanvasText};color:${h.CanvasText}}`)),Lc=(i,t,e,o="[disabled]")=>b`
    .control{background:padding-box linear-gradient(${q},${q}),border-box ${tf};color:${Fe}}:host(${e}:hover) .control{background:padding-box linear-gradient(${Zt},${Zt}),border-box ${ef};color:${uc}}:host(${e}:active) .control{background:padding-box linear-gradient(${Jt},${Jt}),border-box ${of};color:${pc}}:host(${o}) .control{background:${q}}.control:${E}{box-shadow:0 0 0 calc(${ht} * 1px) ${Cc} inset !important}`.withBehaviors(z(b`
        .control{forced-color-adjust:none;background:${h.Highlight};color:${h.HighlightText}}:host(${e}:hover) .control,:host(${e}:active) .control{background:${h.HighlightText};border-color:${h.Highlight};color:${h.Highlight}}:host(${o}) .control{background:transparent;border-color:${h.GrayText};color:${h.GrayText}}.control:${E}{outline-color:${h.CanvasText};box-shadow:0 0 0 calc(${ht} * 1px) ${h.HighlightText} inset !important}:host([href]) .control{background:${h.LinkText};color:${h.HighlightText}}:host([href]:hover) .control,:host([href]:active) .control{background:${h.ButtonFace};border-color:${h.LinkText};color:${h.LinkText}}`)),Nf=(i,t,e,o="[disabled]")=>b`
    :host{height:auto;font-family:inherit;font-size:inherit;line-height:inherit;min-width:0}.control{display:inline;padding:0;border:none;box-shadow:none;line-height:1}:host(${e}) .control{color:${fc};text-decoration:underline 1px}:host(${e}:hover) .control{color:${gc};text-decoration:none}:host(${e}:active) .control{color:${mc};text-decoration:none}.control:${E}{${lo}}`.withBehaviors(z(b`
        :host(${e}) .control{color:${h.LinkText}}:host(${e}:hover) .control,:host(${e}:active) .control{color:${h.CanvasText}}.control:${E}{outline-color:${h.CanvasText}}`)),Vc=(i,t,e,o="[disabled]")=>b`
    :host{color:${fc}}.control{background:${$i}}:host(${e}:hover) .control{background:${ki};color:${gc}}:host(${e}:active) .control{background:${Ci};color:${mc}}:host(${o}) .control{background:${$i}}`.withBehaviors(z(b`
        :host{color:${h.ButtonText}}.control{forced-color-adjust:none;background:transparent}:host(${e}:hover) .control,:host(${e}:active) .control{background:transparent;border-color:${h.ButtonText};color:${h.ButtonText}}:host(${o}) .control{background:transparent;color:${h.GrayText}}.control:${E}{outline-color:${h.CanvasText}}:host([href]) .control{color:${h.LinkText}}:host([href]:hover) .control,:host([href]:active) .control{border-color:${h.LinkText};color:${h.LinkText}}`)),zc=(i,t,e,o="[disabled]")=>b`
    .control{background:transparent !important;border-color:${Ii}}:host(${e}:hover) .control{border-color:${xc}}:host(${e}:active) .control{border-color:${wc}}:host(${o}) .control{background:transparent !important;border-color:${Ii}}`.withBehaviors(z(b`
        .control{border-color:${h.ButtonText};color:${h.ButtonText}}:host(${e}:hover) .control,:host(${e}:active) .control{background:${h.HighlightText};border-color:${h.Highlight};color:${h.Highlight}}:host(${o}) .control{border-color:${h.GrayText};color:${h.GrayText}}.control:${E}{outline-color:${h.CanvasText}}:host([href]) .control{border-color:${h.LinkText};color:${h.LinkText}}:host([href]:hover) .control,:host([href]:active) .control{border-color:${h.CanvasText};color:${h.CanvasText}}`)),Jr=(i,t,e,o="[disabled]")=>b`
    .control{background:${$i}}:host(${e}:hover) .control{background:${ki}}:host(${e}:active) .control{background:${Ci}}:host(${o}) .control{background:${$i}}`.withBehaviors(z(b`
        .control{forced-color-adjust:none;background:transparent;color:${h.ButtonText}}:host(${e}:hover) .control,:host(${e}:active) .control{background:transparent;border-color:${h.ButtonText};color:${h.ButtonText}}:host(${o}) .control{background:transparent;color:${h.GrayText}}.control:${E}{outline-color:${h.CanvasText}}:host([href]) .control{color:${h.LinkText}}:host([href]:hover) .control,:host([href]:active) .control{background:transparent;border-color:${h.LinkText};color:${h.LinkText}}`)),Bf=_.create("input-placeholder-rest").withDefault(i=>{let t=Te.getValueFor(i);return ro.getValueFor(i).evaluate(i,t.evaluate(i).rest)}),_f=_.create("input-placeholder-hover").withDefault(i=>{let t=Te.getValueFor(i);return ro.getValueFor(i).evaluate(i,t.evaluate(i).hover)}),jf=_.create("input-filled-placeholder-rest").withDefault(i=>{let t=Xe.getValueFor(i);return ro.getValueFor(i).evaluate(i,t.evaluate(i).rest)}),Uf=_.create("input-filled-placeholder-hover").withDefault(i=>{let t=Xe.getValueFor(i);return ro.getValueFor(i).evaluate(i,t.evaluate(i).hover)}),Es=(i,t,e)=>b`
  :host{${tt}
    color:${B};fill:currentcolor;user-select:none;position:relative}${e}{box-sizing:border-box;position:relative;color:inherit;border:calc(${I} * 1px) solid transparent;border-radius:calc(${M} * 1px);height:calc(${V} * 1px);font-family:inherit;font-size:inherit;line-height:inherit}.control{width:100%;outline:none}.label{display:block;color:${B};cursor:pointer;${tt}
    margin-bottom:4px}.label__hidden{display:none;visibility:hidden}:host([disabled]) ${e},:host([readonly]) ${e},:host([disabled]) .label,:host([readonly]) .label,:host([disabled]) .control,:host([readonly]) .control{cursor:${Pt}}:host([disabled]){opacity:${Et}}`,co=(i,t,e)=>b`
  @media (forced-colors:none){:host(:not([disabled]):active)::after{left:50%;width:40%;transform:translateX(-50%);border-bottom-left-radius:0;border-bottom-right-radius:0}:host(:not([disabled]):focus-within)::after{left:0;width:100%;transform:none}:host(:not([disabled]):active)::after,:host(:not([disabled]):focus-within:not(:active))::after{content:'';position:absolute;height:calc(${ht} * 1px);bottom:0;border-bottom:calc(${ht} * 1px) solid ${q};border-bottom-left-radius:calc(${M} * 1px);border-bottom-right-radius:calc(${M} * 1px);z-index:2;transition:all 300ms cubic-bezier(0.1,0.9,0.2,1)}}`,ho=(i,t,e,o=":not([disabled]):not(:focus-within)")=>b`
  ${e}{background:padding-box linear-gradient(${Co},${Co}),border-box ${Xa}}:host(${o}:hover) ${e}{background:padding-box linear-gradient(${Ga},${Ga}),border-box ${ff}}:host(:not([disabled]):focus-within) ${e}{background:padding-box linear-gradient(${Wa},${Wa}),border-box ${Xa}}:host([disabled]) ${e}{background:padding-box linear-gradient(${Co},${Co}),border-box ${Ii}}.control::placeholder{color:${Bf}}:host(${o}:hover) .control::placeholder{color:${_f}}`,Di=(i,t,e,o=":not([disabled]):not(:focus-within)")=>b`
  ${e}{background:${Ue}}:host(${o}:hover) ${e}{background:${qr}}:host(:not([disabled]):focus-within) ${e}{background:${af}}:host([disabled]) ${e}{background:${Ue}}.control::placeholder{color:${jf}}:host(${o}:hover) .control::placeholder{color:${Uf}}`,Ri=(i,t,e,o=":not([disabled]):not(:focus-within)")=>b`
  :host{color:${h.ButtonText}}${e}{background:${h.ButtonFace};border-color:${h.ButtonText}}:host(${o}:hover) ${e},:host(:not([disabled]):focus-within) ${e}{border-color:${h.Highlight}}:host([disabled]) ${e}{opacity:1;background:${h.ButtonFace};border-color:${h.GrayText}}.control::placeholder,:host(${o}:hover) .control::placeholder{color:${h.CanvasText}}:host(:not([disabled]):focus) ${e}{${Nt}
    outline-color:${h.Highlight}}:host([disabled]){opacity:1;color:${h.GrayText}}:host([disabled]) ::placeholder,:host([disabled]) ::-webkit-input-placeholder{color:${h.GrayText}}`;function Q(i,t){return new ar("appearance",i,t)}var Ze="[href]",Hc=(i,t)=>Ac().withBehaviors(Q("neutral",Zr(i,t,Ze)),Q("accent",Lc(i,t,Ze)),Q("hypertext",Nf(i,t,Ze)),Q("lightweight",Vc(i,t,Ze)),Q("outline",zc(i,t,Ze)),Q("stealth",Jr(i,t,Ze))),ts=class extends yt{appearanceChanged(t,e){t!==e&&(this.classList.add(e),this.classList.remove(t))}connectedCallback(){super.connectedCallback(),this.appearance||(this.appearance="neutral")}defaultSlottedContentChanged(){var t,e;let o=this.defaultSlottedContent.filter(s=>s.nodeType===Node.ELEMENT_NODE);o.length===1&&o[0]instanceof SVGElement?(t=this.control)===null||t===void 0||t.classList.add("icon-only"):(e=this.control)===null||e===void 0||e.classList.remove("icon-only")}};w([c],ts.prototype,"appearance",void 0);var ub=Hc,qf=ts.compose({baseName:"anchor",baseClass:yt,template:yl,styles:Hc,shadowOptions:{delegatesFocus:!0}}),Pc=(i,t)=>b`
  :host{contain:layout;display:block}`,Gf=R.compose({baseName:"anchored-region",template:Sh,styles:Pc}),pb=Pc,Mc=(i,t)=>b`
    ${H("inline-block")} :host{box-sizing:border-box;${Dc}}.control{border-radius:calc(${M} * 1px);padding:calc(((${$} * 0.5) - ${I}) * 1px) calc((${$} - ${I}) * 1px);border:calc(${I} * 1px) solid transparent}:host(.lightweight) .control{background:transparent;color:${B};font-weight:600}:host(.accent) .control{background:${q};color:${Fe}}:host(.neutral) .control{background:${Ue};color:${B}}:host([circular]) .control{border-radius:100px;min-width:calc(${Tr} - calc(${$} * 1px));display:flex;align-items:center;justify-content:center}`,es=class extends Me{constructor(){super(...arguments),this.appearance="lightweight"}appearanceChanged(t,e){t!==e&&D.queueUpdate(()=>{this.classList.add(e),this.classList.remove(t)})}};w([c({mode:"fromView"})],es.prototype,"appearance",void 0);var Wf=es.compose({baseName:"badge",baseClass:Me,template:Th,styles:Mc}),fb=Mc,Nc=(i,t)=>b`
  ${H("inline-block")} :host{box-sizing:border-box;${tt}}.list{display:flex}`,Xf=Mo.compose({baseName:"breadcrumb",template:Rh,styles:Nc}),gb=Nc,Bc=(i,t)=>b`
    ${H("inline-flex")} :host{background:transparent;color:${B};fill:currentcolor;box-sizing:border-box;${tt};min-width:calc(${V} * 1px);border-radius:calc(${M} * 1px)}.listitem{display:flex;align-items:center;border-radius:inherit}.control{position:relative;align-items:center;box-sizing:border-box;color:inherit;fill:inherit;cursor:pointer;display:flex;outline:none;text-decoration:none;white-space:nowrap;border-radius:inherit}.control:hover{color:${df}}.control:active{color:${hf}}.control:${E}{${lo}}:host(:not([href])),:host([aria-current]) .control{color:${B};fill:currentcolor;cursor:default}.start{display:flex;margin-inline-end:6px}.end{display:flex;margin-inline-start:6px}.separator{display:flex}`.withBehaviors(z(b`
        :host(:not([href])),.start,.end,.separator{background:${h.ButtonFace};color:${h.ButtonText};fill:currentcolor}.separator{fill:${h.ButtonText}}:host([href]){forced-color-adjust:none;background:${h.ButtonFace};color:${h.LinkText}}:host([href]) .control:hover{background:${h.LinkText};color:${h.HighlightText};fill:currentcolor}.control:${E}{outline-color:${h.LinkText}}`)),Yf=Ne.compose({baseName:"breadcrumb-item",template:Dh,styles:Bc,shadowOptions:{delegatesFocus:!0},separator:`
    <svg width="12" height="12" xmlns="http://www.w3.org/2000/svg">
      <path d="M4.65 2.15a.5.5 0 000 .7L7.79 6 4.65 9.15a.5.5 0 10.7.7l3.5-3.5a.5.5 0 000-.7l-3.5-3.5a.5.5 0 00-.7 0z"/>
    </svg>
  `}),mb=Bc,Ae=":not([disabled])",ye="[disabled]",_c=(i,t)=>b`
    :host(${Ae}) .control{cursor:pointer}:host(${ye}) .control{cursor:${Pt}}@media (forced-colors:none){:host(${ye}) .control{opacity:${Et}}}${Ac(i,t,Ae,ye)}
  `.withBehaviors(Q("neutral",Zr(i,t,Ae,ye)),Q("accent",Lc(i,t,Ae,ye)),Q("lightweight",Vc(i,t,Ae,ye)),Q("outline",zc(i,t,Ae,ye)),Q("stealth",Jr(i,t,Ae,ye))),is=class extends xt{appearanceChanged(t,e){t!==e&&(this.classList.add(e),this.classList.remove(t))}connectedCallback(){super.connectedCallback(),this.appearance||(this.appearance="neutral")}defaultSlottedContentChanged(){let t=this.defaultSlottedContent.filter(e=>e.nodeType===Node.ELEMENT_NODE);t.length===1&&t[0]instanceof SVGElement?this.control.classList.add("icon-only"):this.control.classList.remove("icon-only")}};w([c],is.prototype,"appearance",void 0);var Qf=is.compose({baseName:"button",baseClass:xt,template:Eh,styles:_c,shadowOptions:{delegatesFocus:!0}}),bb=_c,Zf=b`
.day.disabled::before{transform:translate(-50%,0) rotate(45deg)}`,Jf=b`
.day.disabled::before{transform:translate(50%,0) rotate(-45deg)}`,Kf=(i,t)=>b`
${H("inline-block")} :host{--calendar-cell-size:calc((${fs} + 2 + ${Se}) * ${$} * 1px);--calendar-gap:2px;${tt}
  color:${B}}.title{padding:calc(${$} * 2px);font-weight:600}.days{text-align:center}.week-days,.week{display:grid;grid-template-columns:repeat(7,1fr);grid-gap:var(--calendar-gap);border:0;padding:0}.day,.week-day{border:0;width:var(--calendar-cell-size);height:var(--calendar-cell-size);line-height:var(--calendar-cell-size);padding:0;box-sizing:initial}.week-day{font-weight:600}.day{border:calc(${I} * 1px) solid transparent;border-radius:calc(${M} * 1px)}.interact .day{cursor:pointer}.date{height:100%}.inactive .date,.inactive.disabled::before{color:${Fi}}.disabled::before{content:'';display:inline-block;width:calc(var(--calendar-cell-size) * .8);height:calc(${I} * 1px);background:currentColor;position:absolute;margin-top:calc(var(--calendar-cell-size) / 2);transform-origin:center;z-index:1}.selected{color:${q};border:1px solid ${q};background:${L}}.selected + .selected{border-start-start-radius:0;border-end-start-radius:0;border-inline-start-width:0;padding-inline-start:calc(var(--calendar-gap) + (${I} + ${M}) * 1px);margin-inline-start:calc((${M} * -1px) - var(--calendar-gap))}.today.disabled::before{color:${Fe}}.today .date{color:${Fe};background:${q};border-radius:50%;position:relative}`.withBehaviors(z(b`
          .day.selected{color:${h.Highlight}}.today .date{background:${h.Highlight};color:${h.HighlightText}}`),new Ie(Zf,Jf)),os=class extends St{constructor(){super(...arguments),this.readonly=!0}};w([c({converter:io})],os.prototype,"readonly",void 0);var tg=os.compose({baseName:"calendar",template:Gh,styles:Kf,title:Nh}),jc=(i,t)=>b`
    ${H("block")} :host{display:block;contain:content;height:var(--card-height,100%);width:var(--card-width,100%);box-sizing:border-box;background:${L};color:${B};border:calc(${I} * 1px) solid ${oi};border-radius:calc(${te} * 1px);box-shadow:${Lf}}:host{content-visibility:auto}`.withBehaviors(z(b`
        :host{background:${h.Canvas};color:${h.CanvasText}}`)),eo=class extends No{cardFillColorChanged(t,e){if(e){let o=ze(e);o!==null&&(this.neutralPaletteSource=e,L.setValueFor(this,Tt.create(o.r,o.g,o.b)))}}neutralPaletteSourceChanged(t,e){if(e){let o=ze(e),s=Tt.create(o.r,o.g,o.b);W.setValueFor(this,Ki.create(s))}}handleChange(t,e){this.cardFillColor||L.setValueFor(this,o=>We.getValueFor(o).evaluate(o,L.getValueFor(t)).rest)}connectedCallback(){super.connectedCallback();let t=Bo(this);if(t){let e=S.getNotifier(t);e.subscribe(this,"fillColor"),e.subscribe(this,"neutralPalette"),this.handleChange(t,"fillColor")}}};w([c({attribute:"card-fill-color",mode:"fromView"})],eo.prototype,"cardFillColor",void 0);w([c({attribute:"neutral-palette-source",mode:"fromView"})],eo.prototype,"neutralPaletteSource",void 0);var eg=eo.compose({baseName:"card",baseClass:No,template:Wh,styles:jc}),vb=jc,Uc=(i,t)=>b`
    ${H("inline-flex")} :host{align-items:center;outline:none;${""} user-select:none}.control{position:relative;width:calc((${V} / 2 + ${$}) * 1px);height:calc((${V} / 2 + ${$}) * 1px);box-sizing:border-box;border-radius:calc(${M} * 1px);border:calc(${I} * 1px) solid ${Ti};background:${Br};cursor:pointer}.label__hidden{display:none;visibility:hidden}.label{${tt}
      color:${B};${""} padding-inline-start:calc(${$} * 2px + 2px);margin-inline-end:calc(${$} * 2px + 2px);cursor:pointer}slot[name='checked-indicator'],slot[name='indeterminate-indicator']{display:flex;align-items:center;justify-content:center;width:100%;height:100%;fill:${B};opacity:0;pointer-events:none}slot[name='indeterminate-indicator']{position:absolute;top:0}:host(.checked) slot[name='checked-indicator'],:host(.checked) slot[name='indeterminate-indicator']{fill:${Fe}}:host(:not(.disabled):hover) .control{background:${_r};border-color:${Yr}}:host(:not(.disabled):active) .control{background:${jr};border-color:${Qr}}:host(:${E}) .control{background:${Ur};${lo}}:host(.checked) .control{background:${q};border-color:transparent}:host(.checked:not(.disabled):hover) .control{background:${Zt};border-color:transparent}:host(.checked:not(.disabled):active) .control{background:${Jt};border-color:transparent}:host(.disabled) .label,:host(.readonly) .label,:host(.readonly) .control,:host(.disabled) .control{cursor:${Pt}}:host(.checked:not(.indeterminate)) slot[name='checked-indicator'],:host(.indeterminate) slot[name='indeterminate-indicator']{opacity:1}:host(.disabled){opacity:${Et}}`.withBehaviors(z(b`
        .control{border-color:${h.FieldText};background:${h.Field}}:host(:not(.disabled):hover) .control,:host(:not(.disabled):active) .control{border-color:${h.Highlight};background:${h.Field}}slot[name='checked-indicator'],slot[name='indeterminate-indicator']{fill:${h.FieldText}}:host(:${E}) .control{forced-color-adjust:none;outline-color:${h.FieldText};background:${h.Field};border-color:${h.Highlight}}:host(.checked) .control{background:${h.Highlight};border-color:${h.Highlight}}:host(.checked:not(.disabled):hover) .control,:host(.checked:not(.disabled):active) .control{background:${h.HighlightText};border-color:${h.Highlight}}:host(.checked) slot[name='checked-indicator'],:host(.checked) slot[name='indeterminate-indicator']{fill:${h.HighlightText}}:host(.checked:hover ) .control slot[name='checked-indicator'],:host(.checked:hover ) .control slot[name='indeterminate-indicator']{fill:${h.Highlight}}:host(.disabled){opacity:1}:host(.disabled) .control{border-color:${h.GrayText};background:${h.Field}}:host(.disabled) slot[name='checked-indicator'],:host(.checked.disabled:hover) .control slot[name='checked-indicator'],:host(.disabled) slot[name='indeterminate-indicator'],:host(.checked.disabled:hover) .control slot[name='indeterminate-indicator']{fill:${h.GrayText}}`)),ig=ui.compose({baseName:"checkbox",template:Xh,styles:Uc,checkedIndicator:`
    <svg width="16" height="16" xmlns="http://www.w3.org/2000/svg">
      <path d="M13.86 3.66a.5.5 0 01-.02.7l-7.93 7.48a.6.6 0 01-.84-.02L2.4 9.1a.5.5 0 01.72-.7l2.4 2.44 7.65-7.2a.5.5 0 01.7.02z"/>
    </svg>
  `,indeterminateIndicator:`
    <svg width="16" height="16" xmlns="http://www.w3.org/2000/svg">
      <path d="M3 8c0-.28.22-.5.5-.5h9a.5.5 0 010 1h-9A.5.5 0 013 8z"/>
    </svg>
  `}),yb=Uc,Ya=".control",Fo=":not([disabled]):not([open])",Qa="[disabled]",qc=(i,t)=>b`
    ${H("inline-flex")}
    
    :host{border-radius:calc(${M} * 1px);box-sizing:border-box;color:${B};fill:currentcolor;font-family:${Mt};position:relative;user-select:none;min-width:250px;vertical-align:top}.listbox{box-shadow:${Oc};background:${L};border-radius:calc(${te} * 1px);box-sizing:border-box;display:inline-flex;flex-direction:column;left:0;max-height:calc(var(--max-height) - (${V} * 1px));padding:calc((${$} - ${I} ) * 1px);overflow-y:auto;position:absolute;width:100%;z-index:1;margin:1px 0;border:calc(${I} * 1px) solid transparent}.listbox[hidden]{display:none}.control{border:calc(${I} * 1px) solid transparent;border-radius:calc(${M} * 1px);height:calc(${V} * 1px);align-items:center;box-sizing:border-box;cursor:pointer;display:flex;${tt}
      min-height:100%;padding:0 calc(${$} * 2.25px);width:100%}:host(:${E}){${Nt}}:host([disabled]) .control{cursor:${Pt};opacity:${Et};user-select:none}:host([open][position='above']) .listbox{bottom:calc((${V} + ${$} * 2) * 1px)}:host([open][position='below']) .listbox{top:calc((${V} + ${$} * 2) * 1px)}.selected-value{font-family:inherit;flex:1 1 auto;text-align:start}.indicator{flex:0 0 auto;margin-inline-start:1em}slot[name='listbox']{display:none;width:100%}:host([open]) slot[name='listbox']{display:flex;position:absolute}.start{margin-inline-end:11px}.end{margin-inline-start:11px}.start,.end,.indicator,::slotted(svg){display:flex}::slotted([role='option']){flex:0 0 auto}`,og=(i,t)=>b`
    :host([open]) .listbox{background:${h.ButtonFace};border-color:${h.CanvasText}}`,Gc=(i,t)=>qc().withBehaviors(Q("outline",Zr(i,t,Fo,Qa)),Q("filled",Di(i,t,Ya,Fo).withBehaviors(z(Ri(i,t,Ya,Fo)))),Q("stealth",Jr(i,t,Fo,Qa)),z(og())),sn=".control",nn=":not([disabled]):not([open])",Wc=(i,t)=>b`
    ${qc()}

    ${co()}

    :host(:empty) .listbox{display:none}:host([disabled]) *,:host([disabled]){cursor:${Pt};user-select:none}:host(:active) .selected-value{user-select:none}.selected-value{-webkit-appearance:none;background:transparent;border:none;color:inherit;${tt}
      height:calc(100% - ${I} * 1px));margin:auto 0;width:100%;outline:none}`.withBehaviors(Q("outline",ho(i,t,sn,nn)),Q("filled",Di(i,t,sn,nn)),z(Ri(i,t,sn,nn))),ss=class extends Gt{appearanceChanged(t,e){t!==e&&(this.classList.add(e),this.classList.remove(t))}connectedCallback(){super.connectedCallback(),this.appearance||(this.appearance="outline"),this.listbox&&L.setValueFor(this.listbox,no)}};w([c({mode:"fromView"})],ss.prototype,"appearance",void 0);var sg=ss.compose({baseName:"combobox",baseClass:Gt,shadowOptions:{delegatesFocus:!0},template:Yh,styles:Wc,indicator:`
    <svg width="12" height="12" xmlns="http://www.w3.org/2000/svg">
      <path d="M2.15 4.65c.2-.2.5-.2.7 0L6 7.79l3.15-3.14a.5.5 0 11.7.7l-3.5 3.5a.5.5 0 01-.7 0l-3.5-3.5a.5.5 0 010-.7z"/>
    </svg>
  `}),xb=Wc,Xc=(i,t)=>b`
  :host{display:flex;position:relative;flex-direction:column}`,Yc=(i,t)=>b`
    :host{display:grid;padding:1px 0;box-sizing:border-box;width:100%;border-bottom:calc(${I} * 1px) solid ${to}}:host(.header){}:host(.sticky-header){background:${L};position:sticky;top:0}`.withBehaviors(z(b`
        :host{}`)),Qc=(i,t)=>b`
    :host{padding:calc((${$} + ${ht} - ${I}) * 1px) calc(((${$} * 3) + ${ht} - ${I}) * 1px);color:${B};box-sizing:border-box;${tt}
      border:transparent calc(${I} * 1px) solid;overflow:hidden;white-space:nowrap;border-radius:calc(${M} * 1px)}:host(.column-header){font-weight:600}:host(:${E}){${Nt}}`.withBehaviors(z(b`
        :host{forced-color-adjust:none;background:${h.Field};color:${h.FieldText}}:host(:${E}){outline-color:${h.FieldText}}`)),ng=qt.compose({baseName:"data-grid-cell",template:Mh,styles:Qc}),wb=Qc,rg=st.compose({baseName:"data-grid-row",template:Ph,styles:Yc}),$b=Yc,ag=nt.compose({baseName:"data-grid",template:Ah,styles:Xc}),kb=Xc,Kr={toView(i){return i==null?null:i?.toColorString()},fromView(i){if(i==null)return null;let t=ze(i);return t?Tt.create(t.r,t.g,t.b):null}},Za=b`
  :host{background-color:${L};color:${B}}`.withBehaviors(z(b`
      :host{background-color:${h.Canvas};box-shadow:0 0 0 1px ${h.CanvasText};color:${h.CanvasText}}`));function F(i){return(t,e)=>{t[e+"Changed"]=function(o,s){s!=null?i.setValueFor(this,s):i.deleteValueFor(this)}}}var C=class extends O{constructor(){super(),this.noPaint=!1;let t={handleChange:this.noPaintChanged.bind(this)};S.getNotifier(this).subscribe(t,"fillColor"),S.getNotifier(this).subscribe(t,"baseLayerLuminance")}connectedCallback(){super.connectedCallback(),this.noPaintChanged()}noPaintChanged(){!this.noPaint&&(this.fillColor!==void 0||this.baseLayerLuminance)?this.$fastController.addStyles(Za):this.$fastController.removeStyles(Za)}};w([c({attribute:"no-paint",mode:"boolean"})],C.prototype,"noPaint",void 0);w([c({attribute:"fill-color",converter:Kr,mode:"fromView"}),F(L)],C.prototype,"fillColor",void 0);w([c({attribute:"accent-base-color",converter:Kr,mode:"fromView"}),F(gs)],C.prototype,"accentBaseColor",void 0);w([c({attribute:"neutral-base-color",converter:Kr,mode:"fromView"}),F(dc)],C.prototype,"neutralBaseColor",void 0);w([c({converter:k}),F(Se)],C.prototype,"density",void 0);w([c({attribute:"design-unit",converter:k}),F($)],C.prototype,"designUnit",void 0);w([c({attribute:"direction"}),F(Oo)],C.prototype,"direction",void 0);w([c({attribute:"base-height-multiplier",converter:k}),F(fs)],C.prototype,"baseHeightMultiplier",void 0);w([c({attribute:"base-horizontal-spacing-multiplier",converter:k}),F(kp)],C.prototype,"baseHorizontalSpacingMultiplier",void 0);w([c({attribute:"control-corner-radius",converter:k}),F(M)],C.prototype,"controlCornerRadius",void 0);w([c({attribute:"layer-corner-radius",converter:k}),F(te)],C.prototype,"layerCornerRadius",void 0);w([c({attribute:"stroke-width",converter:k}),F(I)],C.prototype,"strokeWidth",void 0);w([c({attribute:"focus-stroke-width",converter:k}),F(ht)],C.prototype,"focusStrokeWidth",void 0);w([c({attribute:"disabled-opacity",converter:k}),F(Et)],C.prototype,"disabledOpacity",void 0);w([c({attribute:"type-ramp-minus-2-font-size"}),F(Dr)],C.prototype,"typeRampMinus2FontSize",void 0);w([c({attribute:"type-ramp-minus-2-line-height"}),F(Ol)],C.prototype,"typeRampMinus2LineHeight",void 0);w([c({attribute:"type-ramp-minus-1-font-size"}),F(Sr)],C.prototype,"typeRampMinus1FontSize",void 0);w([c({attribute:"type-ramp-minus-1-line-height"}),F(Tr)],C.prototype,"typeRampMinus1LineHeight",void 0);w([c({attribute:"type-ramp-base-font-size"}),F(Ir)],C.prototype,"typeRampBaseFontSize",void 0);w([c({attribute:"type-ramp-base-line-height"}),F(El)],C.prototype,"typeRampBaseLineHeight",void 0);w([c({attribute:"type-ramp-plus-1-font-size"}),F(Rr)],C.prototype,"typeRampPlus1FontSize",void 0);w([c({attribute:"type-ramp-plus-1-line-height"}),F(Al)],C.prototype,"typeRampPlus1LineHeight",void 0);w([c({attribute:"type-ramp-plus-2-font-size"}),F(Er)],C.prototype,"typeRampPlus2FontSize",void 0);w([c({attribute:"type-ramp-plus-2-line-height"}),F(Ll)],C.prototype,"typeRampPlus2LineHeight",void 0);w([c({attribute:"type-ramp-plus-3-font-size"}),F(Or)],C.prototype,"typeRampPlus3FontSize",void 0);w([c({attribute:"type-ramp-plus-3-line-height"}),F(Vl)],C.prototype,"typeRampPlus3LineHeight",void 0);w([c({attribute:"type-ramp-plus-4-font-size"}),F(Ar)],C.prototype,"typeRampPlus4FontSize",void 0);w([c({attribute:"type-ramp-plus-4-line-height"}),F(zl)],C.prototype,"typeRampPlus4LineHeight",void 0);w([c({attribute:"type-ramp-plus-5-font-size"}),F(Lr)],C.prototype,"typeRampPlus5FontSize",void 0);w([c({attribute:"type-ramp-plus-5-line-height"}),F(Hl)],C.prototype,"typeRampPlus5LineHeight",void 0);w([c({attribute:"type-ramp-plus-6-font-size"}),F(Vr)],C.prototype,"typeRampPlus6FontSize",void 0);w([c({attribute:"type-ramp-plus-6-line-height"}),F(Pl)],C.prototype,"typeRampPlus6LineHeight",void 0);w([c({attribute:"accent-fill-rest-delta",converter:k}),F(cr)],C.prototype,"accentFillRestDelta",void 0);w([c({attribute:"accent-fill-hover-delta",converter:k}),F(dr)],C.prototype,"accentFillHoverDelta",void 0);w([c({attribute:"accent-fill-active-delta",converter:k}),F(hr)],C.prototype,"accentFillActiveDelta",void 0);w([c({attribute:"accent-fill-focus-delta",converter:k}),F(ur)],C.prototype,"accentFillFocusDelta",void 0);w([c({attribute:"accent-foreground-rest-delta",converter:k}),F(Ml)],C.prototype,"accentForegroundRestDelta",void 0);w([c({attribute:"accent-foreground-hover-delta",converter:k}),F(Nl)],C.prototype,"accentForegroundHoverDelta",void 0);w([c({attribute:"accent-foreground-active-delta",converter:k}),F(Bl)],C.prototype,"accentForegroundActiveDelta",void 0);w([c({attribute:"accent-foreground-focus-delta",converter:k}),F(_l)],C.prototype,"accentForegroundFocusDelta",void 0);w([c({attribute:"neutral-fill-rest-delta",converter:k}),F(jl)],C.prototype,"neutralFillRestDelta",void 0);w([c({attribute:"neutral-fill-hover-delta",converter:k}),F(Ul)],C.prototype,"neutralFillHoverDelta",void 0);w([c({attribute:"neutral-fill-active-delta",converter:k}),F(ql)],C.prototype,"neutralFillActiveDelta",void 0);w([c({attribute:"neutral-fill-focus-delta",converter:k}),F(Gl)],C.prototype,"neutralFillFocusDelta",void 0);w([c({attribute:"neutral-fill-input-rest-delta",converter:k}),F(Wl)],C.prototype,"neutralFillInputRestDelta",void 0);w([c({attribute:"neutral-fill-input-hover-delta",converter:k}),F(Xl)],C.prototype,"neutralFillInputHoverDelta",void 0);w([c({attribute:"neutral-fill-input-active-delta",converter:k}),F(Yl)],C.prototype,"neutralFillInputActiveDelta",void 0);w([c({attribute:"neutral-fill-input-focus-delta",converter:k}),F(Ql)],C.prototype,"neutralFillInputFocusDelta",void 0);w([c({attribute:"neutral-fill-layer-rest-delta",converter:k}),F(pe)],C.prototype,"neutralFillLayerRestDelta",void 0);w([c({attribute:"neutral-fill-stealth-rest-delta",converter:k}),F(Zl)],C.prototype,"neutralFillStealthRestDelta",void 0);w([c({attribute:"neutral-fill-stealth-hover-delta",converter:k}),F(Jl)],C.prototype,"neutralFillStealthHoverDelta",void 0);w([c({attribute:"neutral-fill-stealth-active-delta",converter:k}),F(Kl)],C.prototype,"neutralFillStealthActiveDelta",void 0);w([c({attribute:"neutral-fill-stealth-focus-delta",converter:k}),F(tc)],C.prototype,"neutralFillStealthFocusDelta",void 0);w([c({attribute:"neutral-fill-strong-hover-delta",converter:k}),F(zr)],C.prototype,"neutralFillStrongHoverDelta",void 0);w([c({attribute:"neutral-fill-strong-active-delta",converter:k}),F(Hr)],C.prototype,"neutralFillStrongActiveDelta",void 0);w([c({attribute:"neutral-fill-strong-focus-delta",converter:k}),F(Pr)],C.prototype,"neutralFillStrongFocusDelta",void 0);w([c({attribute:"base-layer-luminance",converter:k}),F(Dt)],C.prototype,"baseLayerLuminance",void 0);w([c({attribute:"neutral-stroke-divider-rest-delta",converter:k}),F(Mr)],C.prototype,"neutralStrokeDividerRestDelta",void 0);w([c({attribute:"neutral-stroke-rest-delta",converter:k}),F(ic)],C.prototype,"neutralStrokeRestDelta",void 0);w([c({attribute:"neutral-stroke-hover-delta",converter:k}),F(oc)],C.prototype,"neutralStrokeHoverDelta",void 0);w([c({attribute:"neutral-stroke-active-delta",converter:k}),F(sc)],C.prototype,"neutralStrokeActiveDelta",void 0);w([c({attribute:"neutral-stroke-focus-delta",converter:k}),F(nc)],C.prototype,"neutralStrokeFocusDelta",void 0);var lg=C.compose({baseName:"design-system-provider",template:y`<slot></slot>`,styles:b`
    ${H("block")}
  `}),Zc=(i,t)=>b`
  :host([hidden]){display:none}:host{--dialog-height:480px;--dialog-width:640px;display:block}.overlay{position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(0,0,0,0.3);touch-action:none}.positioning-region{display:flex;justify-content:center;position:fixed;top:0;bottom:0;left:0;right:0;overflow:auto}.control{box-shadow:${Mf};margin-top:auto;margin-bottom:auto;border-radius:calc(${te} * 1px);width:var(--dialog-width);height:var(--dialog-height);background:${L};z-index:1;border:calc(${I} * 1px) solid transparent}`,cg=he.compose({baseName:"dialog",template:eu,styles:Zc}),Cb=Zc,Jc=(i,t)=>b`
    ${H("block")} :host{box-sizing:content-box;height:0;border:none;border-top:calc(${I} * 1px) solid ${to}}:host([orientation="vertical"]){border:none;height:100%;margin:0 calc(${$} * 1px);border-left:calc(${I} * 1px) solid ${to}}`,dg=fi.compose({baseName:"divider",template:fu,styles:Jc}),Fb=Jc,Kc=(i,t)=>b`
    ${H("inline-flex")} :host{height:calc((${V} + ${$}) * 1px);justify-content:center;align-items:center;fill:currentcolor;color:${Gr};background:padding-box linear-gradient(${At},${At}),border-box ${Wr};box-sizing:border-box;border:calc(${I} * 1px) solid transparent;border-radius:calc(${M} * 1px);padding:0}:host(.disabled){opacity:${Et};cursor:${Pt};pointer-events:none}.next,.previous{display:flex}:host(:not(.disabled):hover){cursor:pointer}:host(:not(.disabled):hover){color:${vc}}:host(:not(.disabled):active){color:${yc}}:host(:${E}){${Nt}}:host::-moz-focus-inner{border:0}`.withBehaviors(z(b`
        :host{background:${h.ButtonFace};border-color:${h.ButtonText}}:host .next,:host .previous{color:${h.ButtonText};fill:currentcolor}:host(:not(.disabled):hover){background:${h.Highlight}}:host(:not(.disabled):hover) .next,:host(:not(.disabled):hover) .previous{color:${h.HighlightText};fill:currentcolor}:host(.disabled){opacity:1}:host(.disabled),:host(.disabled) .next,:host(.disabled) .previous{border-color:${h.GrayText};color:${h.GrayText};fill:currentcolor}:host(:${E}){forced-color-adjust:none;outline-color:${h.Highlight}}`)),hg=gi.compose({baseName:"flipper",template:mu,styles:Kc,next:`
    <svg width="16" height="16" xmlns="http://www.w3.org/2000/svg">
      <path d="M7.57 11.84A1 1 0 016 11.02V4.98a1 1 0 011.57-.82l3.79 2.62c.85.59.85 1.85 0 2.44l-3.79 2.62z"/>
    </svg>
  `,previous:`
    <svg width="16" height="16" xmlns="http://www.w3.org/2000/svg">
      <path d="M9.43 11.84a1 1 0 001.57-.82V4.98a1 1 0 00-1.57-.82L5.64 6.78c-.85.59-.85 1.85 0 2.44l3.79 2.62z"/>
    </svg>
  `}),Ib=Kc,ug=b`
  .scroll-prev{right:auto;left:0}.scroll.scroll-next::before,.scroll-next .scroll-action{left:auto;right:0}.scroll.scroll-next::before{background:linear-gradient(to right,transparent,var(--scroll-fade-next))}.scroll-next .scroll-action{transform:translate(50%,-50%)}`,pg=b`
  .scroll.scroll-next{right:auto;left:0}.scroll.scroll-next::before{background:linear-gradient(to right,var(--scroll-fade-next),transparent);left:auto;right:0}.scroll.scroll-prev::before{background:linear-gradient(to right,transparent,var(--scroll-fade-previous))}.scroll-prev .scroll-action{left:auto;right:0;transform:translate(50%,-50%)}`,fg=b`
  .scroll-area{position:relative}div.scroll-view{overflow-x:hidden}.scroll{bottom:0;pointer-events:none;position:absolute;right:0;top:0;user-select:none;width:100px}.scroll.disabled{display:none}.scroll::before,.scroll-action{left:0;position:absolute}.scroll::before{background:linear-gradient(to right,var(--scroll-fade-previous),transparent);content:'';display:block;height:100%;width:100%}.scroll-action{pointer-events:auto;right:auto;top:50%;transform:translate(-50%,-50%)}::slotted(fluent-flipper){opacity:0;transition:opacity 0.2s ease-in-out}.scroll-area:hover ::slotted(fluent-flipper){opacity:1}`.withBehaviors(new Ie(ug,pg)),td=(i,t)=>b`
  ${H("block")} :host{--scroll-align:center;--scroll-item-spacing:4px;contain:layout;position:relative}.scroll-view{overflow-x:auto;scrollbar-width:none}::-webkit-scrollbar{display:none}.content-container{align-items:var(--scroll-align);display:inline-flex;flex-wrap:nowrap;position:relative}.content-container ::slotted(*){margin-right:var(--scroll-item-spacing)}.content-container ::slotted(*:last-child){margin-right:0}`,fr=class extends Wt{connectedCallback(){super.connectedCallback(),this.view!=="mobile"&&this.$fastController.addStyles(fg)}},gg=fr.compose({baseName:"horizontal-scroll",baseClass:Wt,template:Tu,styles:td,nextFlipper:y`<fluent-flipper @click="${i=>i.scrollToNext()}" aria-hidden="${i=>i.flippersHiddenFromAT}"></fluent-flipper>`,previousFlipper:y`<fluent-flipper @click="${i=>i.scrollToPrevious()}" direction="previous" aria-hidden="${i=>i.flippersHiddenFromAT}"></fluent-flipper>`}),Sb=td,ed=(i,t)=>b`
    ${H("inline-flex")} :host{border:calc(${I} * 1px) solid ${Ii};border-radius:calc(${M} * 1px);box-sizing:border-box;flex-direction:column;padding:calc(${$} * 1px) 0}::slotted(${i.tagFor(Vt)}){margin:0 calc(${$} * 1px)}:host(:focus-within:not([disabled])){${Nt}}`,gr=class extends ft{},mg=gr.compose({baseName:"listbox",template:vu,styles:ed}),Tb=ed,id=(i,t)=>b`
    ${H("inline-flex")} :host{position:relative;${tt}
      background:${$i};border-radius:calc(${M} * 1px);border:calc(${I} * 1px) solid transparent;box-sizing:border-box;color:${B};cursor:pointer;fill:currentcolor;height:calc(${V} * 1px);overflow:hidden;align-items:center;padding:0 calc(((${$} * 3) - ${I} - 1) * 1px);user-select:none;white-space:nowrap}:host::before{content:'';display:block;position:absolute;left:calc((${ht} - ${I}) * 1px);top:calc((${V} / 4) - ${ht} * 1px);width:3px;height:calc((${V} / 2) * 1px);background:transparent;border-radius:calc(${M} * 1px)}:host(:not([disabled]):hover){background:${ki}}:host(:not([disabled]):active){background:${Ci}}:host(:not([disabled]):active)::before{background:${q};height:calc(((${V} / 2) - 6) * 1px)}:host([aria-selected='true'])::before{background:${q}}:host(:${E}){${Nt}
      background:${lf}}:host([aria-selected='true']){background:${Ue}}:host(:not([disabled])[aria-selected='true']:hover){background:${qr}}:host(:not([disabled])[aria-selected='true']:active){background:${rf}}:host(:not([disabled]):not([aria-selected='true']):hover){background:${ki}}:host(:not([disabled]):not([aria-selected='true']):active){background:${Ci}}:host([disabled]){cursor:${Pt};opacity:${Et}}.content{grid-column-start:2;justify-self:start;overflow:hidden;text-overflow:ellipsis}.start,.end,::slotted(svg){display:flex}::slotted([slot='end']){margin-inline-start:1ch}::slotted([slot='start']){margin-inline-end:1ch}`.withBehaviors(new Ie(null,b`
      :host::before{right:calc((${ht} - ${I}) * 1px)}`),z(b`
        :host{background:${h.ButtonFace};border-color:${h.ButtonFace};color:${h.ButtonText}}:host(:not([disabled]):not([aria-selected="true"]):hover),:host(:not([disabled])[aria-selected="true"]:hover),:host([aria-selected="true"]){forced-color-adjust:none;background:${h.Highlight};color:${h.HighlightText}}:host(:not([disabled]):active)::before,:host([aria-selected='true'])::before{background:${h.HighlightText}}:host([disabled]),:host([disabled]:not([aria-selected='true']):hover){background:${h.Canvas};color:${h.GrayText};fill:currentcolor;opacity:1}:host(:${E}){outline-color:${h.CanvasText}}`)),bg=Vt.compose({baseName:"option",template:bu,styles:id}),Db=id,od=(i,t)=>b`
    ${H("block")} :host{background:${no};border:calc(${I} * 1px) solid transparent;border-radius:calc(${te} * 1px);box-shadow:${Oc};padding:calc((${$} - ${I}) * 1px) 0;max-width:368px;min-width:64px}:host([slot='submenu']){width:max-content;margin:0 calc(${$} * 2px)}::slotted(${i.tagFor(wt)}){margin:0 calc(${$} * 1px)}::slotted(${i.tagFor(fi)}){margin:calc(${$} * 1px) 0}::slotted(hr){box-sizing:content-box;height:0;margin:calc(${$} * 1px) 0;border:none;border-top:calc(${I} * 1px) solid ${to}}`.withBehaviors(z(b`
        :host([slot='submenu']){background:${h.Canvas};border-color:${h.CanvasText}}`)),mr=class extends mi{connectedCallback(){super.connectedCallback(),L.setValueFor(this,no)}},vg=mr.compose({baseName:"menu",baseClass:mi,template:wu,styles:od}),Rb=od,sd=(i,t)=>b`
    ${H("grid")} :host{contain:layout;overflow:visible;${tt}
      box-sizing:border-box;height:calc(${V} * 1px);grid-template-columns:minmax(32px,auto) 1fr minmax(32px,auto);grid-template-rows:auto;justify-items:center;align-items:center;padding:0;white-space:nowrap;color:${B};fill:currentcolor;cursor:pointer;border-radius:calc(${M} * 1px);border:calc(${I} * 1px) solid transparent;position:relative}:host(.indent-0){grid-template-columns:auto 1fr minmax(32px,auto)}:host(.indent-0) .content{grid-column:1;grid-row:1;margin-inline-start:10px}:host(.indent-0) .expand-collapse-glyph-container{grid-column:5;grid-row:1}:host(.indent-2){grid-template-columns:minmax(32px,auto) minmax(32px,auto) 1fr minmax(32px,auto) minmax(32px,auto)}:host(.indent-2) .content{grid-column:3;grid-row:1;margin-inline-start:10px}:host(.indent-2) .expand-collapse-glyph-container{grid-column:5;grid-row:1}:host(.indent-2) .start{grid-column:2}:host(.indent-2) .end{grid-column:4}:host(:${E}){${Nt}}:host(:not([disabled]):hover){background:${ki}}:host(:not([disabled]):active),:host(.expanded){background:${Ci};color:${B};z-index:2}:host([disabled]){cursor:${Pt};opacity:${Et}}.content{grid-column-start:2;justify-self:start;overflow:hidden;text-overflow:ellipsis}.start,.end{display:flex;justify-content:center}:host(.indent-0[aria-haspopup='menu']){display:grid;grid-template-columns:minmax(32px,auto) auto 1fr minmax(32px,auto) minmax(32px,auto);align-items:center;min-height:32px}:host(.indent-1[aria-haspopup='menu']),:host(.indent-1[role='menuitemcheckbox']),:host(.indent-1[role='menuitemradio']){display:grid;grid-template-columns:minmax(32px,auto) auto 1fr minmax(32px,auto) minmax(32px,auto);align-items:center;min-height:32px}:host(.indent-2:not([aria-haspopup='menu'])) .end{grid-column:5}:host .input-container,:host .expand-collapse-glyph-container{display:none}:host([aria-haspopup='menu']) .expand-collapse-glyph-container,:host([role='menuitemcheckbox']) .input-container,:host([role='menuitemradio']) .input-container{display:grid}:host([aria-haspopup='menu']) .content,:host([role='menuitemcheckbox']) .content,:host([role='menuitemradio']) .content{grid-column-start:3}:host([aria-haspopup='menu'].indent-0) .content{grid-column-start:1}:host([aria-haspopup='menu']) .end,:host([role='menuitemcheckbox']) .end,:host([role='menuitemradio']) .end{grid-column-start:4}:host .expand-collapse,:host .checkbox,:host .radio{display:flex;align-items:center;justify-content:center;position:relative;box-sizing:border-box}:host .checkbox-indicator,:host .radio-indicator,slot[name='checkbox-indicator'],slot[name='radio-indicator']{display:none}::slotted([slot='end']:not(svg)){margin-inline-end:10px;color:${Fi}}:host([aria-checked='true']) .checkbox-indicator,:host([aria-checked='true']) slot[name='checkbox-indicator'],:host([aria-checked='true']) .radio-indicator,:host([aria-checked='true']) slot[name='radio-indicator']{display:flex}`.withBehaviors(z(b`
        :host,::slotted([slot='end']:not(svg)){forced-color-adjust:none;color:${h.ButtonText};fill:currentcolor}:host(:not([disabled]):hover){background:${h.Highlight};color:${h.HighlightText};fill:currentcolor}:host(:hover) .start,:host(:hover) .end,:host(:hover)::slotted(svg),:host(:active) .start,:host(:active) .end,:host(:active)::slotted(svg),:host(:hover) ::slotted([slot='end']:not(svg)),:host(:${E}) ::slotted([slot='end']:not(svg)){color:${h.HighlightText};fill:currentcolor}:host(.expanded){background:${h.Highlight};color:${h.HighlightText}}:host(:${E}){background:${h.Highlight};outline-color:${h.ButtonText};color:${h.HighlightText};fill:currentcolor}:host([disabled]),:host([disabled]:hover),:host([disabled]:hover) .start,:host([disabled]:hover) .end,:host([disabled]:hover)::slotted(svg),:host([disabled]:${E}){background:${h.ButtonFace};color:${h.GrayText};fill:currentcolor;opacity:1}:host([disabled]:${E}){outline-color:${h.GrayText}}:host .expanded-toggle,:host .checkbox,:host .radio{border-color:${h.ButtonText};background:${h.HighlightText}}:host([checked]) .checkbox,:host([checked]) .radio{background:${h.HighlightText};border-color:${h.HighlightText}}:host(:hover) .expanded-toggle,:host(:hover) .checkbox,:host(:hover) .radio,:host(:${E}) .expanded-toggle,:host(:${E}) .checkbox,:host(:${E}) .radio,:host([checked]:hover) .checkbox,:host([checked]:hover) .radio,:host([checked]:${E}) .checkbox,:host([checked]:${E}) .radio{border-color:${h.HighlightText}}:host([aria-checked='true']){background:${h.Highlight};color:${h.HighlightText}}:host([aria-checked='true']) .checkbox-indicator,:host([aria-checked='true']) ::slotted([slot='checkbox-indicator']),:host([aria-checked='true']) ::slotted([slot='radio-indicator']){fill:${h.Highlight}}:host([aria-checked='true']) .radio-indicator{background:${h.Highlight}}`),new Ie(b`
        .expand-collapse-glyph-container{transform:rotate(0deg)}`,b`
        .expand-collapse-glyph-container{transform:rotate(180deg)}`)),yg=wt.compose({baseName:"menu-item",template:xu,styles:sd,checkboxIndicator:`
    <svg width="16" height="16" xmlns="http://www.w3.org/2000/svg">
      <path d="M13.86 3.66a.5.5 0 01-.02.7l-7.93 7.48a.6.6 0 01-.84-.02L2.4 9.1a.5.5 0 01.72-.7l2.4 2.44 7.65-7.2a.5.5 0 01.7.02z"/>
    </svg>
  `,expandCollapseGlyph:`
    <svg width="16" height="16" xmlns="http://www.w3.org/2000/svg">
      <path d="M5.65 3.15a.5.5 0 000 .7L9.79 8l-4.14 4.15a.5.5 0 00.7.7l4.5-4.5a.5.5 0 000-.7l-4.5-4.5a.5.5 0 00-.7 0z"/>
    </svg>
  `,radioIndicator:`
    <svg width="16" height="16" xmlns="http://www.w3.org/2000/svg">
      <circle cx="8" cy="8" r="2"/>
    </svg>
  `}),Eb=sd,Io=".root",nd=(i,t)=>b`
    ${H("inline-block")}

    ${Es(i,t,Io)}

    ${co()}

    .root{display:flex;flex-direction:row}.control{-webkit-appearance:none;color:inherit;background:transparent;border:0;height:calc(100% - 4px);margin-top:auto;margin-bottom:auto;padding:0 calc(${$} * 2px + 1px);font-family:inherit;font-size:inherit;line-height:inherit}.start,.end{margin:auto;fill:currentcolor}.start{display:flex;margin-inline-start:11px}.end{display:flex;margin-inline-end:11px}.controls{opacity:0;position:relative;top:-1px;z-index:3}:host(:hover:not([disabled])) .controls,:host(:focus-within:not([disabled])) .controls{opacity:1}.step-up,.step-down{display:flex;padding:0 8px;cursor:pointer}.step-up{padding-top:3px}`.withBehaviors(Q("outline",ho(i,t,Io)),Q("filled",Di(i,t,Io)),z(Ri(i,t,Io))),ns=class extends ut{connectedCallback(){super.connectedCallback(),this.appearance||(this.appearance="outline")}};w([c],ns.prototype,"appearance",void 0);var Ob=nd,xg=ns.compose({baseName:"number-field",baseClass:ut,styles:nd,template:$u,shadowOptions:{delegatesFocus:!0},stepDownGlyph:`
    <svg width="12" height="12" xmlns="http://www.w3.org/2000/svg">
      <path d="M2.15 4.65c.2-.2.5-.2.7 0L6 7.79l3.15-3.14a.5.5 0 11.7.7l-3.5 3.5a.5.5 0 01-.7 0l-3.5-3.5a.5.5 0 010-.7z"/>
    </svg>
  `,stepUpGlyph:`
    <svg width="12" height="12" xmlns="http://www.w3.org/2000/svg">
      <path d="M2.15 7.35c.2.2.5.2.7 0L6 4.21l3.15 3.14a.5.5 0 10.7-.7l-3.5-3.5a.5.5 0 00-.7 0l-3.5 3.5a.5.5 0 000 .7z"/>
    </svg>
`}),rd=(i,t)=>b`
    ${H("flex")} :host{align-items:center;height:calc((${I} * 3) * 1px)}.progress{background-color:${Ti};border-radius:calc(${$} * 1px);width:100%;height:calc(${I} * 1px);display:flex;align-items:center;position:relative}.determinate{background-color:${q};border-radius:calc(${$} * 1px);height:calc((${I} * 3) * 1px);transition:all 0.2s ease-in-out;display:flex}.indeterminate{height:calc((${I} * 3) * 1px);border-radius:calc(${$} * 1px);display:flex;width:100%;position:relative;overflow:hidden}.indeterminate-indicator-1{position:absolute;opacity:0;height:100%;background-color:${q};border-radius:calc(${$} * 1px);animation-timing-function:cubic-bezier(0.4,0,0.6,1);width:40%;animation:indeterminate-1 2s infinite}.indeterminate-indicator-2{position:absolute;opacity:0;height:100%;background-color:${q};border-radius:calc(${$} * 1px);animation-timing-function:cubic-bezier(0.4,0,0.6,1);width:60%;animation:indeterminate-2 2s infinite}:host(.paused) .indeterminate-indicator-1,:host(.paused) .indeterminate-indicator-2{animation:none;background-color:${Fi};width:100%;opacity:1}:host(.paused) .determinate{background-color:${Fi}}@keyframes indeterminate-1{0%{opacity:1;transform:translateX(-100%)}70%{opacity:1;transform:translateX(300%)}70.01%{opacity:0}100%{opacity:0;transform:translateX(300%)}}@keyframes indeterminate-2{0%{opacity:0;transform:translateX(-150%)}29.99%{opacity:0}30%{opacity:1;transform:translateX(-150%)}100%{transform:translateX(166.66%);opacity:1}}`.withBehaviors(z(b`
        .indeterminate-indicator-1,.indeterminate-indicator-2,.determinate,.progress{background-color:${h.ButtonText}}:host(.paused) .indeterminate-indicator-1,:host(.paused) .indeterminate-indicator-2,:host(.paused) .determinate{background-color:${h.GrayText}}`)),br=class extends ue{},wg=br.compose({baseName:"progress",template:Fu,styles:rd,indeterminateIndicator1:`
    <span class="indeterminate-indicator-1" part="indeterminate-indicator-1"></span>
  `,indeterminateIndicator2:`
    <span class="indeterminate-indicator-2" part="indeterminate-indicator-2"></span>
  `}),Ab=rd,ad=(i,t)=>b`
    ${H("flex")} :host{align-items:center;height:calc(${V} * 1px);width:calc(${V} * 1px)}.progress{height:100%;width:100%}.background{fill:none;stroke-width:2px}.determinate{stroke:${q};fill:none;stroke-width:2px;stroke-linecap:round;transform-origin:50% 50%;transform:rotate(-90deg);transition:all 0.2s ease-in-out}.indeterminate-indicator-1{stroke:${q};fill:none;stroke-width:2px;stroke-linecap:round;transform-origin:50% 50%;transform:rotate(-90deg);transition:all 0.2s ease-in-out;animation:spin-infinite 2s linear infinite}:host(.paused) .indeterminate-indicator-1{animation:none;stroke:${Fi}}:host(.paused) .determinate{stroke:${Fi}}@keyframes spin-infinite{0%{stroke-dasharray:0.01px 43.97px;transform:rotate(0deg)}50%{stroke-dasharray:21.99px 21.99px;transform:rotate(450deg)}100%{stroke-dasharray:0.01px 43.97px;transform:rotate(1080deg)}}`.withBehaviors(z(b`
        .background{stroke:${h.Field}}.determinate,.indeterminate-indicator-1{stroke:${h.ButtonText}}:host(.paused) .determinate,:host(.paused) .indeterminate-indicator-1{stroke:${h.GrayText}}`)),vr=class extends ue{},$g=vr.compose({baseName:"progress-ring",template:Cu,styles:ad,indeterminateIndicator:`
    <svg class="progress" part="progress" viewBox="0 0 16 16">
        <circle
            class="background"
            part="background"
            cx="8px"
            cy="8px"
            r="7px"
        ></circle>
        <circle
            class="indeterminate-indicator-1"
            part="indeterminate-indicator-1"
            cx="8px"
            cy="8px"
            r="7px"
        ></circle>
    </svg>
  `}),Lb=ad,ld=(i,t)=>b`
    ${H("inline-flex")} :host{--input-size:calc((${V} / 2) + ${$});align-items:center;outline:none;${""} user-select:none;position:relative;flex-direction:row;transition:all 0.2s ease-in-out}.control{position:relative;width:calc(var(--input-size) * 1px);height:calc(var(--input-size) * 1px);box-sizing:border-box;border-radius:50%;border:calc(${I} * 1px) solid ${Ti};background:${Br};cursor:pointer}.label__hidden{display:none;visibility:hidden}.label{${tt}
      color:${B};${""} padding-inline-start:calc(${$} * 2px + 2px);margin-inline-end:calc(${$} * 2px + 2px);cursor:pointer}.control,slot[name='checked-indicator']{flex-shrink:0}slot[name='checked-indicator']{display:flex;align-items:center;justify-content:center;width:100%;height:100%;fill:${Fe};opacity:0;pointer-events:none}:host(:not(.disabled):hover) .control{background:${_r};border-color:${Yr}}:host(:not(.disabled):active) .control{background:${jr};border-color:${Qr}}:host(:not(.disabled):active) slot[name='checked-indicator']{opacity:1}:host(:${E}) .control{${lo}
      background:${Ur}}:host(.checked) .control{background:${q};border-color:transparent}:host(.checked:not(.disabled):hover) .control{background:${Zt};border-color:transparent}:host(.checked:not(.disabled):active) .control{background:${Jt};border-color:transparent}:host(.disabled) .label,:host(.readonly) .label,:host(.readonly) .control,:host(.disabled) .control{cursor:${Pt}}:host(.checked) slot[name='checked-indicator']{opacity:1}:host(.disabled){opacity:${Et}}`.withBehaviors(z(b`
        .control{background:${h.Field};border-color:${h.FieldText}}:host(:not(.disabled):hover) .control,:host(:not(.disabled):active) .control{border-color:${h.Highlight}}:host(:${E}) .control{forced-color-adjust:none;background:${h.Field};outline-color:${h.FieldText}}:host(.checked:not(.disabled):hover) .control,:host(.checked:not(.disabled):active) .control{border-color:${h.Highlight};background:${h.Highlight}}:host(.checked) slot[name='checked-indicator']{fill:${h.Highlight}}:host(.checked:hover) .control slot[name='checked-indicator']{fill:${h.HighlightText}}:host(.disabled){opacity:1}:host(.disabled) .label{color:${h.GrayText}}:host(.disabled) .control,:host(.checked.disabled) .control{background:${h.Field};border-color:${h.GrayText}}:host(.disabled) slot[name='checked-indicator'],:host(.checked.disabled) slot[name='checked-indicator']{fill:${h.GrayText}}`)),kg=vi.compose({baseName:"radio",template:Su,styles:ld,checkedIndicator:`
    <svg width="16" height="16" xmlns="http://www.w3.org/2000/svg">
      <circle cx="8" cy="8" r="4"/>
    </svg>
  `}),Vb=ld,cd=(i,t)=>b`
  ${H("flex")} :host{align-items:flex-start;flex-direction:column}.positioning-region{display:flex;flex-wrap:wrap}:host([orientation='vertical']) .positioning-region{flex-direction:column}:host([orientation='horizontal']) .positioning-region{flex-direction:row}`,Cg=ie.compose({baseName:"radio-group",template:Iu,styles:cd}),zb=cd,Fg=(i,t)=>y`<template class=" ${e=>e.readOnly?"readonly":""} "><label part="label" for="control" class="${e=>e.defaultSlottedNodes&&e.defaultSlottedNodes.length?"label":"label label__hidden"}"><slot ${X({property:"defaultSlottedNodes",filter:Fl})}></slot></label><div class="root" part="root" ${P("root")}>${Ct(i,t)}<div class="input-wrapper" part="input-wrapper"><input class="control" part="control" id="control" @input="${e=>e.handleTextInput()}" @change="${e=>e.handleChange()}" ?autofocus="${e=>e.autofocus}" ?disabled="${e=>e.disabled}" list="${e=>e.list}" maxlength="${e=>e.maxlength}" minlength="${e=>e.minlength}" pattern="${e=>e.pattern}" placeholder="${e=>e.placeholder}" ?readonly="${e=>e.readOnly}" ?required="${e=>e.required}" size="${e=>e.size}" ?spellcheck="${e=>e.spellcheck}" :value="${e=>e.value}" type="search" aria-atomic="${e=>e.ariaAtomic}" aria-busy="${e=>e.ariaBusy}" aria-controls="${e=>e.ariaControls}" aria-current="${e=>e.ariaCurrent}" aria-describedby="${e=>e.ariaDescribedby}" aria-details="${e=>e.ariaDetails}" aria-disabled="${e=>e.ariaDisabled}" aria-errormessage="${e=>e.ariaErrormessage}" aria-flowto="${e=>e.ariaFlowto}" aria-haspopup="${e=>e.ariaHaspopup}" aria-hidden="${e=>e.ariaHidden}" aria-invalid="${e=>e.ariaInvalid}" aria-keyshortcuts="${e=>e.ariaKeyshortcuts}" aria-label="${e=>e.ariaLabel}" aria-labelledby="${e=>e.ariaLabelledby}" aria-live="${e=>e.ariaLive}" aria-owns="${e=>e.ariaOwns}" aria-relevant="${e=>e.ariaRelevant}" aria-roledescription="${e=>e.ariaRoledescription}" ${P("control")} /><slot name="clear-button"><button class="clear-button ${e=>e.value?"":"clear-button__hidden"}" part="clear-button" tabindex="-1" @click=${e=>e.handleClearInput()}><slot name="clear-glyph"><svg width="12" height="12" viewBox="0 0 12 12" xmlns="http://www.w3.org/2000/svg"><path d="m2.09 2.22.06-.07a.5.5 0 0 1 .63-.06l.07.06L6 5.29l3.15-3.14a.5.5 0 1 1 .7.7L6.71 6l3.14 3.15c.18.17.2.44.06.63l-.06.07a.5.5 0 0 1-.63.06l-.07-.06L6 6.71 2.85 9.85a.5.5 0 0 1-.7-.7L5.29 6 2.15 2.85a.5.5 0 0 1-.06-.63l.06-.07-.06.07Z" /></svg></slot></button></slot></div>${kt(i,t)}</div></template>`,So=".root",Ig=_.create("clear-button-hover").withDefault(i=>{let t=Kt.getValueFor(i),e=Te.getValueFor(i);return t.evaluate(i,e.evaluate(i).focus).hover}),Sg=_.create("clear-button-active").withDefault(i=>{let t=Kt.getValueFor(i),e=Te.getValueFor(i);return t.evaluate(i,e.evaluate(i).focus).active}),dd=(i,t)=>b`
    ${H("inline-block")}

    ${Es(i,t,So)}

    ${co()}

    .root{display:flex;flex-direction:row}.control{-webkit-appearance:none;color:inherit;background:transparent;border:0;height:calc(100% - 4px);margin-top:auto;margin-bottom:auto;padding:0 calc(${$} * 2px + 1px);font-family:inherit;font-size:inherit;line-height:inherit}.clear-button{display:inline-flex;align-items:center;margin:1px;height:calc(100% - 2px);opacity:0;background:transparent;color:${B};fill:currentcolor;border:none;border-radius:calc(${M} * 1px);min-width:calc(${V} * 1px);${tt}
      outline:none;padding:0 calc((10 + (${$} * 2 * ${Se})) * 1px)}.clear-button:hover{background:${Ig}}.clear-button:active{background:${Sg}}:host(:hover:not([disabled],[readOnly])) .clear-button,:host(:active:not([disabled],[readOnly])) .clear-button,:host(:focus-within:not([disabled],[readOnly])) .clear-button{opacity:1}:host(:hover:not([disabled],[readOnly])) .clear-button__hidden,:host(:active:not([disabled],[readOnly])) .clear-button__hidden,:host(:focus-within:not([disabled],[readOnly])) .clear-button__hidden{opacity:0}.control::-webkit-search-cancel-button{-webkit-appearance:none}.input-wrapper{display:flex;position:relative;width:100%}.start,.end{display:flex;margin:1px;align-items:center}.start{display:flex;margin-inline-start:11px}::slotted([slot="end"]){height:100%}.clear-button__hidden{opacity:0}.end{margin-inline-end:11px}::slotted(${i.tagFor(xt)}){margin-inline-end:1px}`.withBehaviors(Q("outline",ho(i,t,So)),Q("filled",Di(i,t,So)),z(Ri(i,t,So))),rs=class extends $t{constructor(){super(...arguments),this.appearance="outline"}};w([c],rs.prototype,"appearance",void 0);var Tg=rs.compose({baseName:"search",baseClass:$t,template:Fg,styles:dd,start:'<svg width="20" height="20" xmlns="http://www.w3.org/2000/svg%22%3E"><path d="M8.5 3a5.5 5.5 0 0 1 4.23 9.02l4.12 4.13a.5.5 0 0 1-.63.76l-.07-.06-4.13-4.12A5.5 5.5 0 1 1 8.5 3Zm0 1a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9Z"/></svg>',shadowOptions:{delegatesFocus:!0}}),Hb=dd,as=class extends Xt{appearanceChanged(t,e){t!==e&&(this.classList.add(e),this.classList.remove(t))}connectedCallback(){super.connectedCallback(),this.appearance||(this.appearance="outline"),this.listbox&&L.setValueFor(this.listbox,no)}};w([c({mode:"fromView"})],as.prototype,"appearance",void 0);var Dg=as.compose({baseName:"select",baseClass:Xt,template:Du,styles:Gc,indicator:`
    <svg width="12" height="12" xmlns="http://www.w3.org/2000/svg">
      <path d="M2.15 4.65c.2-.2.5-.2.7 0L6 7.79l3.15-3.14a.5.5 0 11.7.7l-3.5 3.5a.5.5 0 01-.7 0l-3.5-3.5a.5.5 0 010-.7z"/>
    </svg>
  `}),Pb=Gc,hd=(i,t)=>b`
    ${H("block")} :host{--skeleton-fill-default:${Ue};overflow:hidden;width:100%;position:relative;background-color:var(--skeleton-fill,var(--skeleton-fill-default));--skeleton-animation-gradient-default:linear-gradient(
        270deg,var(--skeleton-fill,var(--skeleton-fill-default)) 0%,${qr} 51%,var(--skeleton-fill,var(--skeleton-fill-default)) 100%
      );--skeleton-animation-timing-default:ease-in-out}:host(.rect){border-radius:calc(${M} * 1px)}:host(.circle){border-radius:100%;overflow:hidden}object{position:absolute;width:100%;height:auto;z-index:2}object img{width:100%;height:auto}${H("block")} span.shimmer{position:absolute;width:100%;height:100%;background-image:var(--skeleton-animation-gradient,var(--skeleton-animation-gradient-default));background-size:0px 0px / 90% 100%;background-repeat:no-repeat;background-color:var(--skeleton-animation-fill,${Ue});animation:shimmer 2s infinite;animation-timing-function:var(--skeleton-animation-timing,var(--skeleton-timing-default));animation-direction:normal;z-index:1}::slotted(svg){z-index:2}::slotted(.pattern){width:100%;height:100%}@keyframes shimmer{0%{transform:translateX(-100%)}100%{transform:translateX(100%)}}`.withBehaviors(z(b`
        :host{background-color:${h.CanvasText}}`)),Rg=je.compose({baseName:"skeleton",template:Ru,styles:hd}),Mb=hd,ud=(i,t)=>b`
    ${H("inline-grid")} :host{--thumb-size:calc((${V} / 2) + ${$} + (${I} * 2));--thumb-translate:calc(var(--thumb-size) * -0.5 + var(--track-width) / 2);--track-overhang:calc((${$} / 2) * -1);--track-width:${$};align-items:center;width:100%;user-select:none;box-sizing:border-box;border-radius:calc(${M} * 1px);outline:none;cursor:pointer}:host(.horizontal) .positioning-region{position:relative;margin:0 8px;display:grid;grid-template-rows:calc(var(--thumb-size) * 1px) 1fr}:host(.vertical) .positioning-region{position:relative;margin:0 8px;display:grid;height:100%;grid-template-columns:calc(var(--thumb-size) * 1px) 1fr}:host(:${E}) .thumb-cursor{box-shadow:0 0 0 2px ${L},0 0 0 4px ${ao}}.thumb-container{position:absolute;height:calc(var(--thumb-size) * 1px);width:calc(var(--thumb-size) * 1px);transition:all 0.2s ease}.thumb-cursor{display:flex;position:relative;border:none;width:calc(var(--thumb-size) * 1px);height:calc(var(--thumb-size) * 1px);background:padding-box linear-gradient(${At},${At}),border-box ${Wr};border:calc(${I} * 1px) solid transparent;border-radius:50%;box-sizing:border-box}.thumb-cursor::after{content:'';display:block;border-radius:50%;width:100%;margin:4px;background:${q}}:host(:not(.disabled)) .thumb-cursor:hover::after{background:${Zt};margin:3px}:host(:not(.disabled)) .thumb-cursor:active::after{background:${Jt};margin:5px}:host(:not(.disabled)) .thumb-cursor:hover{background:padding-box linear-gradient(${At},${At}),border-box ${$c}}:host(:not(.disabled)) .thumb-cursor:active{background:padding-box linear-gradient(${At},${At}),border-box ${kc}}.track-start{background:${q};position:absolute;height:100%;left:0;border-radius:calc(${M} * 1px)}:host(.horizontal) .thumb-container{transform:translateX(calc(var(--thumb-size) * 0.5px)) translateY(calc(var(--thumb-translate) * 1px))}:host(.vertical) .thumb-container{transform:translateX(calc(var(--thumb-translate) * 1px)) translateY(calc(var(--thumb-size) * 0.5px))}:host(.horizontal){min-width:calc(var(--thumb-size) * 1px)}:host(.horizontal) .track{right:calc(var(--track-overhang) * 1px);left:calc(var(--track-overhang) * 1px);align-self:start;height:calc(var(--track-width) * 1px)}:host(.vertical) .track{top:calc(var(--track-overhang) * 1px);bottom:calc(var(--track-overhang) * 1px);width:calc(var(--track-width) * 1px);height:100%}.track{background:${Gr};border:1px solid ${Ti};border-radius:2px;box-sizing:border-box;position:absolute}:host(.vertical){height:100%;min-height:calc(${$} * 60px);min-width:calc(${$} * 20px)}:host(.vertical) .track-start{height:auto;width:100%;top:0}:host(.disabled),:host(.readonly){cursor:${Pt}}:host(.disabled){opacity:${Et}}`.withBehaviors(z(b`
        .thumb-cursor{forced-color-adjust:none;border-color:${h.FieldText};background:${h.FieldText}}:host(:not(.disabled)) .thumb-cursor:hover,:host(:not(.disabled)) .thumb-cursor:active{background:${h.Highlight}}.track{forced-color-adjust:none;background:${h.FieldText}}.thumb-cursor::after,:host(:not(.disabled)) .thumb-cursor:hover::after,:host(:not(.disabled)) .thumb-cursor:active::after{background:${h.Field}}:host(:${E}) .thumb-cursor{background:${h.Highlight};border-color:${h.Highlight};box-shadow:0 0 0 1px ${h.Field},0 0 0 3px ${h.FieldText}}:host(.disabled){opacity:1}:host(.disabled) .track,:host(.disabled) .thumb-cursor{forced-color-adjust:none;background:${h.GrayText}}`)),Eg=rt.compose({baseName:"slider",template:Ou,styles:ud,thumb:`
    <div class="thumb-cursor"></div>
  `}),Nb=ud,pd=(i,t)=>b`
    ${H("block")} :host{${Dc}}.root{position:absolute;display:grid}:host(.horizontal){align-self:start;grid-row:2;margin-top:-4px}:host(.vertical){justify-self:start;grid-column:2;margin-left:2px}.container{display:grid;justify-self:center}:host(.horizontal) .container{grid-template-rows:auto auto;grid-template-columns:0}:host(.vertical) .container{grid-template-columns:auto auto;grid-template-rows:0;min-width:calc(var(--thumb-size) * 1px);height:calc(var(--thumb-size) * 1px)}.label{justify-self:center;align-self:center;white-space:nowrap;max-width:30px;margin:2px 0}.mark{width:calc(${I} * 1px);height:calc(${$} * 1px);background:${Ti};justify-self:center}:host(.vertical) .mark{transform:rotate(90deg);align-self:center}:host(.vertical) .label{margin-left:calc((${$} / 2) * 2px);align-self:center}:host(.disabled){opacity:${Et}}`.withBehaviors(z(b`
        .mark{forced-color-adjust:none;background:${h.FieldText}}:host(.disabled){forced-color-adjust:none;opacity:1}:host(.disabled) .label{color:${h.GrayText}}:host(.disabled) .mark{background:${h.GrayText}}`)),Og=Yt.compose({baseName:"slider-label",template:Eu,styles:pd}),Bb=pd,fd=(i,t)=>b`
    :host([hidden]){display:none}${H("inline-flex")} :host{align-items:center;outline:none;font-family:${Mt};${""} user-select:none}:host(.disabled){opacity:${Et}}:host(.disabled) .label,:host(.readonly) .label,:host(.disabled) .switch,:host(.readonly) .switch,:host(.disabled) .status-message,:host(.readonly) .status-message{cursor:${Pt}}.switch{position:relative;box-sizing:border-box;width:calc(((${V} / 2) + ${$}) * 2px);height:calc(((${V} / 2) + ${$}) * 1px);background:${Br};border-radius:calc(${V} * 1px);border:calc(${I} * 1px) solid ${Ti};cursor:pointer}:host(:not(.disabled):hover) .switch{background:${_r};border-color:${Yr}}:host(:not(.disabled):active) .switch{background:${jr};border-color:${Qr}}:host(:${E}) .switch{${lo}
      background:${Ur}}:host(.checked) .switch{background:${q};border-color:transparent}:host(.checked:not(.disabled):hover) .switch{background:${Zt};border-color:transparent}:host(.checked:not(.disabled):active) .switch{background:${Jt};border-color:transparent}slot[name='switch']{position:absolute;display:flex;border:1px solid transparent;fill:${B};transition:all 0.2s ease-in-out}.status-message{color:${B};cursor:pointer;${tt}}.label__hidden{display:none;visibility:hidden}.label{color:${B};${tt}
      margin-inline-end:calc(${$} * 2px + 2px);cursor:pointer}::slotted([slot="checked-message"]),::slotted([slot="unchecked-message"]){margin-inline-start:calc(${$} * 2px + 2px)}:host(.checked) .switch{background:${q}}:host(.checked) .switch slot[name='switch']{fill:${Fe};filter:drop-shadow(0px 1px 1px rgba(0,0,0,0.15))}:host(.checked:not(.disabled)) .switch:hover{background:${Zt}}:host(.checked:not(.disabled)) .switch:hover slot[name='switch']{fill:${uc}}:host(.checked:not(.disabled)) .switch:active{background:${Jt}}:host(.checked:not(.disabled)) .switch:active slot[name='switch']{fill:${pc}}.unchecked-message{display:block}.checked-message{display:none}:host(.checked) .unchecked-message{display:none}:host(.checked) .checked-message{display:block}`.withBehaviors(new Ie(b`
        slot[name='switch']{left:0}:host(.checked) slot[name='switch']{left:100%;transform:translateX(-100%)}`,b`
        slot[name='switch']{right:0}:host(.checked) slot[name='switch']{right:100%;transform:translateX(100%)}`),z(b`
        :host(:not(.disabled)) .switch slot[name='switch']{forced-color-adjust:none;fill:${h.FieldText}}.switch{background:${h.Field};border-color:${h.FieldText}}:host(.checked) .switch{background:${h.Highlight};border-color:${h.Highlight}}:host(:not(.disabled):hover) .switch,:host(:not(.disabled):active) .switch,:host(.checked:not(.disabled):hover) .switch{background:${h.HighlightText};border-color:${h.Highlight}}:host(.checked:not(.disabled)) .switch slot[name="switch"]{fill:${h.HighlightText}}:host(.checked:not(.disabled):hover) .switch slot[name='switch']{fill:${h.Highlight}}:host(:${E}) .switch{forced-color-adjust:none;background:${h.Field};border-color:${h.Highlight};outline-color:${h.FieldText}}:host(.disabled){opacity:1}:host(.disabled) slot[name='switch']{forced-color-adjust:none;fill:${h.GrayText}}:host(.disabled) .switch{background:${h.Field};border-color:${h.GrayText}}.status-message,.label{color:${h.FieldText}}`)),Ag=Zi.compose({baseName:"switch",template:Lu,styles:fd,switch:`
    <svg width="16" height="16" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg">
      <rect x="2" y="2" width="12" height="12" rx="6"/>
    </svg>
  `}),_b=fd,gd=(i,t)=>b`
      ${H("grid")} :host{box-sizing:border-box;${tt}
        color:${B};grid-template-columns:auto 1fr auto;grid-template-rows:auto 1fr}.tablist{display:grid;grid-template-rows:calc(${V} * 1px);auto;grid-template-columns:auto;position:relative;width:max-content;align-self:end}.start,.end{align-self:center}.activeIndicator{grid-row:2;grid-column:1;width:20px;height:3px;border-radius:calc(${M} * 1px);justify-self:center;background:${q}}.activeIndicatorTransition{transition:transform 0.2s ease-in-out}.tabpanel{grid-row:2;grid-column-start:1;grid-column-end:4;position:relative}:host(.vertical){grid-template-rows:auto 1fr auto;grid-template-columns:auto 1fr}:host(.vertical) .tablist{grid-row-start:2;grid-row-end:2;display:grid;grid-template-rows:auto;grid-template-columns:auto 1fr;position:relative;width:max-content;justify-self:end;align-self:flex-start;width:100%}:host(.vertical) .tabpanel{grid-column:2;grid-row-start:1;grid-row-end:4}:host(.vertical) .end{grid-row:3}:host(.vertical) .activeIndicator{grid-column:1;grid-row:1;width:3px;height:20px;margin-inline-start:calc(${ht} * 1px);border-radius:calc(${M} * 1px);align-self:center;background:${q}}:host(.vertical) .activeIndicatorTransition{transition:transform 0.2s linear}`.withBehaviors(z(b`
        .activeIndicator,:host(.vertical) .activeIndicator{background:${h.Highlight}}`)),md=(i,t)=>b`
      ${H("inline-flex")} :host{box-sizing:border-box;${tt}
        height:calc((${V} + (${$} * 2)) * 1px);padding:0 calc((6 + (${$} * 2 * ${Se})) * 1px);color:${B};border-radius:calc(${M} * 1px);border:calc(${I} * 1px) solid transparent;align-items:center;justify-content:center;grid-row:1 / 3;cursor:pointer}:host([aria-selected='true']){z-index:2}:host(:hover),:host(:active){color:${B}}:host(:${E}){${Nt}}:host(.vertical){justify-content:start;grid-column:1 / 3}:host(.vertical[aria-selected='true']){z-index:2}:host(.vertical:hover),:host(.vertical:active){color:${B}}:host(.vertical:hover[aria-selected='true']){}`.withBehaviors(z(b`
          :host{forced-color-adjust:none;border-color:transparent;color:${h.ButtonText};fill:currentcolor}:host(:hover),:host(.vertical:hover),:host([aria-selected='true']:hover){background:transparent;color:${h.Highlight};fill:currentcolor}:host([aria-selected='true']){background:transparent;color:${h.Highlight};fill:currentcolor}:host(:${E}){background:transparent;outline-color:${h.ButtonText}}`)),Lg=Go.compose({baseName:"tab",template:zu,styles:md}),jb=md,bd=(i,t)=>b`
  ${H("block")} :host{box-sizing:border-box;${tt}
    padding:0 calc((6 + (${$} * 2 * ${Se})) * 1px)}`,Vg=or.compose({baseName:"tab-panel",template:Vu,styles:bd}),Ub=bd,zg=Qt.compose({baseName:"tabs",template:Hu,styles:gd}),qb=gd,To=".control",vd=(i,t)=>b`
    ${H("inline-flex")}

    ${Es(i,t,To)}

    ${co()}

    :host{flex-direction:column;vertical-align:bottom}.control{height:calc((${V} * 2) * 1px);padding:calc(${$} * 1.5px) calc(${$} * 2px + 1px)}:host .control{resize:none}:host(.resize-both) .control{resize:both}:host(.resize-horizontal) .control{resize:horizontal}:host(.resize-vertical) .control{resize:vertical}:host([cols]){width:initial}:host([rows]) .control{height:initial}`.withBehaviors(Q("outline",ho(i,t,To)),Q("filled",Di(i,t,To)),z(Ri(i,t,To))),ls=class extends at{appearanceChanged(t,e){t!==e&&(this.classList.add(e),this.classList.remove(t))}connectedCallback(){super.connectedCallback(),this.appearance||(this.appearance="outline")}};w([c],ls.prototype,"appearance",void 0);var Hg=ls.compose({baseName:"text-area",baseClass:at,template:Pu,styles:vd,shadowOptions:{delegatesFocus:!0}}),Gb=vd,Do=".root",yd=(i,t)=>b`
    ${H("inline-block")}

    ${Es(i,t,Do)}

    ${co()}

    .root{display:flex;flex-direction:row}.control{-webkit-appearance:none;color:inherit;background:transparent;border:0;height:calc(100% - 4px);margin-top:auto;margin-bottom:auto;padding:0 calc(${$} * 2px + 1px);font-family:inherit;font-size:inherit;line-height:inherit}.start,.end{display:flex;margin:auto}.start{display:flex;margin-inline-start:11px}.end{display:flex;margin-inline-end:11px}`.withBehaviors(Q("outline",ho(i,t,Do)),Q("filled",Di(i,t,Do)),z(Ri(i,t,Do))),cs=class extends gt{appearanceChanged(t,e){t!==e&&(this.classList.add(e),this.classList.remove(t))}connectedCallback(){super.connectedCallback(),this.appearance||(this.appearance="outline")}};w([c],cs.prototype,"appearance",void 0);var Pg=cs.compose({baseName:"text-field",baseClass:gt,template:Mu,styles:yd,shadowOptions:{delegatesFocus:!0}}),Wb=yd,Mg=(i,t)=>b`
    ${H("inline-flex")} :host{--toolbar-item-gap:calc(${$} * 1px);background:${L};fill:currentcolor;padding:var(--toolbar-item-gap);box-sizing:border-box;align-items:center}:host(${E}){${Nt}}.positioning-region{align-items:center;display:inline-flex;flex-flow:row wrap;justify-content:flex-start;flex-grow:1}:host([orientation='vertical']) .positioning-region{flex-direction:column;align-items:start}::slotted(:not([slot])){flex:0 0 auto;margin:0 var(--toolbar-item-gap)}:host([orientation='vertical']) ::slotted(:not([slot])){margin:var(--toolbar-item-gap) 0}:host([orientation='vertical']){display:inline-flex;flex-direction:column}.start,.end{display:flex;align-items:center}.end{margin-inline-start:auto}.start__hidden,.end__hidden{display:none}::slotted(svg){${""}
      width:16px;height:16px}`.withBehaviors(z(b`
        :host(:${E}){outline-color:${h.Highlight};color:${h.ButtonText};forced-color-adjust:none}`)),yr=class extends oe{},Ng=yr.compose({baseName:"toolbar",baseClass:oe,template:Nu,styles:Mg}),Bg=(i,t)=>b`
    :host{position:relative;contain:layout;overflow:visible;height:0;width:0;z-index:10000}.tooltip{box-sizing:border-box;border-radius:calc(${M} * 1px);border:calc(${I} * 1px) solid ${oi};background:${L};color:${B};padding:4px 12px;height:fit-content;width:fit-content;${tt}
      white-space:nowrap;box-shadow:${zf}}${i.tagFor(R)}{display:flex;justify-content:center;align-items:center;overflow:visible;flex-direction:row}${i.tagFor(R)}.right,${i.tagFor(R)}.left{flex-direction:column}${i.tagFor(R)}.top .tooltip::after,${i.tagFor(R)}.bottom .tooltip::after,${i.tagFor(R)}.left .tooltip::after,${i.tagFor(R)}.right .tooltip::after{content:'';width:12px;height:12px;background:${L};border-top:calc(${I} * 1px) solid ${oi};border-left:calc(${I} * 1px) solid ${oi};position:absolute}${i.tagFor(R)}.top .tooltip::after{transform:translateX(-50%) rotate(225deg);bottom:5px;left:50%}${i.tagFor(R)}.top .tooltip{margin-bottom:12px}${i.tagFor(R)}.bottom .tooltip::after{transform:translateX(-50%) rotate(45deg);top:5px;left:50%}${i.tagFor(R)}.bottom .tooltip{margin-top:12px}${i.tagFor(R)}.left .tooltip::after{transform:translateY(-50%) rotate(135deg);top:50%;right:5px}${i.tagFor(R)}.left .tooltip{margin-right:12px}${i.tagFor(R)}.right .tooltip::after{transform:translateY(-50%) rotate(-45deg);top:50%;left:5px}${i.tagFor(R)}.right .tooltip{margin-left:12px}`.withBehaviors(z(b`
        :host([disabled]){opacity:1}${i.tagFor(R)}.top .tooltip::after,${i.tagFor(R)}.bottom .tooltip::after,${i.tagFor(R)}.left .tooltip::after,${i.tagFor(R)}.right .tooltip::after{content:'';width:unset;height:unset}`)),xr=class extends K{connectedCallback(){super.connectedCallback(),L.setValueFor(this,no)}},_g=xr.compose({baseName:"tooltip",baseClass:K,template:_u,styles:Bg}),xd=(i,t)=>b`
  :host([hidden]){display:none}${H("flex")} :host{flex-direction:column;align-items:stretch;min-width:fit-content;font-size:0}`,jg=xi.compose({baseName:"tree-view",template:Uu,styles:xd}),Xb=xd,Ug=b`
  .expand-collapse-button svg{transform:rotate(0deg)}:host(.nested) .expand-collapse-button{left:var(--expand-collapse-button-nested-width,calc(${V} * -1px))}:host([selected])::after{left:calc(${ht} * 1px)}:host([expanded]) > .positioning-region .expand-collapse-button svg{transform:rotate(90deg)}`,qg=b`
  .expand-collapse-button svg{transform:rotate(180deg)}:host(.nested) .expand-collapse-button{right:var(--expand-collapse-button-nested-width,calc(${V} * -1px))}:host([selected])::after{right:calc(${ht} * 1px)}:host([expanded]) > .positioning-region .expand-collapse-button svg{transform:rotate(90deg)}`,Ja=Rt`((${fs} / 2) * ${$}) + ((${$} * ${Se}) / 2)`,Gg=_.create("tree-item-expand-collapse-hover").withDefault(i=>{let t=Kt.getValueFor(i);return t.evaluate(i,t.evaluate(i).hover).hover}),Wg=_.create("tree-item-expand-collapse-selected-hover").withDefault(i=>{let t=Xe.getValueFor(i);return Kt.getValueFor(i).evaluate(i,t.evaluate(i).rest).hover}),wd=(i,t)=>b`
    ${H("block")} :host{contain:content;position:relative;outline:none;color:${B};fill:currentcolor;cursor:pointer;font-family:${Mt};--expand-collapse-button-size:calc(${V} * 1px);--tree-item-nested-width:0}.positioning-region{display:flex;position:relative;box-sizing:border-box;background:${$i};border:calc(${I} * 1px) solid transparent;border-radius:calc(${M} * 1px);height:calc((${V} + 1) * 1px)}:host(:${E}) .positioning-region{${Nt}}.positioning-region::before{content:'';display:block;width:var(--tree-item-nested-width);flex-shrink:0}:host(:not([disabled])) .positioning-region:hover{background:${ki}}:host(:not([disabled])) .positioning-region:active{background:${Ci}}.content-region{display:inline-flex;align-items:center;white-space:nowrap;width:100%;height:calc(${V} * 1px);margin-inline-start:calc(${$} * 2px + 8px);${tt}}.items{display:none;${""} font-size:calc(1em + (${$} + 16) * 1px)}.expand-collapse-button{background:none;border:none;border-radius:calc(${M} * 1px);${""} width:calc((${Ja} + (${$} * 2)) * 1px);height:calc((${Ja} + (${$} * 2)) * 1px);padding:0;display:flex;justify-content:center;align-items:center;cursor:pointer;margin:0 6px}.expand-collapse-button svg{transition:transform 0.1s linear;pointer-events:none}.start,.end{display:flex}.start{${""} margin-inline-end:calc(${$} * 2px + 2px)}.end{${""} margin-inline-start:calc(${$} * 2px + 2px)}:host(.expanded) > .items{display:block}:host([disabled]){opacity:${Et};cursor:${Pt}}:host(.nested) .content-region{position:relative;margin-inline-start:var(--expand-collapse-button-size)}:host(.nested) .expand-collapse-button{position:absolute}:host(.nested) .expand-collapse-button:hover{background:${Gg}}:host(:not([disabled])[selected]) .positioning-region{background:${Ue}}:host(:not([disabled])[selected]) .expand-collapse-button:hover{background:${Wg}}:host([selected])::after{content:'';display:block;position:absolute;top:calc((${V} / 4) * 1px);width:3px;height:calc((${V} / 2) * 1px);${""} background:${q};border-radius:calc(${M} * 1px)}::slotted(fluent-tree-item){--tree-item-nested-width:1em;--expand-collapse-button-nested-width:calc(${V} * -1px)}`.withBehaviors(new Ie(Ug,qg),z(b`
        :host{color:${h.ButtonText}}.positioning-region{border-color:${h.ButtonFace};background:${h.ButtonFace}}:host(:not([disabled])) .positioning-region:hover,:host(:not([disabled])) .positioning-region:active,:host(:not([disabled])[selected]) .positioning-region{background:${h.Highlight}}:host .positioning-region:hover .content-region,:host([selected]) .positioning-region .content-region{forced-color-adjust:none;color:${h.HighlightText}}:host([disabled][selected]) .positioning-region .content-region{color:${h.GrayText}}:host([selected])::after{background:${h.HighlightText}}:host(:${E}) .positioning-region{forced-color-adjust:none;outline-color:${h.ButtonFace}}:host([disabled]),:host([disabled]) .content-region,:host([disabled]) .positioning-region:hover .content-region{opacity:1;color:${h.GrayText}}:host(.nested) .expand-collapse-button:hover,:host(:not([disabled])[selected]) .expand-collapse-button:hover{background:${h.ButtonFace};fill:${h.ButtonText}}`)),Xg=et.compose({baseName:"tree-item",template:ju,styles:wd,expandCollapseGlyph:`
    <svg width="12" height="12" xmlns="http://www.w3.org/2000/svg">
      <path d="M4.65 2.15a.5.5 0 000 .7L7.79 6 4.65 9.15a.5.5 0 10.7.7l3.5-3.5a.5.5 0 000-.7l-3.5-3.5a.5.5 0 00-.7 0z"/>
    </svg>
  `}),Yb=wd,Yg={fluentAccordion:Sf,fluentAccordionItem:If,fluentAnchor:qf,fluentAnchoredRegion:Gf,fluentBadge:Wf,fluentBreadcrumb:Xf,fluentBreadcrumbItem:Yf,fluentButton:Qf,fluentCalendar:tg,fluentCard:eg,fluentCheckbox:ig,fluentCombobox:sg,fluentDataGrid:ag,fluentDataGridCell:ng,fluentDataGridRow:rg,fluentDesignSystemProvider:lg,fluentDialog:cg,fluentDivider:dg,fluentFlipper:hg,fluentHorizontalScroll:gg,fluentListbox:mg,fluentOption:bg,fluentMenu:vg,fluentMenuItem:yg,fluentNumberField:xg,fluentProgress:wg,fluentProgressRing:$g,fluentRadio:kg,fluentRadioGroup:Cg,fluentSearch:Tg,fluentSelect:Dg,fluentSkeleton:Rg,fluentSlider:Eg,fluentSliderLabel:Og,fluentSwitch:Ag,fluentTabs:zg,fluentTab:Lg,fluentTabPanel:Vg,fluentTextArea:Hg,fluentTextField:Pg,fluentToolbar:Ng,fluentTooltip:_g,fluentTreeView:jg,fluentTreeItem:Xg,register(i,...t){if(i)for(let e in this)e!=="register"&&this[e]().register(i,...t)}};function Qg(i){return wl.getOrCreate(i).withPrefix("fluent")}var Qb=Qg().register(Yg);function $d(i,t,e){let o=new CustomEvent(t,{detail:e,bubbles:!0,cancelable:!0});return i.dispatchEvent(o)}var kd=`
    :host{ display: grid; }
    :host([resizing]){ user-select: none; }
    :host([resizing][direction=row]){ cursor: col-resize; }
    :host([direction=row]) { grid-template-columns: var(--first-size, 1fr) max-content var(--second-size, 1fr); }
    :host([direction=row]) #median { grid-column: 2 / 3; }
    :host([direction=row]) #median:hover { cursor: col-resize; }
    :host([direction=row]) #median span[part="handle"] { height: 16px; margin: 2px 0; }
    :host([direction=row]) #slot1 { grid-column: 1 / 2; grid-row: 1 / 1; }
    :host([direction=row]) #slot2 { grid-column: 3 / 4; grid-row: 1 / 1; }

    :host([resizing][direction=col]){ cursor: row-resize; }
    :host([direction=column]) { grid-template-rows: var(--first-size, 1fr) max-content var(--second-size, 1fr); }
    :host([direction=column]) #median { grid-row: 2 / 3; }
    :host([direction=column]) #median:hover { cursor: row-resize; }
    :host([direction=column]) #median span[part="handle"] { width: 16px; margin: 0 2px; }
    :host([direction=column]) #slot1 { grid-row: 1 / 2; grid-column: 1 / 1; }
    :host([direction=column]) #slot2 { grid-row: 3 / 4; grid-column: 1 / 1; }

    #median { background: var(--neutral-stroke-rest); display: inline-flex; align-items:center; justify-content: center; }
    #median:hover { background: var(--neutral-stroke-hover); }
    #median:active { background: var(--neutral-stroke-active); }
    #median:focus { background: var(--neutral-stroke-focus); }
                
    #median span[part="handle"] {  border: 1px solid var(--neutral-stroke-strong-rest); border-radius: 1px; }

    ::slotted(*) { overflow: auto; }

    :host([collapsed]) { grid-template-columns: 1fr !important; grid-template-rows: none !important; }
    :host([collapsed]) #median { display: none; }
    :host([collapsed]) #slot2 { display: none; }

    :host([no-barhandle]) #median span[part="handle"] { display: none; }
`,Zg=`
    <slot id="slot1" name="1"></slot>
    <div id="median" part="median">
        <span part="handle"></span>
    </div>
    <slot id="slot2" name="2"></slot>
`,Os=class extends HTMLElement{static observedAttributes=["direction","collapsed","barsize","no-barhandle","slot1minsize","slot2minsize"];#n="row";#r=!1;#i=!1;#a=8;#o=!0;#t=0;#e=0;#l=0;#c=0;#s=0;left=0;right=0;top=0;dom;constructor(){super(),this.bind(this)}bind(t){t.attachEvents=t.attachEvents.bind(t),t.render=t.render.bind(t),t.cacheDom=t.cacheDom.bind(t),t.pointerdown=t.pointerdown.bind(t),t.resizeDrag=t.resizeDrag.bind(t)}render(){if(document.adoptedStyleSheets){let e=this.attachShadow({mode:"open"}),o=new CSSStyleSheet;o.replaceSync(kd),e.adoptedStyleSheets=[...e.adoptedStyleSheets,o],e.innerHTML=Zg}else{var t=document.createElement("style");t.type="text/css",t.innerHTML=kd,document.getElementsByTagName("head")[0].appendChild(t)}this.updateBarSizeStyle()}connectedCallback(){this.render(),this.cacheDom(),this.attachEvents()}cacheDom(){this.dom={median:this.shadowRoot.querySelector("#median")}}attachEvents(){this.dom.median.addEventListener("pointerdown",this.pointerdown)}pointerdown(t){this.isResizing=!0;let e=this.getBoundingClientRect();this.left=e.x,this.right=e.right,this.top=e.y,this.#s=this.direction==="row"?e.width:e.height,this.addEventListener("pointermove",this.resizeDrag),this.addEventListener("pointerup",this.pointerup)}pointerup(){this.isResizing=!1,$d(this,"splitterresized",{panel1size:this.#t,panel2size:this.#e}),this.removeEventListener("pointermove",this.resizeDrag),this.removeEventListener("pointerup",this.pointerup)}resizeDrag(t){if(this.direction==="row"){let e=document.body.dir===""||document.body.dir==="ltr"?t.clientX-this.left:this.right-t.clientX,o=this.barsize;this.#t=Math.floor(e-o/2),this.#e=Math.floor(this.clientWidth-this.#t-o/2);let s=this.ensurevalue(this.slot1minsize);this.#t<s&&(this.#t=Math.floor(s),this.#e=Math.floor(this.clientWidth-this.#t-o/2));let n=this.ensurevalue(this.slot2minsize);this.#e<n&&(this.#e=Math.floor(n),this.#t=Math.floor(this.clientWidth-this.#e-o/2));let r=this.#t+this.#e-o,a=(this.#t/r).toFixed(2),d=(this.#e/r).toFixed(2);this.style.gridTemplateColumns=`${a}fr ${o}px ${d}fr`}if(this.direction==="column"){let e=t.clientY-this.top,o=this.barsize;this.#t=Math.floor(e-o/2),this.#e=Math.floor(this.clientHeight-this.#t-o/2);let s=this.ensurevalue(this.slot1minsize);this.#t<s&&(this.#t=Math.floor(s),this.#e=Math.floor(this.clientHeight-this.#t-o/2));let n=this.ensurevalue(this.slot2minsize);this.#e<n&&(this.#e=Math.floor(n),this.#t=Math.floor(this.clientHeight-this.#e-o/2));let r=this.#t+this.#e-o,a=(this.#t/r).toFixed(2),d=(this.#e/r).toFixed(2);this.style.gridTemplateRows=`${a}fr ${o}px ${d}fr`}}updateBarSizeStyle(){let t=this.shadowRoot?.querySelector("#median");t&&t.style&&(this.direction==="row"?(t.style.inlineSize=this.barsize+"px",t.style.blockSize=""):(t.style.blockSize=this.barsize+"px",t.style.inlineSize=""))}attributeChangedCallback(t,e,o){o!=e&&(this[t]=o),console.log(`Attribute ${t} has changed from ${e} to ${o}.`)}ensurevalue(t){return t?(t=t.trim().toLowerCase(),t.endsWith("%")?this.#s*parseFloat(t)/100:t.endsWith("px")?parseFloat(t):t.endsWith("fr")?this.#s*parseFloat(t):0):0}set isResizing(t){this.#r=t,t?this.setAttribute("resizing",""):(this.style.userSelect="",this.style.cursor="",this.removeAttribute("resizing"))}get isResizing(){return this.#r}set direction(t){this.#n=t,this.setAttribute("direction",t),this.style.gridTemplateRows="",this.style.gridTemplateColumns="",this.updateBarSizeStyle()}get direction(){return this.#n}set collapsed(t){let e=t!=null&&t!==!1;this.#i!==e&&(this.#i=e,this.#i?this.setAttribute("collapsed",""):this.removeAttribute("collapsed"),$d(this,"splittercollapsed",{collapsed:this.#i}))}get collapsed(){return this.#i}set slot1minsize(t){this.#l=t??0}get slot1minsize(){return this.#l}set slot2minsize(t){this.#c=t??0}get slot2minsize(){return this.#c}set barsize(t){this.#a=t,this.updateBarSizeStyle()}get barsize(){return this.#a}set barhandle(t){let e=t!=null&&t!==!1;this.#o!==e&&(this.#o=e,this.#o?this.removeAttribute("no-barhandle"):this.setAttribute("no-barhandle",""))}get barhandle(){return this.#o}};var Qe=class i{static isSystemDark(){return window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches}static parseColorHexRGB(t){let o=/^#((?:[0-9a-f]{6}|[0-9a-f]{3}))$/i.exec(t??i.DEFAULT_COLOR);if(o===null)return null;let s=o[1];if(s.length===3){let r=s.charAt(0),a=s.charAt(1),d=s.charAt(2);s=r.concat(r,a,a,d,d)}let n=parseInt(s,16);return isNaN(n)?null:new ta(this.normalized((n&16711680)>>>16,0,255),this.normalized((n&65280)>>>8,0,255),this.normalized(n&255,0,255))}static normalized(t,e,o){return isNaN(t)||t<=e?0:t>=o?1:t/(o-e)}static getHexColor(t){return this.NAMED_COLORS.find(e=>e.App.toLowerCase()===t?.toLowerCase())?.Color??i.DEFAULT_COLOR}static DEFAULT_COLOR="#0078D4";static NAMED_COLORS=[{App:"Access",Color:"#a4373a"},{App:"Booking",Color:"#00a99d"},{App:"Exchange",Color:"#0078d4"},{App:"Excel",Color:"#217346"},{App:"GroupMe",Color:"#00bcf2"},{App:"Office",Color:"#d83b01"},{App:"OneDrive",Color:"#0078d4"},{App:"OneNote",Color:"#7719aa"},{App:"Outlook",Color:"#0f6cbd"},{App:"Planner",Color:"#31752f"},{App:"PowerApps",Color:"#742774"},{App:"PowerBI",Color:"#f2c811"},{App:"PowerPoint",Color:"#b7472a"},{App:"Project",Color:"#31752f"},{App:"Publisher",Color:"#077568"},{App:"SharePoint",Color:"#0078d4"},{App:"Skype",Color:"#0078d4"},{App:"Stream",Color:"#bc1948"},{App:"Sway",Color:"#008272"},{App:"Teams",Color:"#6264a7"},{App:"Visio",Color:"#3955a3"},{App:"Windows",Color:"#0078d4"},{App:"Word",Color:"#2b579a"},{App:"Yamme",Color:"#106ebe"},{App:"Word",Color:""}]},ta=class{constructor(t,e,o){this.r=t,this.g=e,this.b=o}r;g;b};var De=class i{_designTheme;constructor(t){this._designTheme=t}get storageName(){return this._designTheme.storageName}updateLocalStorage(t,e){localStorage!=null&&this._designTheme._isInitialized&&this.storageName!=null&&localStorage.setItem(this.storageName,JSON.stringify({mode:i.getValueOrNull(t),primaryColor:i.getValueOrNull(e)}))}readLocalStorage(){if(localStorage==null||this.storageName==null)return null;let t=localStorage.getItem(this.storageName);if(t==null)return null;let e=JSON.parse(t);return{mode:i.getValueOrNull(e?.mode),primaryColor:i.getValueOrNull(e?.primaryColor)}}clearLocalStorage(){localStorage!=null&&this.storageName!=null&&localStorage.removeItem(this.storageName)}static getValueOrNull(t){return t==null||t==null||t=="null"||t=="undefined"?null:t}};var As=class{_designTheme;constructor(t){this._designTheme=t}synchronizeAttribute=(t,e,o)=>{this._designTheme.id!==t&&(this._designTheme.dispatchAttributeChanged(e,this._designTheme.getAttribute(e),o),this._designTheme.updateAttribute(e,o))};synchronizeOtherComponents(t,e){if(!this._designTheme._isInitialized)return;let o=document.querySelectorAll(`fluent-design-theme:not([id="${this._designTheme.id}"])`);for(let s=0;s<o.length;s++){let n=o[s];n.synchronization.synchronizeAttribute instanceof Function&&setTimeout(n.synchronization.synchronizeAttribute,0,this._designTheme.id,t,e)}}};var Ls=class extends HTMLElement{_isInitialized=!1;_themeStorage;_synchronization;_isInternalChange=!1;constructor(){super(),this._themeStorage=new De(this),this._synchronization=new As(this)}get themeStorage(){return this._themeStorage}get mode(){return this.getAttribute("mode")}set mode(t){switch(this.updateAttribute("mode",t),t?.toLowerCase()){case"dark":Dt.withDefault(se.DarkMode);break;case"light":Dt.withDefault(se.LightMode);break;default:window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches?Dt.withDefault(se.DarkMode):Dt.withDefault(se.LightMode);break}this._synchronization.synchronizeOtherComponents("mode",t)}get primaryColor(){return this.getAttribute("primary-color")}set primaryColor(t){this.updateAttribute("primary-color",t);let e=t==null||!t.startsWith("#")?Qe.getHexColor(t):t,o=Qe.parseColorHexRGB(e);if(o!=null){let s=Tt.from(o);gs.withDefault(s)}this._synchronization.synchronizeOtherComponents("primary-color",t)}get storageName(){return this.getAttribute("storage-name")}set storageName(t){this.updateAttribute("storage-name",t)}get synchronization(){return this._synchronization}connectedCallback(){window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",this.colorSchemeListener);let t=document.querySelector(`fluent-design-theme:not([id="${this.id}"])`);if(t!=null){let e=De.getValueOrNull(t.getAttribute("mode")),o=De.getValueOrNull(t.getAttribute("primary-color"));this.attributeChangedCallback("mode",this.mode,e),o!=null&&this.attributeChangedCallback("primary-color",this.primaryColor,o)}else if(this.storageName!=null){let e=this._themeStorage.readLocalStorage();e!=null&&(this.attributeChangedCallback("mode",this.mode,e.mode),this.attributeChangedCallback("primary-color",this.primaryColor,e.primaryColor))}if(this._isInitialized=!0,this.mode==null){let e=this._themeStorage.readLocalStorage()?.mode;e==null?this.colorSchemeListener(new MediaQueryListEvent("change",{matches:Qe.isSystemDark()})):this.colorSchemeListener(new MediaQueryListEvent("change",{matches:e=="dark"}))}}disconnectedCallback(){this._isInitialized=!1,window.matchMedia("(prefers-color-scheme: dark)").removeEventListener("change",this.colorSchemeListener)}adoptedCallback(){}static get observedAttributes(){return["mode","primary-color","storage-name"]}attributeChangedCallback(t,e,o){if(!this._isInternalChange&&(e=De.getValueOrNull(e),o=De.getValueOrNull(o),o==null&&this.removeAttribute(t),e!==o))switch(t){case"mode":this.dispatchAttributeChanged(t,e,o),this.mode=o;break;case"primary-color":this.dispatchAttributeChanged(t,e,o),this.primaryColor=o;break;case"storage-name":this.storageName=o;break}}colorSchemeListener=t=>{if(!this._isInitialized)return;let e=this.getAttribute("mode");e==null&&(t.matches?(this.dispatchAttributeChanged("mode",e,"system-dark"),Dt.withDefault(se.DarkMode)):(this.dispatchAttributeChanged("mode",e,"system-light"),Dt.withDefault(se.LightMode)))};dispatchAttributeChanged(t,e,o){e!==o&&(t==="mode"&&(o=o??(Qe.isSystemDark()?"system-dark":"system-light")),this.dispatchEvent(new CustomEvent("onchange",{bubbles:!1,detail:{name:t,oldValue:e,newValue:o}})))}updateAttribute(t,e){this._isInternalChange=!0,this.getAttribute(t)!=e&&(e?this.setAttribute(t,e):this.removeAttribute(t)),this.storageName!=null&&this._themeStorage.updateLocalStorage(this.mode,this.primaryColor),this._isInternalChange=!1}};var Ei=new Map,Vs=class extends HTMLElement{static observedAttributes=["src"];src=null;attributeChangedCallback(t,e,o){t==="src"&&(this.src=o,this.unregisterPageScriptElement(e),this.registerPageScriptElement(o))}disconnectedCallback(){this.unregisterPageScriptElement(this.src)}registerPageScriptElement(t){if(!t)throw new Error('Must provide a non-empty value for the "src" attribute.');let e=Ei.get(t);e?e.referenceCount++:(e={referenceCount:1,module:null},Ei.set(t,e),this.initializePageScriptModule(t,e))}unregisterPageScriptElement(t){if(!t)return;let e=Ei.get(t);e&&e.referenceCount--}async initializePageScriptModule(t,e){t.startsWith("./")&&(t=new URL(t.substring(2),document.baseURI).toString());let o=await import(t);e.referenceCount<=0||(e.module=o,o.onLoad?.(),o.onUpdate?.())}};function Cd(){for(let[i,{module:t,referenceCount:e}]of Ei)e<=0&&(t?.onDispose?.(),Ei.delete(i));for(let{module:i}of Ei.values())i?.onUpdate?.()}var Fd=new CSSStyleSheet,Jg=`
body:has(.prevent-scroll) {
    overflow: hidden;
}
:root {
    --font-monospace: Consolas, "Courier New", "Liberation Mono", SFMono-Regular, Menlo, Monaco, monospace;
    --success: #0E700E;
    --warning: #E9835E;
    --error: #BC2F32;
    --info: #616161;
    --presence-available: #13a10e;
    --presence-away: #eaa300;
    --presence-busy: #d13438;
    --presence-dnd: #d13438;
    --presence-offline: #adadad;
    --presence-oof: #c239b3;
    --presence-unknown: #d13438;
    --highlight-bg: #fff3cd;
}
`;Fd.replaceSync(Jg);document.adoptedStyleSheets=[...document.adoptedStyleSheets,Fd];var zs=!1,Hs=!1;function mv(i){Hs||ea(i,"web")}function bv(i){zs||ia(i)}function vv(i){zs||ia(i)}function yv(i){Hs||ea(i,"wasm")}function xv(i){zs||ia(i)}function wv(i){Hs||ea(i,"server")}function ea(i,t){i.registerCustomEventType("radiogroupclick",{browserEventName:"click",createEventArgs:e=>e.target._readOnly||e.target._disabled?null:{value:e.target.value}}),i.registerCustomEventType("checkedchange",{browserEventName:"change",createEventArgs:e=>e.target.isUpdating?{checked:null,indeterminate:null}:{checked:e.target.currentChecked,indeterminate:e.target.indeterminate}}),i.registerCustomEventType("switchcheckedchange",{browserEventName:"change",createEventArgs:e=>({checked:e.target.checked})}),i.registerCustomEventType("accordionchange",{browserEventName:"change",createEventArgs:e=>e.target.localName=="fluent-accordion-item"?{activeId:e.target.id,expanded:e.target._expanded}:null}),i.registerCustomEventType("tabchange",{browserEventName:"change",createEventArgs:e=>e.target.localName=="fluent-tabs"?{activeId:e.detail.id}:null}),i.registerCustomEventType("selectedchange",{browserEventName:"selected-change",createEventArgs:e=>e.target.localName=="fluent-tree-item"?{affectedId:e.detail.attributes.id.value,selected:e.detail._selected,expanded:e.detail._expanded}:null}),i.registerCustomEventType("expandedchange",{browserEventName:"expanded-change",createEventArgs:e=>({affectedId:e.detail.attributes.id.value,selected:e.detail._selected,expanded:e.detail._expanded})}),i.registerCustomEventType("dateselected",{browserEventName:"dateselected",createEventArgs:e=>({calendarDateInfo:e.detail})}),i.registerCustomEventType("tooltipdismiss",{browserEventName:"dismiss",createEventArgs:e=>e.target.localName=="fluent-tooltip"?{reason:e.type}:null}),i.registerCustomEventType("dialogdismiss",{browserEventName:"dismiss",createEventArgs:e=>e.target.localName=="fluent-dialog"?{id:e.target.id,reason:e.type}:null}),i.registerCustomEventType("menuchange",{browserEventName:"change",createEventArgs:e=>({id:e.target.id,value:e.target.innerText})}),i.registerCustomEventType("scrollstart",{browserEventName:"scrollstart",createEventArgs:e=>({scroll:e.detail})}),i.registerCustomEventType("scrollend",{browserEventName:"scrollend",createEventArgs:e=>({scroll:e.detail})}),i.registerCustomEventType("cellfocus",{browserEventName:"cell-focused",createEventArgs:e=>({cellId:e.detail.attributes["cell-id"].value})}),i.registerCustomEventType("rowfocus",{browserEventName:"row-focused",createEventArgs:e=>({rowId:e.detail.attributes["row-id"].value})}),i.registerCustomEventType("splitterresized",{browserEventName:"splitterresized",createEventArgs:e=>({panel1size:e.detail.panel1size,panel2size:e.detail.panel2size})}),i.registerCustomEventType("splittercollapsed",{browserEventName:"splittercollapsed",createEventArgs:e=>({collapsed:e.detail.collapsed})}),i.theme={isSystemDark:()=>window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches,isDarkMode:()=>{let e=getComputedStyle(document.documentElement).getPropertyValue("--base-layer-luminance");return parseFloat(e)<.5}},typeof i.addEventListener=="function"&&t==="web"&&(customElements.define("fluent-page-script",Vs),i.addEventListener("enhancedload",Cd)),Hs=!0}function ia(i){customElements.define("fluent-design-theme",Ls),customElements.define("split-panels",Os),zs=!0}export{Lc as AccentButtonStyles,Xi as Accordion,de as AccordionItem,ts as Anchor,R as AnchoredRegion,es as Badge,Mo as Breadcrumb,Ne as BreadcrumbItem,is as Button,eo as Card,ss as Combobox,nt as DataGrid,qt as DataGridCell,st as DataGridRow,C as DesignSystemProvider,_ as DesignToken,he as Dialog,Ie as DirectionalStyleSheetBehavior,fi as Divider,gi as Flipper,Qb as FluentDesignSystem,fr as HorizontalScroll,Nf as HypertextStyles,Vc as LightweightButtonStyles,gr as Listbox,mr as Menu,wt as MenuItem,Zr as NeutralButtonStyles,ns as NumberField,Db as OptionStyles,zc as OutlineButtonStyles,Ki as PaletteRGB,br as Progress,vr as ProgressRing,vi as Radio,ie as RadioGroup,Vb as RadioStyles,rs as Search,as as Select,je as Skeleton,rt as Slider,Yt as SliderLabel,se as StandardLuminance,Jr as StealthButtonStyles,Tt as SwatchRGB,Zi as Switch,Go as Tab,or as TabPanel,Qt as Tabs,ls as TextArea,cs as TextField,yr as Toolbar,xr as Tooltip,et as TreeItem,xi as TreeView,gs as accentBaseColor,Jt as accentFillActive,hr as accentFillActiveDelta,bs as accentFillFocus,ur as accentFillFocusDelta,Zt as accentFillHover,dr as accentFillHoverDelta,ms as accentFillRecipe,q as accentFillRest,cr as accentFillRestDelta,mc as accentForegroundActive,Bl as accentForegroundActiveDelta,Vm as accentForegroundCut,zm as accentForegroundCutLarge,em as accentForegroundFocus,_l as accentForegroundFocusDelta,gc as accentForegroundHover,Nl as accentForegroundHoverDelta,ys as accentForegroundRecipe,fc as accentForegroundRest,Ml as accentForegroundRestDelta,Nr as accentPalette,of as accentStrokeControlActive,im as accentStrokeControlFocus,ef as accentStrokeControlHover,xs as accentStrokeControlRecipe,tf as accentStrokeControlRest,rb as accordionItemStyles,ab as accordionStyles,wv as afterServerStarted,ea as afterStarted,yv as afterWebAssemblyStarted,mv as afterWebStarted,Yg as allComponents,Tf as ambientShadow,ub as anchorStyles,pb as anchoredRegionStyles,fb as badgeStyles,Ac as baseButtonStyles,fs as baseHeightMultiplier,kp as baseHorizontalSpacingMultiplier,Es as baseInputStyles,Dt as baseLayerLuminance,xv as beforeServerStart,ia as beforeStart,vv as beforeWebAssemblyStart,bv as beforeWebStart,Mt as bodyFont,mb as breadcrumbItemStyles,gb as breadcrumbStyles,bb as buttonStyles,vb as cardStyles,yb as checkboxStyles,xb as comboboxStyles,M as controlCornerRadius,bm as cornerRadius,wb as dataGridCellStyles,$b as dataGridRowStyles,kb as dataGridStyles,Se as density,$ as designUnit,Cb as dialogStyles,Oo as direction,Df as directionalShadow,Et as disabledOpacity,Fb as dividerStyles,vm as elevatedCornerRadius,lb as elevation,db as elevationShadowCardActive,Of as elevationShadowCardActiveSize,hb as elevationShadowCardFocus,Af as elevationShadowCardFocusSize,cb as elevationShadowCardHover,Ef as elevationShadowCardHoverSize,Lf as elevationShadowCardRest,Rf as elevationShadowCardRestSize,Mf as elevationShadowDialog,Pf as elevationShadowDialogSize,Oc as elevationShadowFlyout,Hf as elevationShadowFlyoutSize,Ye as elevationShadowRecipe,zf as elevationShadowTooltip,Vf as elevationShadowTooltipSize,L as fillColor,Ib as flipperStyles,Sf as fluentAccordion,If as fluentAccordionItem,qf as fluentAnchor,Gf as fluentAnchoredRegion,Wf as fluentBadge,Xf as fluentBreadcrumb,Yf as fluentBreadcrumbItem,Qf as fluentButton,tg as fluentCalendar,eg as fluentCard,ig as fluentCheckbox,sg as fluentCombobox,ag as fluentDataGrid,ng as fluentDataGridCell,rg as fluentDataGridRow,lg as fluentDesignSystemProvider,cg as fluentDialog,dg as fluentDivider,hg as fluentFlipper,gg as fluentHorizontalScroll,mg as fluentListbox,vg as fluentMenu,yg as fluentMenuItem,xg as fluentNumberField,bg as fluentOption,wg as fluentProgress,$g as fluentProgressRing,kg as fluentRadio,Cg as fluentRadioGroup,Tg as fluentSearch,Dg as fluentSelect,Rg as fluentSkeleton,Eg as fluentSlider,Og as fluentSliderLabel,Ag as fluentSwitch,Lg as fluentTab,Vg as fluentTabPanel,zg as fluentTabs,Hg as fluentTextArea,Pg as fluentTextField,Ng as fluentToolbar,_g as fluentTooltip,Xg as fluentTreeItem,jg as fluentTreeView,xm as focusOutlineWidth,Cc as focusStrokeInner,mf as focusStrokeInnerRecipe,ao as focusStrokeOuter,gf as focusStrokeOuterRecipe,ht as focusStrokeWidth,Nt as focusTreatmentBase,lo as focusTreatmentTight,Cp as fontWeight,pc as foregroundOnAccentActive,gm as foregroundOnAccentActiveLarge,tm as foregroundOnAccentFocus,mm as foregroundOnAccentFocusLarge,uc as foregroundOnAccentHover,fm as foregroundOnAccentHoverLarge,Ds as foregroundOnAccentLargeRecipe,vs as foregroundOnAccentRecipe,Fe as foregroundOnAccentRest,bf as foregroundOnAccentRestLarge,V as heightNumber,Sb as horizontalScrollStyles,Di as inputFilledStyles,Ri as inputForcedColorStyles,ho as inputOutlineStyles,co as inputStateStyles,oo as isDark,te as layerCornerRadius,Tb as listboxStyles,Eb as menuItemStyles,Rb as menuStyles,dc as neutralBaseColor,Bm as neutralContrastFillActive,km as neutralContrastFillActiveDelta,_m as neutralContrastFillFocus,Cm as neutralContrastFillFocusDelta,Nm as neutralContrastFillHover,$m as neutralContrastFillHoverDelta,Mm as neutralContrastFillRest,wm as neutralContrastFillRestDelta,Hm as neutralDivider,Rm as neutralDividerRestDelta,qa as neutralFillActive,ql as neutralFillActiveDelta,Pm as neutralFillCard,Fm as neutralFillCardDelta,om as neutralFillFocus,Gl as neutralFillFocusDelta,Ua as neutralFillHover,Ul as neutralFillHoverDelta,sm as neutralFillInputActive,Yl as neutralFillInputActiveDelta,jr as neutralFillInputAltActive,Ba as neutralFillInputAltActiveDelta,Ur as neutralFillInputAltFocus,_a as neutralFillInputAltFocusDelta,_r as neutralFillInputAltHover,Na as neutralFillInputAltHoverDelta,$s as neutralFillInputAltRecipe,Br as neutralFillInputAltRest,$o as neutralFillInputAltRestDelta,Wa as neutralFillInputFocus,Ql as neutralFillInputFocusDelta,Ga as neutralFillInputHover,Xl as neutralFillInputHoverDelta,Te as neutralFillInputRecipe,Co as neutralFillInputRest,Wl as neutralFillInputRestDelta,wf as neutralFillInverseActive,Sc as neutralFillInverseActiveDelta,$f as neutralFillInverseFocus,Tc as neutralFillInverseFocusDelta,xf as neutralFillInverseHover,Ic as neutralFillInverseHoverDelta,Rs as neutralFillInverseRecipe,yf as neutralFillInverseRest,Fc as neutralFillInverseRestDelta,rm as neutralFillLayerActive,Vp as neutralFillLayerActiveDelta,sf as neutralFillLayerAltRecipe,nf as neutralFillLayerAltRest,ko as neutralFillLayerAltRestDelta,nm as neutralFillLayerHover,Lp as neutralFillLayerHoverDelta,We as neutralFillLayerRecipe,bc as neutralFillLayerRest,pe as neutralFillLayerRestDelta,ws as neutralFillRecipe,At as neutralFillRest,jl as neutralFillRestDelta,rf as neutralFillSecondaryActive,Pp as neutralFillSecondaryActiveDelta,af as neutralFillSecondaryFocus,Mp as neutralFillSecondaryFocusDelta,qr as neutralFillSecondaryHover,Hp as neutralFillSecondaryHoverDelta,Xe as neutralFillSecondaryRecipe,Ue as neutralFillSecondaryRest,zp as neutralFillSecondaryRestDelta,Ci as neutralFillStealthActive,Kl as neutralFillStealthActiveDelta,lf as neutralFillStealthFocus,tc as neutralFillStealthFocusDelta,ki as neutralFillStealthHover,Jl as neutralFillStealthHoverDelta,Kt as neutralFillStealthRecipe,$i as neutralFillStealthRest,Zl as neutralFillStealthRestDelta,yc as neutralFillStrongActive,Hr as neutralFillStrongActiveDelta,cf as neutralFillStrongFocus,Pr as neutralFillStrongFocusDelta,vc as neutralFillStrongHover,zr as neutralFillStrongHoverDelta,ks as neutralFillStrongRecipe,Gr as neutralFillStrongRest,ec as neutralFillStrongRestDelta,qm as neutralFillToggleActive,Tm as neutralFillToggleActiveDelta,Gm as neutralFillToggleFocus,Dm as neutralFillToggleFocusDelta,Um as neutralFillToggleHover,Sm as neutralFillToggleHoverDelta,jm as neutralFillToggleRest,Im as neutralFillToggleRestDelta,Wm as neutralFocus,Xm as neutralFocusInnerAccent,hf as neutralForegroundActive,am as neutralForegroundFocus,Fi as neutralForegroundHint,ro as neutralForegroundHintRecipe,df as neutralForegroundHover,Cs as neutralForegroundRecipe,B as neutralForegroundRest,hc as neutralLayer1,Wp as neutralLayer1Recipe,Yp as neutralLayer2,Xp as neutralLayer2Recipe,Zp as neutralLayer3,Qp as neutralLayer3Recipe,Kp as neutralLayer4,Jp as neutralLayer4Recipe,Kg as neutralLayerCardContainer,qp as neutralLayerCardContainerRecipe,no as neutralLayerFloating,Gp as neutralLayerFloatingRecipe,Em as neutralLayerL1,Om as neutralLayerL2,Am as neutralLayerL3,Lm as neutralLayerL4,Zm as neutralOutlineActive,Jm as neutralOutlineFocus,Qm as neutralOutlineHover,Ym as neutralOutlineRest,W as neutralPalette,wc as neutralStrokeActive,sc as neutralStrokeActiveDelta,kc as neutralStrokeControlActive,lc as neutralStrokeControlActiveDelta,lm as neutralStrokeControlFocus,cc as neutralStrokeControlFocusDelta,$c as neutralStrokeControlHover,ac as neutralStrokeControlHoverDelta,Is as neutralStrokeControlRecipe,Wr as neutralStrokeControlRest,rc as neutralStrokeControlRestDelta,pf as neutralStrokeDividerRecipe,to as neutralStrokeDividerRest,Mr as neutralStrokeDividerRestDelta,uf as neutralStrokeFocus,nc as neutralStrokeFocusDelta,xc as neutralStrokeHover,oc as neutralStrokeHoverDelta,cm as neutralStrokeInputActive,dm as neutralStrokeInputFocus,ff as neutralStrokeInputHover,Ss as neutralStrokeInputRecipe,Xa as neutralStrokeInputRest,um as neutralStrokeLayerActive,Bp as neutralStrokeLayerActiveDelta,hm as neutralStrokeLayerHover,Np as neutralStrokeLayerHoverDelta,Xr as neutralStrokeLayerRecipe,oi as neutralStrokeLayerRest,ja as neutralStrokeLayerRestDelta,Fs as neutralStrokeRecipe,Ii as neutralStrokeRest,ic as neutralStrokeRestDelta,Qr as neutralStrokeStrongActive,jp as neutralStrokeStrongActiveDelta,pm as neutralStrokeStrongFocus,Up as neutralStrokeStrongFocusDelta,Yr as neutralStrokeStrongHover,_p as neutralStrokeStrongHoverDelta,Ts as neutralStrokeStrongRecipe,Ti as neutralStrokeStrongRest,Ob as numberFieldStyles,ym as outlineWidth,Lb as progressRingStyles,Ab as progressStyles,Qg as provideFluentDesignSystem,zb as radioGroupStyles,Hb as searchStyles,Fg as searchTemplate,Pb as selectStyles,Mb as skeletonStyles,Bb as sliderLabelStyles,Nb as sliderStyles,I as strokeWidth,_b as switchStyles,Ub as tabPanelStyles,jb as tabStyles,qb as tabsStyles,Gb as textAreaStyles,Wb as textFieldStyles,Yb as treeItemStyles,Xb as treeViewStyles,tt as typeRampBase,Ir as typeRampBaseFontSize,Fp as typeRampBaseFontVariations,El as typeRampBaseLineHeight,Dc as typeRampMinus1,Sr as typeRampMinus1FontSize,Ip as typeRampMinus1FontVariations,Tr as typeRampMinus1LineHeight,Km as typeRampMinus2,Dr as typeRampMinus2FontSize,Sp as typeRampMinus2FontVariations,Ol as typeRampMinus2LineHeight,tb as typeRampPlus1,Rr as typeRampPlus1FontSize,Tp as typeRampPlus1FontVariations,Al as typeRampPlus1LineHeight,eb as typeRampPlus2,Er as typeRampPlus2FontSize,Dp as typeRampPlus2FontVariations,Ll as typeRampPlus2LineHeight,ib as typeRampPlus3,Or as typeRampPlus3FontSize,Rp as typeRampPlus3FontVariations,Vl as typeRampPlus3LineHeight,ob as typeRampPlus4,Ar as typeRampPlus4FontSize,Ep as typeRampPlus4FontVariations,zl as typeRampPlus4LineHeight,sb as typeRampPlus5,Lr as typeRampPlus5FontSize,Op as typeRampPlus5FontVariations,Hl as typeRampPlus5LineHeight,nb as typeRampPlus6,Vr as typeRampPlus6FontSize,Ap as typeRampPlus6FontVariations,Pl as typeRampPlus6LineHeight};
//# sourceMappingURL=Microsoft.FluentUI.AspNetCore.Components.lib.module.js.map

// SIG // Begin signature block
// SIG // MIInzAYJKoZIhvcNAQcCoIInvTCCJ7kCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // KFsOQl0zFjxnD5n5DeQjZr8LwkCSmb3Nt8omeRW0TO6g
// SIG // gg2FMIIGAzCCA+ugAwIBAgITMwAAA64tNVHIU49VHQAA
// SIG // AAADrjANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMTExNjE5MDg1OVoX
// SIG // DTI0MTExNDE5MDg1OVowdDELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
// SIG // 9CD8pjY3wxCoPmMhOkow7ycCltfqYnqk4wGNApzh2dTY
// SIG // +YqxozWTzJUOB38VxsgFQmXBFhOMdrGYGpvO9kdbNPkw
// SIG // HpTrW6hZqFuLLiRwGKEx4ZM5zVSqbHJuX2fPfUJ0Xmb+
// SIG // VrVsGw/BwBV2zz0rVtiSgqj3GeeGOsG7llfWyrSjyJqm
// SIG // 5DHE3o04BAI/NuhkHOv04euiqJGvHFCL8+fXvyD9OAxq
// SIG // 4fcJKtoyBb0PBA3oMNQeCsiUyLO+voZqVTOUsAWY0bN5
// SIG // YjkK4nq5DVaNdVrrowd5AX9gmz6D/TJTssns6pDCG00Y
// SIG // +Dh3ipWpnVmkhYcByyUSEKX3PLC8DkiAQQIDAQABo4IB
// SIG // gjCCAX4wHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYB
// SIG // BQUHAwMwHQYDVR0OBBYEFIcf73Spl4cHOFoll27H9COd
// SIG // 4fE/MFQGA1UdEQRNMEukSTBHMS0wKwYDVQQLEyRNaWNy
// SIG // b3NvZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQx
// SIG // FjAUBgNVBAUTDTIzMDAxMis1MDE4MzYwHwYDVR0jBBgw
// SIG // FoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYDVR0fBE0w
// SIG // SzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3NvZnQuY29t
// SIG // L3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAxMV8yMDEx
// SIG // LTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMwUQYIKwYB
// SIG // BQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAxMV8yMDEx
// SIG // LTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQBqyWA1Eu7PKNMjaaxl0V7gJ0XBysUo
// SIG // xZluMHJXFE2LEGZIZ2zMLYVjOnAGG/4dluRjSrZZo/8v
// SIG // wk4Xt8v6NBB9ofo8H1P/XidHytWTv9lg9MYu++6lPmu5
// SIG // fCozD3cI2NLZPW2BBhGX2D0R8tQBj0FbmZRuIucpiQ7D
// SIG // K3CHKlfKcc7MP8pPzuMv55Tox8+KFQD1NG6+bfbYA/BN
// SIG // PBkg4tyOh+exbaHfcNuodDJUIjq9dF6oa+Yjy0u0pUMI
// SIG // /B1t+8m6rJo0KSoZlrpesYl0jRhpt+hmqx8uENXoGJcY
// SIG // ZVJ5N2Skq90LViKNRhi9N4U+e8c4y9uXyomUF/6viCPJ
// SIG // 7huTNEJo75ehIJba+IWd3txUEc0R3y6DT6txC6cW1nR/
// SIG // LTbo9I/8fQq538G5IvJ+e5iSiOSVVkVk0i5m03Awy5E2
// SIG // ZSS4PVdQSCcFxmN4tpEfYuR7AAy/GJVtIDFlUpSgdXok
// SIG // pSui5hYtK1R9enXXvo+U/xGkLRc+qp4De3dZbzu7pOq7
// SIG // V/jCyhuCw0bEIAU4urCGIip7TI6GBRzD7yPzjFIqeZY7
// SIG // S4rVW5BRn2oEqpm8Su6yTIQvMIk8x2pwYNUa2339Z4gW
// SIG // 5xW21eFA5mLpo7NRSKRQms5OgAA18aCgqOU7Ds0h6q/Y
// SIG // B4BmEAtoTMl/TBiyKaMGAlEcdy+5FIhmzojMGjCCB3ow
// SIG // ggVioAMCAQICCmEOkNIAAAAAAAMwDQYJKoZIhvcNAQEL
// SIG // BQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMT
// SIG // KU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhv
// SIG // cml0eSAyMDExMB4XDTExMDcwODIwNTkwOVoXDTI2MDcw
// SIG // ODIxMDkwOVowfjELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYG
// SIG // A1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmluZyBQQ0Eg
// SIG // MjAxMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoC
// SIG // ggIBAKvw+nIQHC6t2G6qghBNNLrytlghn0IbKmvpWlCq
// SIG // uAY4GgRJun/DDB7dN2vGEtgL8DjCmQawyDnVARQxQtOJ
// SIG // DXlkh36UYCRsr55JnOloXtLfm1OyCizDr9mpK656Ca/X
// SIG // llnKYBoF6WZ26DJSJhIv56sIUM+zRLdd2MQuA3WraPPL
// SIG // bfM6XKEW9Ea64DhkrG5kNXimoGMPLdNAk/jj3gcN1Vx5
// SIG // pUkp5w2+oBN3vpQ97/vjK1oQH01WKKJ6cuASOrdJXtjt
// SIG // 7UORg9l7snuGG9k+sYxd6IlPhBryoS9Z5JA7La4zWMW3
// SIG // Pv4y07MDPbGyr5I4ftKdgCz1TlaRITUlwzluZH9TupwP
// SIG // rRkjhMv0ugOGjfdf8NBSv4yUh7zAIXQlXxgotswnKDgl
// SIG // mDlKNs98sZKuHCOnqWbsYR9q4ShJnV+I4iVd0yFLPlLE
// SIG // tVc/JAPw0XpbL9Uj43BdD1FGd7P4AOG8rAKCX9vAFbO9
// SIG // G9RVS+c5oQ/pI0m8GLhEfEXkwcNyeuBy5yTfv0aZxe/C
// SIG // HFfbg43sTUkwp6uO3+xbn6/83bBm4sGXgXvt1u1L50kp
// SIG // pxMopqd9Z4DmimJ4X7IvhNdXnFy/dygo8e1twyiPLI9A
// SIG // N0/B4YVEicQJTMXUpUMvdJX3bvh4IFgsE11glZo+TzOE
// SIG // 2rCIF96eTvSWsLxGoGyY0uDWiIwLAgMBAAGjggHtMIIB
// SIG // 6TAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4EFgQUSG5k
// SIG // 5VAF04KqFzc3IrVtqMp1ApUwGQYJKwYBBAGCNxQCBAwe
// SIG // CgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1UdEwEB
// SIG // /wQFMAMBAf8wHwYDVR0jBBgwFoAUci06AjGQQ7kUBU7h
// SIG // 6qfHMdEjiTQwWgYDVR0fBFMwUTBPoE2gS4ZJaHR0cDov
// SIG // L2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJvZHVj
// SIG // dHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIyLmNy
// SIG // bDBeBggrBgEFBQcBAQRSMFAwTgYIKwYBBQUHMAKGQmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMv
// SIG // TWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIyLmNydDCB
// SIG // nwYDVR0gBIGXMIGUMIGRBgkrBgEEAYI3LgMwgYMwPwYI
// SIG // KwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9zb2Z0LmNv
// SIG // bS9wa2lvcHMvZG9jcy9wcmltYXJ5Y3BzLmh0bTBABggr
// SIG // BgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBwAG8AbABp
// SIG // AGMAeQBfAHMAdABhAHQAZQBtAGUAbgB0AC4gHTANBgkq
// SIG // hkiG9w0BAQsFAAOCAgEAZ/KGpZjgVHkaLtPYdGcimwuW
// SIG // EeFjkplCln3SeQyQwWVfLiw++MNy0W2D/r4/6ArKO79H
// SIG // qaPzadtjvyI1pZddZYSQfYtGUFXYDJJ80hpLHPM8QotS
// SIG // 0LD9a+M+By4pm+Y9G6XUtR13lDni6WTJRD14eiPzE32m
// SIG // kHSDjfTLJgJGKsKKELukqQUMm+1o+mgulaAqPyprWElj
// SIG // HwlpblqYluSD9MCP80Yr3vw70L01724lruWvJ+3Q3fMO
// SIG // r5kol5hNDj0L8giJ1h/DMhji8MUtzluetEk5CsYKwsat
// SIG // ruWy2dsViFFFWDgycScaf7H0J/jeLDogaZiyWYlobm+n
// SIG // t3TDQAUGpgEqKD6CPxNNZgvAs0314Y9/HG8VfUWnduVA
// SIG // KmWjw11SYobDHWM2l4bf2vP48hahmifhzaWX0O5dY0Hj
// SIG // Wwechz4GdwbRBrF1HxS+YWG18NzGGwS+30HHDiju3mUv
// SIG // 7Jf2oVyW2ADWoUa9WfOXpQlLSBCZgB/QACnFsZulP0V3
// SIG // HjXG0qKin3p6IvpIlR+r+0cjgPWe+L9rt0uX4ut1eBrs
// SIG // 6jeZeRhL/9azI2h15q/6/IvrC4DqaTuv/DDtBEyO3991
// SIG // bWORPdGdVk5Pv4BXIqF4ETIheu9BCrE/+6jMpF3BoYib
// SIG // V3FWTkhFwELJm3ZbCoBIa/15n8G9bW1qyVJzEw16UM0x
// SIG // ghmfMIIZmwIBATCBlTB+MQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5n
// SIG // IFBDQSAyMDExAhMzAAADri01UchTj1UdAAAAAAOuMA0G
// SIG // CWCGSAFlAwQCAQUAoIGuMBkGCSqGSIb3DQEJAzEMBgor
// SIG // BgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAMBgorBgEE
// SIG // AYI3AgEVMC8GCSqGSIb3DQEJBDEiBCCCBqCwXJcwU4By
// SIG // kqAcUz2O6FMYOHNOdsnsoywlmXclkjBCBgorBgEEAYI3
// SIG // AgEMMTQwMqAUgBIATQBpAGMAcgBvAHMAbwBmAHShGoAY
// SIG // aHR0cDovL3d3dy5taWNyb3NvZnQuY29tMA0GCSqGSIb3
// SIG // DQEBAQUABIIBADj851ZcMfLK9T3FpMHCdheOfqbdyW0i
// SIG // +Q7vvJW6QvbH126BgnfQSHxfsgcNNDBo315G/mEXBRKE
// SIG // QGpPZg3qPvnrYhFEdDq5O61ou8I41jge7r7tyRXX7zZf
// SIG // 8jV0VItj5gEO8ihHAkXQSS97zR499YmBPrIWZg9SObwf
// SIG // GEvV3RUVcm8h+eBg+lWX8ZonC1vFY+rU34HO6dGiPzko
// SIG // ka3Z2H/75PnhCRqtLah3lzvbcRi4E46nEFVcL7vwZTZl
// SIG // YV01aQGyh450ay/pvP8jJ78hZZ22PhX+bxASd4hTjvxU
// SIG // xcRlzHiD+IPNSPReBbUkbTm+XAJgah64vbXqji0C4JpV
// SIG // K2ahghcpMIIXJQYKKwYBBAGCNwMDATGCFxUwghcRBgkq
// SIG // hkiG9w0BBwKgghcCMIIW/gIBAzEPMA0GCWCGSAFlAwQC
// SIG // AQUAMIIBWQYLKoZIhvcNAQkQAQSgggFIBIIBRDCCAUAC
// SIG // AQEGCisGAQQBhFkKAwEwMTANBglghkgBZQMEAgEFAAQg
// SIG // qdeaHPWFpk5XEysJEqkxKuQfl64KF+vTmRG1epH/p+cC
// SIG // BmYzqXQNtxgTMjAyNDA1MDgyMTE0MTUuOTg3WjAEgAIB
// SIG // 9KCB2KSB1TCB0jELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEtMCsG
// SIG // A1UECxMkTWljcm9zb2Z0IElyZWxhbmQgT3BlcmF0aW9u
// SIG // cyBMaW1pdGVkMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVT
// SIG // TjozQkQ0LTRCODAtNjlDMzElMCMGA1UEAxMcTWljcm9z
// SIG // b2Z0IFRpbWUtU3RhbXAgU2VydmljZaCCEXgwggcnMIIF
// SIG // D6ADAgECAhMzAAAB5Y9qwPM9tAujAAEAAAHlMA0GCSqG
// SIG // SIb3DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwMB4XDTIzMTAxMjE5MDczNVoXDTI1MDExMDE5MDcz
// SIG // NVowgdIxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsT
// SIG // JE1pY3Jvc29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGlt
// SIG // aXRlZDEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046M0JE
// SIG // NC00QjgwLTY5QzMxJTAjBgNVBAMTHE1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFNlcnZpY2UwggIiMA0GCSqGSIb3DQEB
// SIG // AQUAA4ICDwAwggIKAoICAQCpe+A62rtjuiy6yTtx8k7z
// SIG // vWl2ov/3jcj+TC1ma5lBjTiTD8DCNPFfcwX0TzXLnK3i
// SIG // GEsiR45DCFBprodKz1ef9vlAixqzdT++5/X6v5nc1zDd
// SIG // Rc6mjx3ShJSp3iUPEenD+Ha7thspprda6xnDXvNNAnA+
// SIG // nfzXaKJppHdfelajrY2RQNV1rvhrBQXlh4ns/z5ZanDP
// SIG // 3lp7ZEDLNJStM5gnx/gbu4tYfhQ0UfBe1s1K/+zN44VX
// SIG // T6QH6ts2AgPGVSzYBIs2PrxZoMfsw7rlPxgoQyu5JQ3A
// SIG // sPv4FaBLkjpeXJULMnVkIySV+2dslftSguhtSVaqT93a
// SIG // SjwD/+LnTaqUeRyHm/E2tSX40VM0r96ko3ucvUWE/wI1
// SIG // jWEO4LHs7g1jP/HGddZHKNSb1MjkPMfyQ5DBakkcI9b/
// SIG // pnOiyipY//3Vghvx8PaaXZViV+qbA3rELkEexVe3gqlf
// SIG // 5X2o6C6Tzcf/cxdXb/MlwXc5liT3gontl2kJ6wCg6pRt
// SIG // 817sfbTUJs9i/ek3cZyDtjhpmMQQAGQFqCm5rWCPgos+
// SIG // AmMjtBZuWd0+NGuXeyibn7Regk6HHHP1Kf46RX0IrS34
// SIG // 3e9XEvnCwnqEPqtJ9CAC71fmnGxDaLkjq47/0LWOBSIx
// SIG // 5SOc3ScyZxrJFSeaM4Y4tGEbHL9VsCRQLssgjELy3Zj3
// SIG // XQIDAQABo4IBSTCCAUUwHQYDVR0OBBYEFN//n4e7TXMx
// SIG // InxF5QkIBTl4DIeqMB8GA1UdIwQYMBaAFJ+nFV0AXmJd
// SIG // g/Tl0mWnG1M1GelyMF8GA1UdHwRYMFYwVKBSoFCGTmh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY3Js
// SIG // L01pY3Jvc29mdCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAy
// SIG // MDEwKDEpLmNybDBsBggrBgEFBQcBAQRgMF4wXAYIKwYB
// SIG // BQUHMAKGUGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9w
// SIG // a2lvcHMvY2VydHMvTWljcm9zb2Z0JTIwVGltZS1TdGFt
// SIG // cCUyMFBDQSUyMDIwMTAoMSkuY3J0MAwGA1UdEwEB/wQC
// SIG // MAAwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwgwDgYDVR0P
// SIG // AQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4ICAQAz+sIT
// SIG // hYw9WnfBpBCfaCwbr3453TMhkPUeB4ASkpT7d6WtF1S3
// SIG // IpqyZQ5yhoBQYlsCOlzoMPNoXaJQ4jAwSy1kTEyR1lXl
// SIG // GNYFOFwfDjiMQXPf0PN829XNEVhLqYAuPCPm/tsdlTYB
// SIG // iVLECMj0dj4l0IU+T8nqzIGoPTkqHUIxcKTXRoq52tq6
// SIG // VdtxFMBXjuft6El+CXgjWb4MlDsyqcjL6lWrm6PhpX/6
// SIG // bH1ubSHDI2VbdHpbMH6tKiTUIKGIqW2k77+8ZosVCRk2
// SIG // 4sWIn08AIrz3CjXXorGZrbbOzh2wDO/eWbyi0hKl4kVI
// SIG // w2Gcnh8gMrDBAC2yIXV4BxIetCqGcs5QV891cRIqxO54
// SIG // bnDcDNrVYjpcCOxJHlOYbnXLZ1whueSbjMP8G+3O9USo
// SIG // pmQPyl5VqZgb5CZAdAWREvDghg3fs2P0/QZ06fLIt+k6
// SIG // pfOFX6WHvYh5suz6qsajBdgp+KtmtJhDJ6Qa7gxhP4Ef
// SIG // XPElSdp7ZAEcuUn5brifzAetckb09ZlMd5cqaTttnj4w
// SIG // Y58KBL1cWw409Y4XTDXXrzrg3iRs0SyvRzZkwwvk3WUJ
// SIG // Y/lTICJvGXhCETRdKGr4hfkGXFGS1s1m2Kusg6JPBGSh
// SIG // YkUeaLQaBi72mBacQWVBPJpyyrg5WKG468Ye5Z8K8Vf3
// SIG // zMtBfX0qNicRZrS4LTCCB3EwggVZoAMCAQICEzMAAAAV
// SIG // xedrngKbSZkAAAAAABUwDQYJKoZIhvcNAQELBQAwgYgx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jv
// SIG // c29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0eSAy
// SIG // MDEwMB4XDTIxMDkzMDE4MjIyNVoXDTMwMDkzMDE4MzIy
// SIG // NVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp
// SIG // bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT
// SIG // FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMd
// SIG // TWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAwggIi
// SIG // MA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDk4aZM
// SIG // 57RyIQt5osvXJHm9DtWC0/3unAcH0qlsTnXIyjVX9gF/
// SIG // bErg4r25PhdgM/9cT8dm95VTcVrifkpa/rg2Z4VGIwy1
// SIG // jRPPdzLAEBjoYH1qUoNEt6aORmsHFPPFdvWGUNzBRMhx
// SIG // XFExN6AKOG6N7dcP2CZTfDlhAnrEqv1yaa8dq6z2Nr41
// SIG // JmTamDu6GnszrYBbfowQHJ1S/rboYiXcag/PXfT+jlPP
// SIG // 1uyFVk3v3byNpOORj7I5LFGc6XBpDco2LXCOMcg1KL3j
// SIG // tIckw+DJj361VI/c+gVVmG1oO5pGve2krnopN6zL64NF
// SIG // 50ZuyjLVwIYwXE8s4mKyzbnijYjklqwBSru+cakXW2dg
// SIG // 3viSkR4dPf0gz3N9QZpGdc3EXzTdEonW/aUgfX782Z5F
// SIG // 37ZyL9t9X4C626p+Nuw2TPYrbqgSUei/BQOj0XOmTTd0
// SIG // lBw0gg/wEPK3Rxjtp+iZfD9M269ewvPV2HM9Q07BMzlM
// SIG // jgK8QmguEOqEUUbi0b1qGFphAXPKZ6Je1yh2AuIzGHLX
// SIG // pyDwwvoSCtdjbwzJNmSLW6CmgyFdXzB0kZSU2LlQ+QuJ
// SIG // YfM2BjUYhEfb3BvR/bLUHMVr9lxSUV0S2yW6r1AFemzF
// SIG // ER1y7435UsSFF5PAPBXbGjfHCBUYP3irRbb1Hode2o+e
// SIG // FnJpxq57t7c+auIurQIDAQABo4IB3TCCAdkwEgYJKwYB
// SIG // BAGCNxUBBAUCAwEAATAjBgkrBgEEAYI3FQIEFgQUKqdS
// SIG // /mTEmr6CkTxGNSnPEP8vBO4wHQYDVR0OBBYEFJ+nFV0A
// SIG // XmJdg/Tl0mWnG1M1GelyMFwGA1UdIARVMFMwUQYMKwYB
// SIG // BAGCN0yDfQEBMEEwPwYIKwYBBQUHAgEWM2h0dHA6Ly93
// SIG // d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvRG9jcy9SZXBv
// SIG // c2l0b3J5Lmh0bTATBgNVHSUEDDAKBggrBgEFBQcDCDAZ
// SIG // BgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8E
// SIG // BAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAW
// SIG // gBTV9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBN
// SIG // MEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20v
// SIG // cGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAx
// SIG // MC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsG
// SIG // AQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20v
// SIG // cGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIz
// SIG // LmNydDANBgkqhkiG9w0BAQsFAAOCAgEAnVV9/Cqt4Swf
// SIG // ZwExJFvhnnJL/Klv6lwUtj5OR2R4sQaTlz0xM7U518Jx
// SIG // Nj/aZGx80HU5bbsPMeTCj/ts0aGUGCLu6WZnOlNN3Zi6
// SIG // th542DYunKmCVgADsAW+iehp4LoJ7nvfam++Kctu2D9I
// SIG // dQHZGN5tggz1bSNU5HhTdSRXud2f8449xvNo32X2pFaq
// SIG // 95W2KFUn0CS9QKC/GbYSEhFdPSfgQJY4rPf5KYnDvBew
// SIG // VIVCs/wMnosZiefwC2qBwoEZQhlSdYo2wh3DYXMuLGt7
// SIG // bj8sCXgU6ZGyqVvfSaN0DLzskYDSPeZKPmY7T7uG+jIa
// SIG // 2Zb0j/aRAfbOxnT99kxybxCrdTDFNLB62FD+CljdQDzH
// SIG // VG2dY3RILLFORy3BFARxv2T5JL5zbcqOCb2zAVdJVGTZ
// SIG // c9d/HltEAY5aGZFrDZ+kKNxnGSgkujhLmm77IVRrakUR
// SIG // R6nxt67I6IleT53S0Ex2tVdUCbFpAUR+fKFhbHP+Crvs
// SIG // QWY9af3LwUFJfn6Tvsv4O+S3Fb+0zj6lMVGEvL8CwYKi
// SIG // excdFYmNcP7ntdAoGokLjzbaukz5m/8K6TT4JDVnK+AN
// SIG // uOaMmdbhIurwJ0I9JZTmdHRbatGePu1+oDEzfbzL6Xu/
// SIG // OHBE0ZDxyKs6ijoIYn/ZcGNTTY3ugm2lBRDBcQZqELQd
// SIG // VTNYs6FwZvKhggLUMIICPQIBATCCAQChgdikgdUwgdIx
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xLTArBgNVBAsTJE1pY3Jv
// SIG // c29mdCBJcmVsYW5kIE9wZXJhdGlvbnMgTGltaXRlZDEm
// SIG // MCQGA1UECxMdVGhhbGVzIFRTUyBFU046M0JENC00Qjgw
// SIG // LTY5QzMxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0
// SIG // YW1wIFNlcnZpY2WiIwoBATAHBgUrDgMCGgMVAPeNohrm
// SIG // Ba7BOMM1g3fORKTOkYsKoIGDMIGApH4wfDELMAkGA1UE
// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
// SIG // b3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRp
// SIG // bWUtU3RhbXAgUENBIDIwMTAwDQYJKoZIhvcNAQEFBQAC
// SIG // BQDp5hAOMCIYDzIwMjQwNTA4MjI1MTU4WhgPMjAyNDA1
// SIG // MDkyMjUxNThaMHQwOgYKKwYBBAGEWQoEATEsMCowCgIF
// SIG // AOnmEA4CAQAwBwIBAAICEHkwBwIBAAICEs8wCgIFAOnn
// SIG // YY4CAQAwNgYKKwYBBAGEWQoEAjEoMCYwDAYKKwYBBAGE
// SIG // WQoDAqAKMAgCAQACAwehIKEKMAgCAQACAwGGoDANBgkq
// SIG // hkiG9w0BAQUFAAOBgQAhwxB71PeD6UAHVD6wJfVPUTNc
// SIG // ydHkTiQzqbn3LO169j26STfnqs0eGGmuPzcW7wXzV6nc
// SIG // cJLFkEZfGFoeiDweywF6xK33g+wb9frHYWXD4p1iR7uG
// SIG // ICGb+BmbhnfhdczDY5/pRwuTmJT/YztwDZInfLJE71db
// SIG // R28MOQAp2abAlDGCBA0wggQJAgEBMIGTMHwxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFBDQSAyMDEwAhMzAAAB5Y9qwPM9tAuj
// SIG // AAEAAAHlMA0GCWCGSAFlAwQCAQUAoIIBSjAaBgkqhkiG
// SIG // 9w0BCQMxDQYLKoZIhvcNAQkQAQQwLwYJKoZIhvcNAQkE
// SIG // MSIEINHP7iM+HHasVcWfe4xS5s2n1PFIAoCqcrR2Sctb
// SIG // fdTJMIH6BgsqhkiG9w0BCRACLzGB6jCB5zCB5DCBvQQg
// SIG // FanT//6o8RhYXtmG6BF3m/CP6QKH9NQsIW8VB/VOve0w
// SIG // gZgwgYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MAITMwAAAeWPasDzPbQLowABAAAB5TAiBCALdia3QTEE
// SIG // UttSBEuRwiP8lKpTqu2X3R3l5C+g5txLsTANBgkqhkiG
// SIG // 9w0BAQsFAASCAgByeLSqz9XldXWu+p5gFyBpzCvjvKX4
// SIG // oeLBoatS9UxtPVLDkSHvUMK/02wrO3vJjJC2hj54XVkn
// SIG // uOUdHToowtC8Ctl8Z8LVzQQN+KlaYi6w88U2mMwq65ry
// SIG // IdZ/UBLxI0kbZbgfY4dWPLDzeOvgFRcP4nvfRsT9Fq5j
// SIG // 6clPmWJCtoRe+AV6ikIqJEFX7AQHsH9Z9nyxfUNMI1Vb
// SIG // x1y3qRtfClki6b1GCQda0RjHBA13zD4JQq6uRwZ0qjtP
// SIG // NVySdRjKZI6WlLs+axPIzerF1UCfR6zgmu+YY48/8LOS
// SIG // oOLyh9kQUZvtr6rkLDqijMkMfahi1oGdJvuEU9KvxUui
// SIG // S6JCngH6s2aV6XmxsR8bTGrpnKGn+PIs9QlDtxWLNV8a
// SIG // QBpYky8g/lrr6l2z94T0WtW44iW5nEBWznVGH1d1pith
// SIG // 5yuKuPtdHt3yFdp2kXm7THK6X4Gu7qfmIna1z42lXuOP
// SIG // PC37qgrD+xZHgrC0dp+wEpPuJ3vU7pFSANdVNGz6LEED
// SIG // GSOPISaOJ2siSNs+dPOgqxhDIXT7GRe8aCO1i6MlWGQa
// SIG // wrWEr2eos4ReEFvKY1eCf/CELw3Ygeu8rX1IUCnlwi+q
// SIG // pTWfY8fyXYeOlOuf/uruMX1PcWIv0jwwi9CI10+X/lFy
// SIG // h7W0WTNHuUkTt6xKC3zDSAsV2TCo4m6m0ySEAw==
// SIG // End signature block]]></con:responseContent>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1daa17c1c12d33d"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 08 May 2024 19:15:38 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:36 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="Response 2" id="710e25eb-f6a6-413c-aba4-42e5cd0ee22f" httpResponseStatus="304" mediaType="text/javascript">
        <con:settings/>
        <con:responseContent/>
        <con:header>
          <con:name>Accept-Ranges</con:name>
          <con:value>bytes</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>ETag</con:name>
          <con:value>"1daa17c1c12d33d"</con:value>
        </con:header>
        <con:header>
          <con:name>Last-Modified</con:name>
          <con:value>Wed, 08 May 2024 19:15:38 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:29 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/_blazor/negotiate" method="POST" resourcePath="/_blazor/negotiate" id="587ea638-fed5-4055-9a99-c240801f462d">
      <con:settings/>
      <con:dispatchStyle>PARAMETER</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:parameterDispatcherRuleContainer>
        <con:ParameterDispatcherRule>
          <con:ruleName>negotiateVersion=1</con:ruleName>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>negotiateVersion</con:parameterName>
            <con:parameterValue>1</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:responseName>For negotiateVersion=1</con:responseName>
        </con:ParameterDispatcherRule>
      </con:parameterDispatcherRuleContainer>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="For negotiateVersion=1" id="fd9b0132-28b5-44d7-a4f4-a424b43e67a6" httpResponseStatus="200" mediaType="application/json" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:responseContent>{"negotiateVersion":1,"connectionId":"bdzK-V-tSbUNl0N9sL60pw","connectionToken":"Z5U3bYb5fLBOgF70lOG3Bg","availableTransports":[{"transport":"WebSockets","transferFormats":["Text","Binary"]},{"transport":"ServerSentEvents","transferFormats":["Text"]},{"transport":"LongPolling","transferFormats":["Text","Binary"]}]}</con:responseContent>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:37 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/_blazor" method="GET" resourcePath="/_blazor" id="452aaee3-edd5-4b48-bd8d-4ccb5954a3e9">
      <con:settings/>
      <con:dispatchStyle>PARAMETER</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:parameterDispatcherRuleContainer>
        <con:ParameterDispatcherRule>
          <con:ruleName>id=vk2RYx625t2poAIpvdBMGw&amp;_=1725301978721</con:ruleName>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>id</con:parameterName>
            <con:parameterValue>vk2RYx625t2poAIpvdBMGw</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>_</con:parameterName>
            <con:parameterValue>1725301978721</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:responseName>For id=vk2RYx625t2poAIpvdBMGw&amp;_=1725301978721</con:responseName>
        </con:ParameterDispatcherRule>
        <con:ParameterDispatcherRule>
          <con:ruleName>id=vk2RYx625t2poAIpvdBMGw&amp;_=1725301978807</con:ruleName>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>id</con:parameterName>
            <con:parameterValue>vk2RYx625t2poAIpvdBMGw</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>_</con:parameterName>
            <con:parameterValue>1725301978807</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:responseName>For id=vk2RYx625t2poAIpvdBMGw&amp;_=1725301978807</con:responseName>
        </con:ParameterDispatcherRule>
        <con:ParameterDispatcherRule>
          <con:ruleName>id=vk2RYx625t2poAIpvdBMGw&amp;_=1725301978990</con:ruleName>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>id</con:parameterName>
            <con:parameterValue>vk2RYx625t2poAIpvdBMGw</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>_</con:parameterName>
            <con:parameterValue>1725301978990</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:responseName>For id=vk2RYx625t2poAIpvdBMGw&amp;_=1725301978990</con:responseName>
        </con:ParameterDispatcherRule>
        <con:ParameterDispatcherRule>
          <con:ruleName>id=vk2RYx625t2poAIpvdBMGw&amp;_=1725302069501</con:ruleName>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>id</con:parameterName>
            <con:parameterValue>vk2RYx625t2poAIpvdBMGw</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>_</con:parameterName>
            <con:parameterValue>1725302069501</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:responseName>For id=vk2RYx625t2poAIpvdBMGw&amp;_=1725302069501</con:responseName>
        </con:ParameterDispatcherRule>
        <con:ParameterDispatcherRule>
          <con:ruleName>id=D6ISY0VtdlZjwP4zBOIzNw&amp;_=1725302091203</con:ruleName>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>id</con:parameterName>
            <con:parameterValue>D6ISY0VtdlZjwP4zBOIzNw</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>_</con:parameterName>
            <con:parameterValue>1725302091203</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:responseName>For id=D6ISY0VtdlZjwP4zBOIzNw&amp;_=1725302091203</con:responseName>
        </con:ParameterDispatcherRule>
        <con:ParameterDispatcherRule>
          <con:ruleName>id=D6ISY0VtdlZjwP4zBOIzNw&amp;_=1725302091231</con:ruleName>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>id</con:parameterName>
            <con:parameterValue>D6ISY0VtdlZjwP4zBOIzNw</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>_</con:parameterName>
            <con:parameterValue>1725302091231</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:responseName>For id=D6ISY0VtdlZjwP4zBOIzNw&amp;_=1725302091231</con:responseName>
        </con:ParameterDispatcherRule>
      </con:parameterDispatcherRuleContainer>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="Response 1" id="f9d2d1d2-c395-4304-bc30-226d25ffb105" httpResponseStatus="200">
        <con:settings/>
      </con:response>
      <con:response name="For id=vk2RYx625t2poAIpvdBMGw&amp;_=1725301978721" id="31144d50-9e97-49cf-979d-dcc86b3a98c2" httpResponseStatus="200" mediaType="application/octet-stream" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache, no-store</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Expires</con:name>
          <con:value>Thu, 01 Jan 1970 00:00:00 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Pragma</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:57 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="For id=vk2RYx625t2poAIpvdBMGw&amp;_=1725301978807" id="f54c7f7d-094b-4961-a2dc-213a16991840" httpResponseStatus="200" mediaType="application/octet-stream" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e45757200025b42acf317f8060854e00200007870000000037b7d1e">
        <con:settings/>
        <con:responseContent xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache, no-store</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Expires</con:name>
          <con:value>Thu, 01 Jan 1970 00:00:00 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Pragma</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:58 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="For id=vk2RYx625t2poAIpvdBMGw&amp;_=1725301978990" id="bc3999dd-cd91-42f4-a44e-4d637c8366af" httpResponseStatus="200" mediaType="text/plain">
        <con:settings/>
        <con:responseContent/>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache, no-store</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Expires</con:name>
          <con:value>Thu, 01 Jan 1970 00:00:00 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Pragma</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:28 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="For id=vk2RYx625t2poAIpvdBMGw&amp;_=1725302069501" id="5cb786a1-eec2-4b43-8b9e-8bbdf64448da" httpResponseStatus="200" mediaType="application/octet-stream" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e45757200025b42acf317f8060854e002000078700000014a64960180c0b04a532e426567696e496e766f6b654a539502d929426c617a6f722e5f696e7465726e616c2e61747461636857656252656e6465726572496e7465726f70be5b312c7b225f5f646f744e65744f626a656374223a317d2c7b7d2c7b7d5d030090e301950380a13003d9db4366444a384a7875656d5574717352466a5a412d72694f6a314a7a69585a796d63734f7665526748336c49365f675a666d42584f303464763376676d3844375f576e6768706145524d47344675724d7451496953666e6e31664f54394143633379442d4c6e746362362d346a5951574e59314567506f7767315932697248657143524a444f6c69396f6e53706553726d537934763452516270455373686f375130374d3831565f42684d42494c644842344d4b2d3143754c433258565a356371574b6a69645166787132547a7a4d513733724675594c595f384530">
        <con:settings/>
        <con:responseContent xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache, no-store</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Expires</con:name>
          <con:value>Thu, 01 Jan 1970 00:00:00 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Pragma</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:28 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="For id=D6ISY0VtdlZjwP4zBOIzNw&amp;_=1725302091203" id="d0b3af17-a246-4500-9f11-12052a04f816" httpResponseStatus="200" mediaType="application/octet-stream" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e4570">
        <con:settings/>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache, no-store</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Expires</con:name>
          <con:value>Thu, 01 Jan 1970 00:00:00 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Pragma</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:34:51 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="For id=D6ISY0VtdlZjwP4zBOIzNw&amp;_=1725302091231" id="cbd16927-4915-482a-a0fb-609318f77bd9" httpResponseStatus="200" mediaType="application/octet-stream" compressedBodyContent="aced00057372002f636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c7565000b8b02c748eeab0200035a000a636f6d707265737365644c000b636f6d7072657373696f6e74003d4c636f6d2f657669776172652f736f617075692f696d706c2f737570706f72742f436f6d7072657373656456616c756524436f6d7072657373696f6e3b5b0004646174617400025b427870007e72003b636f6d2e657669776172652e736f617075692e696d706c2e737570706f72742e436f6d7072657373656456616c756524436f6d7072657373696f6e00000000000000001200007872000e6a6176612e6c616e672e456e756d000000000000000012000078707400044e4f4e45757200025b42acf317f8060854e00200007870000000247b226572726f72223a2248616e647368616b65207761732063616e63656c65642e227d1e">
        <con:settings/>
        <con:responseContent xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>Cache-Control</con:name>
          <con:value>no-cache, no-store</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Expires</con:name>
          <con:value>Thu, 01 Jan 1970 00:00:00 GMT</con:value>
        </con:header>
        <con:header>
          <con:name>Pragma</con:name>
          <con:value>no-cache</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:35:06 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
    <con:restMockAction name="/_blazor" method="POST" resourcePath="/_blazor" id="8edfd14e-1e86-4206-ad19-814abebd91e0">
      <con:settings/>
      <con:dispatchStyle>PARAMETER</con:dispatchStyle>
      <con:dispatchConfig/>
      <con:dispatchXPath/>
      <con:parameterDispatcherRuleContainer>
        <con:ParameterDispatcherRule>
          <con:ruleName>id=vk2RYx625t2poAIpvdBMGw</con:ruleName>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>id</con:parameterName>
            <con:parameterValue>vk2RYx625t2poAIpvdBMGw</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:responseName>For id=vk2RYx625t2poAIpvdBMGw</con:responseName>
        </con:ParameterDispatcherRule>
        <con:ParameterDispatcherRule>
          <con:ruleName>id=D6ISY0VtdlZjwP4zBOIzNw</con:ruleName>
          <con:parameterDispatcherCondition>
            <con:parameterType>QUERY</con:parameterType>
            <con:parameterOperationType>EQUALS</con:parameterOperationType>
            <con:parameterName>id</con:parameterName>
            <con:parameterValue>D6ISY0VtdlZjwP4zBOIzNw</con:parameterValue>
          </con:parameterDispatcherCondition>
          <con:responseName>For id=D6ISY0VtdlZjwP4zBOIzNw</con:responseName>
        </con:ParameterDispatcherRule>
      </con:parameterDispatcherRuleContainer>
      <con:routeEnabled>true</con:routeEnabled>
      <con:routeScript/>
      <con:saveRoutedResponse>true</con:saveRoutedResponse>
      <con:response name="For id=vk2RYx625t2poAIpvdBMGw" id="5ca4f1e5-feb0-4b13-8715-ad544192a90c" httpResponseStatus="200" mediaType="text/plain">
        <con:settings/>
        <con:responseContent/>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:32:57 GMT</con:value>
        </con:header>
      </con:response>
      <con:response name="For id=D6ISY0VtdlZjwP4zBOIzNw" id="f28015aa-2a64-48e8-99fd-a24bf2410dbd" httpResponseStatus="200" mediaType="text/plain">
        <con:settings/>
        <con:responseContent/>
        <con:header>
          <con:name>Referrer-Policy</con:name>
          <con:value>strict-origin-when-cross-origin</con:value>
        </con:header>
        <con:header>
          <con:name>Server</con:name>
          <con:value>Kestrel</con:value>
        </con:header>
        <con:header>
          <con:name>X-Content-Type-Options</con:name>
          <con:value>nosniff</con:value>
        </con:header>
        <con:header>
          <con:name>Content-Security-Policy</con:name>
          <con:value>base-uri 'self'; object-src 'none'; script-src 'self'; style-src 'self' 'unsafe-inline'; frame-src 'none'; img-src data: https:;</con:value>
        </con:header>
        <con:header>
          <con:name>Date</con:name>
          <con:value>Mon, 02 Sep 2024 18:35:06 GMT</con:value>
        </con:header>
      </con:response>
    </con:restMockAction>
  </con:restMockService>
  <con:properties/>
  <con:wssContainer/>
  <con:databaseConnectionContainer/>
  <con:jmsConnectionContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:reporting>
    <con:xmlTemplates/>
    <con:parameters/>
  </con:reporting>
  <con:eventHandlers type="RequestFilter.filterRequest" name="RequestFilter.filterRequest">
    <con:script>// Sample event script to add custom HTTP header to all outgoing REST, SOAP and HTTP(S) calls
// This code is often used for adding custom authentication to ReadyAPI functional tests

// If hardcoding the token, uncomment and change line 5
// token = '4567'

// If your token is parameterized in Project level custom property, uncomment line 8
// token = request.parent.testCase.testSuite.project.getProperty('auth_token').getValue()

// To modify all outgoing calls, remove comments from lines 11 to 16
// headers = request.requestHeaders
// if (headers.containsKey('auth_token2') == false) {
//   headers.put('auth_token2', token)
//   request.requestHeaders = headers
// }</con:script>
  </con:eventHandlers>
  <con:eventHandlers type="TestRunListener.afterStep" name="TestRunListener.afterStep">
    <con:script>// Save all test step results into files
// Change the directory path in line 5 to a location where you want to store details
// then uncomment lines 5 to 10

// filePath = 'C:\\tempOutputDirectory\\'
// fos = new java.io.FileOutputStream(filePath + testStepResult.testStep.label + '.txt', true)
// pw = new java.io.PrintWriter(fos)
// testStepResult.writeTo(pw)
// pw.close()
// fos.close()</con:script>
  </con:eventHandlers>
  <con:authRepository/>
  <con:tags/>
</con:soapui-project>
